[tool:pytest]
# Pytest configuration for Docker testing environment

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Minimum version
minversion = 7.0

# Add options
addopts = 
    --strict-markers
    --strict-config
    --tb=short
    --maxfail=10
    --durations=10
    --color=yes
    --disable-warnings
    --no-header
    --show-capture=no

# Markers for test categorization
markers =
    unit: Unit tests
    integration: Integration tests
    e2e: End-to-end tests
    performance: Performance tests
    security: Security tests
    ai_features: AI-related functionality tests
    subscription: Subscription-related tests
    slow: Slow running tests
    fast: Fast running tests
    smoke: Smoke tests for basic functionality
    regression: Regression tests
    critical: Critical path tests
    
    # Feature-specific markers
    xai_service: XAI service tests
    resume_processing: Resume processing tests
    interview_workflow: Interview workflow tests
    content_validation: Content validation tests
    data_retention: Data retention tests
    rate_limiting: Rate limiting tests
    
    # Environment markers
    docker: Tests that require Docker
    database: Tests that require database
    redis: Tests that require Redis
    external_api: Tests that require external API access
    
    # Skip conditions
    skip_ci: Skip in CI environment
    skip_docker: Skip in Docker environment
    requires_gpu: Requires GPU for AI processing

# Test timeout (in seconds)
timeout = 300

# Asyncio configuration
asyncio_mode = auto

# Coverage configuration
[coverage:run]
source = src
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */migrations/*
    */venv/*
    */env/*
    */.venv/*
    */node_modules/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

show_missing = True
precision = 2
skip_covered = False

[coverage:html]
directory = coverage-reports/html

[coverage:xml]
output = coverage-reports/coverage.xml

# Logging configuration for tests
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = test-results/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Filterwarnings
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning
    ignore:.*coroutine.*was never awaited:RuntimeWarning

# Docker-specific test configuration
env =
    TESTING = true
    PYTHONPATH = /app
    DATABASE_URL = postgresql://test_user:test_password@test-db:5432/test_career_db
    REDIS_URL = redis://test-redis:6379/0
    XAI_API_URL = http://mock-ai-service:8080
    SMTP_HOST = mock-email-service
    SMTP_PORT = 1025