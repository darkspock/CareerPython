"""Add CompanyCandidate table for company-candidate relationships

Revision ID: 6286cc5b7f24
Revises: 0bbf341ad80d
Create Date: 2025-10-21 22:59:47.991340

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '6286cc5b7f24'
down_revision: Union[str, Sequence[str], None] = '0bbf341ad80d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('company_users',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('company_id', sa.String(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('role', sa.Enum('ADMIN', 'RECRUITER', 'VIEWER', name='companyuserrole', native_enum=False, length=20), nullable=False),
    sa.Column('permissions', sa.JSON(), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', name='companyuserstatus', native_enum=False, length=20), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('company_id', 'user_id', name='uq_company_user')
    )
    op.create_index(op.f('ix_company_users_company_id'), 'company_users', ['company_id'], unique=False)
    op.create_index(op.f('ix_company_users_id'), 'company_users', ['id'], unique=False)
    op.create_index(op.f('ix_company_users_user_id'), 'company_users', ['user_id'], unique=False)
    op.create_table('company_candidates',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('company_id', sa.String(), nullable=False),
    sa.Column('candidate_id', sa.String(), nullable=False),
    sa.Column('status', sa.Enum('PENDING_INVITATION', 'PENDING_CONFIRMATION', 'ACTIVE', 'REJECTED', 'ARCHIVED', name='companycandidatestatus', native_enum=False, length=30), nullable=False),
    sa.Column('ownership_status', sa.Enum('COMPANY_OWNED', 'USER_OWNED', name='ownershipstatus', native_enum=False, length=20), nullable=False),
    sa.Column('created_by_user_id', sa.String(), nullable=False),
    sa.Column('workflow_id', sa.String(), nullable=True),
    sa.Column('current_stage_id', sa.String(), nullable=True),
    sa.Column('invited_at', sa.DateTime(), nullable=False),
    sa.Column('confirmed_at', sa.DateTime(), nullable=True),
    sa.Column('rejected_at', sa.DateTime(), nullable=True),
    sa.Column('archived_at', sa.DateTime(), nullable=True),
    sa.Column('visibility_settings', sa.JSON(), nullable=False),
    sa.Column('tags', sa.ARRAY(sa.String()), nullable=False),
    sa.Column('internal_notes', sa.Text(), nullable=False),
    sa.Column('position', sa.String(length=255), nullable=True),
    sa.Column('department', sa.String(length=255), nullable=True),
    sa.Column('priority', sa.Enum('LOW', 'MEDIUM', 'HIGH', name='candidatepriority', native_enum=False, length=10), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['candidate_id'], ['candidates.id'], ),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['company_users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_company_candidates_candidate_id'), 'company_candidates', ['candidate_id'], unique=False)
    op.create_index(op.f('ix_company_candidates_company_id'), 'company_candidates', ['company_id'], unique=False)
    op.create_index(op.f('ix_company_candidates_created_by_user_id'), 'company_candidates', ['created_by_user_id'], unique=False)
    op.create_index(op.f('ix_company_candidates_current_stage_id'), 'company_candidates', ['current_stage_id'], unique=False)
    op.create_index(op.f('ix_company_candidates_id'), 'company_candidates', ['id'], unique=False)
    op.create_index(op.f('ix_company_candidates_ownership_status'), 'company_candidates', ['ownership_status'], unique=False)
    op.create_index(op.f('ix_company_candidates_status'), 'company_candidates', ['status'], unique=False)
    op.create_index(op.f('ix_company_candidates_workflow_id'), 'company_candidates', ['workflow_id'], unique=False)
    op.drop_index(op.f('idx_change_type_created'), table_name='interview_history')
    op.drop_index(op.f('idx_interview_created'), table_name='interview_history')
    op.drop_index(op.f('idx_interview_version'), table_name='interview_history')
    op.drop_index(op.f('ix_interview_history_change_type'), table_name='interview_history')
    op.drop_index(op.f('ix_interview_history_created_at'), table_name='interview_history')
    op.drop_index(op.f('ix_interview_history_id'), table_name='interview_history')
    op.drop_index(op.f('ix_interview_history_interview_id'), table_name='interview_history')
    op.drop_index(op.f('ix_interview_history_version_number'), table_name='interview_history')
    op.drop_table('interview_history')
    op.drop_index(op.f('idx_created_interview'), table_name='interview_responses')
    op.drop_index(op.f('idx_follow_up_sentiment'), table_name='interview_responses')
    op.drop_index(op.f('idx_interview_question'), table_name='interview_responses')
    op.drop_index(op.f('idx_quality_complete'), table_name='interview_responses')
    op.drop_index(op.f('ix_interview_responses_follow_up_needed'), table_name='interview_responses')
    op.drop_index(op.f('ix_interview_responses_id'), table_name='interview_responses')
    op.drop_index(op.f('ix_interview_responses_interview_id'), table_name='interview_responses')
    op.drop_index(op.f('ix_interview_responses_is_complete'), table_name='interview_responses')
    op.drop_index(op.f('ix_interview_responses_question_id'), table_name='interview_responses')
    op.drop_table('interview_responses')
    op.drop_index(op.f('ix_job_applications_candidate_id'), table_name='job_applications')
    op.drop_index(op.f('ix_job_applications_user_id'), table_name='job_applications')
    op.drop_table('job_applications')
    op.drop_index(op.f('ix_usage_tracking_id'), table_name='usage_tracking')
    op.drop_table('usage_tracking')
    op.drop_index(op.f('ix_profile_sections_id'), table_name='profile_sections')
    op.drop_table('profile_sections')
    op.drop_index(op.f('idx_adaptive_parent'), table_name='interview_questions')
    op.drop_index(op.f('idx_category_difficulty'), table_name='interview_questions')
    op.drop_index(op.f('idx_required_follow_up'), table_name='interview_questions')
    op.drop_index(op.f('idx_template_category'), table_name='interview_questions')
    op.drop_index(op.f('idx_template_order'), table_name='interview_questions')
    op.drop_index(op.f('ix_interview_questions_category'), table_name='interview_questions')
    op.drop_index(op.f('ix_interview_questions_difficulty'), table_name='interview_questions')
    op.drop_index(op.f('ix_interview_questions_id'), table_name='interview_questions')
    op.drop_index(op.f('ix_interview_questions_is_adaptive'), table_name='interview_questions')
    op.drop_index(op.f('ix_interview_questions_is_follow_up'), table_name='interview_questions')
    op.drop_index(op.f('ix_interview_questions_is_required'), table_name='interview_questions')
    op.drop_index(op.f('ix_interview_questions_order_position'), table_name='interview_questions')
    op.drop_index(op.f('ix_interview_questions_parent_question_id'), table_name='interview_questions')
    op.drop_index(op.f('ix_interview_questions_template_id'), table_name='interview_questions')
    op.drop_table('interview_questions')
    op.drop_index(op.f('ix_interview_answers_id'), table_name='interview_answers')
    op.drop_table('interview_answers')
    op.drop_index(op.f('idx_resume_version_created_at'), table_name='resume_versions')
    op.drop_index(op.f('idx_resume_version_number'), table_name='resume_versions')
    op.drop_index(op.f('idx_resume_version_resume_id'), table_name='resume_versions')
    op.drop_index(op.f('ix_resume_versions_id'), table_name='resume_versions')
    op.drop_index(op.f('ix_resume_versions_resume_id'), table_name='resume_versions')
    op.drop_table('resume_versions')
    op.drop_index(op.f('idx_candidate_status'), table_name='interviews')
    op.drop_index(op.f('idx_created_status'), table_name='interviews')
    op.drop_index(op.f('idx_interview_type_membership'), table_name='interviews')
    op.drop_index(op.f('ix_interviews_application_id'), table_name='interviews')
    op.drop_index(op.f('ix_interviews_candidate_id'), table_name='interviews')
    op.drop_index(op.f('ix_interviews_created_at'), table_name='interviews')
    op.drop_index(op.f('ix_interviews_id'), table_name='interviews')
    op.drop_index(op.f('ix_interviews_interview_type'), table_name='interviews')
    op.drop_index(op.f('ix_interviews_membership_level'), table_name='interviews')
    op.drop_index(op.f('ix_interviews_status'), table_name='interviews')
    op.drop_table('interviews')
    op.drop_table('staff')
    op.drop_index(op.f('idx_async_jobs_created_at'), table_name='async_jobs')
    op.drop_index(op.f('idx_async_jobs_status'), table_name='async_jobs')
    op.drop_index(op.f('idx_async_jobs_type_entity'), table_name='async_jobs')
    op.drop_table('async_jobs')
    op.drop_index(op.f('ix_candidate_job_categories_id'), table_name='candidate_job_categories')
    op.drop_table('candidate_job_categories')
    op.alter_column('candidate_educations', 'candidate_id',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('candidate_educations', 'degree',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('candidate_educations', 'institution',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('candidate_educations', 'description',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('candidate_educations', 'start_date',
               existing_type=sa.DATE(),
               nullable=False)
    op.alter_column('candidate_educations', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('candidate_educations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('candidate_experiences', 'candidate_id',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('candidate_experiences', 'job_title',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('candidate_experiences', 'company',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('candidate_experiences', 'description',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('candidate_experiences', 'start_date',
               existing_type=sa.DATE(),
               nullable=False)
    op.alter_column('candidate_experiences', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('candidate_experiences', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('candidate_projects', 'candidate_id',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('candidate_projects', 'name',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('candidate_projects', 'description',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('candidate_projects', 'start_date',
               existing_type=sa.DATE(),
               nullable=False)
    op.alter_column('candidate_projects', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('candidate_projects', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('candidates', 'name',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('candidates', 'date_of_birth',
               existing_type=sa.DATE(),
               nullable=False)
    op.alter_column('candidates', 'city',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('candidates', 'country',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('candidates', 'phone',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('candidates', 'status',
               existing_type=sa.VARCHAR(),
               type_=sa.Enum('DRAFT', 'COMPLETE', 'DELETED', name='candidatestatusenum'),
               nullable=False)
    op.alter_column('candidates', 'job_category',
               existing_type=sa.VARCHAR(),
               type_=sa.Enum('TECHNOLOGY', 'OPERATIONS', 'SALES', 'MARKETING', 'ADMINISTRATION', 'HR', 'FINANCE', 'CUSTOMER_SERVICE', 'OTHER', name='jobcategoryenum'),
               nullable=False)
    op.alter_column('candidates', 'candidate_type',
               existing_type=postgresql.ENUM('BASIC', 'EXTENDED', 'PREMIUM', name='candidatetype'),
               type_=sa.Enum('BASIC', 'EXTENDED', 'PREMIUM', name='candidatetypeenum'),
               existing_nullable=False)
    op.add_column('companies', sa.Column('domain', sa.String(), nullable=False))
    op.add_column('companies', sa.Column('logo_url', sa.String(), nullable=True))
    op.add_column('companies', sa.Column('settings', sa.JSON(), nullable=False))
    op.alter_column('companies', 'status',
               existing_type=postgresql.ENUM('PENDING', 'APPROVED', 'REJECTED', 'ACTIVE', 'INACTIVE', name='companystatus'),
               type_=sa.Enum('ACTIVE', 'SUSPENDED', 'DELETED', name='companystatus', native_enum=False, length=20),
               existing_nullable=False)
    op.create_index(op.f('ix_companies_domain'), 'companies', ['domain'], unique=True)
    op.drop_column('companies', 'external_data')
    op.drop_column('companies', 'location')
    op.drop_column('companies', 'culture')
    op.drop_column('companies', 'website')
    op.drop_column('companies', 'size')
    op.drop_column('companies', 'user_id')
    op.drop_column('companies', 'sector')
    op.alter_column('interview_template_questions', 'name',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('interview_template_questions', 'description',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('interview_template_questions', 'status',
               existing_type=postgresql.ENUM('ENABLED', 'DRAFT', 'DISABLED', name='interviewtemplatequestionstatus'),
               type_=sa.Enum('ENABLED', 'DRAFT', 'DISABLED', name='interviewtemplatequestionstatusenum'),
               nullable=False)
    op.alter_column('interview_template_questions', 'data_type',
               existing_type=postgresql.ENUM('INT', 'DATE', 'SHORT_STRING', 'LARGE_STRING', name='interviewtemplatequestiondatatype'),
               type_=sa.Enum('INT', 'DATE', 'SHORT_STRING', 'LARGE_STRING', name='interviewtemplatequestiondatatypeenum'),
               nullable=False)
    op.alter_column('interview_template_questions', 'scope',
               existing_type=postgresql.ENUM('GLOBAL', 'ITEM', name='interviewtemplatequestionscope'),
               type_=sa.Enum('GLOBAL', 'ITEM', name='interviewtemplatequestionscopeenum'),
               nullable=False)
    op.alter_column('interview_template_questions', 'code',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.create_index(op.f('ix_interview_template_questions_status'), 'interview_template_questions', ['status'], unique=False)
    op.alter_column('interview_template_sections', 'intro',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('interview_template_sections', 'prompt',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('interview_template_sections', 'goal',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('interview_templates', 'intro',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('interview_templates', 'prompt',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('interview_templates', 'goal',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('interview_templates', 'type',
               existing_type=postgresql.ENUM('EXTENDED_PROFILE', 'POSITION_INTERVIEW', name='interviewtemplatetype'),
               type_=sa.Enum('EXTENDED_PROFILE', 'POSITION_INTERVIEW', name='interviewtemplatetypeenum'),
               existing_nullable=False)
    op.alter_column('interview_templates', 'status',
               existing_type=postgresql.ENUM('ENABLED', 'DRAFT', 'DISABLED', name='interviewtemplatestatus'),
               type_=sa.Enum('ENABLED', 'DRAFT', 'DISABLED', name='interviewtemplatestatusenum'),
               existing_nullable=False)
    op.alter_column('interview_templates', 'job_category',
               existing_type=postgresql.ENUM('TECHNOLOGY', 'OPERATIONS', 'SALES', 'MARKETING', 'ADMINISTRATION', 'HR', 'FINANCE', 'CUSTOMER_SERVICE', 'OTHER', name='jobcategory'),
               type_=sa.Enum('TECHNOLOGY', 'OPERATIONS', 'SALES', 'MARKETING', 'ADMINISTRATION', 'HR', 'FINANCE', 'CUSTOMER_SERVICE', 'OTHER', name='jobcategoryenum'),
               existing_nullable=True)
    op.drop_index(op.f('idx_parent_template'), table_name='interview_templates')
    op.drop_index(op.f('idx_section_type'), table_name='interview_templates')
    op.drop_index(op.f('idx_version_current'), table_name='interview_templates')
    op.drop_index(op.f('ix_interview_templates_is_current_version'), table_name='interview_templates')
    op.drop_index(op.f('ix_interview_templates_parent_template_id'), table_name='interview_templates')
    op.drop_index(op.f('ix_interview_templates_section'), table_name='interview_templates')
    op.drop_index(op.f('ix_interview_templates_version'), table_name='interview_templates')
    op.create_index('idx_type', 'interview_templates', ['type'], unique=False)
    op.drop_column('interview_templates', 'is_current_version')
    op.drop_column('interview_templates', 'section')
    op.drop_column('interview_templates', 'version')
    op.drop_column('interview_templates', 'parent_template_id')
    op.alter_column('job_positions', 'description',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('job_positions', 'work_location_type',
               existing_type=postgresql.ENUM('REMOTE', 'ON_SITE', 'HYBRID', name='worklocationtype'),
               type_=sa.Enum('REMOTE', 'ON_SITE', 'HYBRID', name='worklocationtypeenum'),
               existing_nullable=False)
    op.alter_column('job_positions', 'contract_type',
               existing_type=postgresql.ENUM('FULL_TIME', 'PART_TIME', 'CONTRACT', 'FREELANCE', 'INTERNSHIP', 'TEMPORARY', name='contracttype'),
               type_=sa.Enum('FULL_TIME', 'PART_TIME', 'CONTRACT', 'FREELANCE', 'INTERNSHIP', 'TEMPORARY', name='contracttypeenum'),
               existing_nullable=False)
    op.alter_column('job_positions', 'job_category',
               existing_type=postgresql.ENUM('TECHNOLOGY', 'OPERATIONS', 'SALES', 'MARKETING', 'ADMINISTRATION', 'HR', 'FINANCE', 'CUSTOMER_SERVICE', 'OTHER', name='jobcategory'),
               type_=sa.Enum('TECHNOLOGY', 'OPERATIONS', 'SALES', 'MARKETING', 'ADMINISTRATION', 'HR', 'FINANCE', 'CUSTOMER_SERVICE', 'OTHER', name='jobcategoryenum'),
               existing_nullable=False)
    op.alter_column('job_positions', 'position_level',
               existing_type=sa.VARCHAR(),
               type_=sa.Enum('INTERN', 'JUNIOR', 'MID', 'SENIOR', 'LEAD', 'EXECUTIVE', name='jobpositionlevelenum'),
               existing_nullable=True)
    op.alter_column('job_positions', 'number_of_openings',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('1'))
    op.alter_column('job_positions', 'travel_required',
               existing_type=sa.BOOLEAN(),
               type_=sa.Integer(),
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('job_positions', 'visa_sponsorship',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('job_positions', 'status',
               existing_type=postgresql.ENUM('DRAFT', 'PENDING', 'APPROVED', 'REJECTED', 'OPEN', 'CLOSED', 'PAUSED', name='jobpositionstatus'),
               type_=sa.Enum('PENDING', 'APPROVED', 'REJECTED', 'OPEN', 'CLOSED', 'PAUSED', name='jobpositionstatusenum'),
               existing_nullable=False)
    op.drop_constraint(op.f('job_positions_company_id_fkey'), 'job_positions', type_='foreignkey')
    op.alter_column('resumes', 'resume_type',
               existing_type=postgresql.ENUM('GENERAL', 'POSITION', 'ROLE', name='resumetype'),
               type_=sa.String(),
               existing_nullable=False)
    op.drop_index(op.f('idx_resume_candidate_type'), table_name='resumes')
    op.drop_index(op.f('idx_resume_created_at'), table_name='resumes')
    op.drop_index(op.f('ix_resumes_id'), table_name='resumes')
    op.alter_column('user_assets', 'asset_type',
               existing_type=sa.VARCHAR(),
               type_=sa.Enum('PDF_RESUME', 'LINKEDIN_PROFILE', 'PORTFOLIO', 'COVER_LETTER', name='assettypeenum'),
               existing_nullable=False)
    op.alter_column('user_assets', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('user_assets', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('user_assets', 'processing_status',
               existing_type=sa.VARCHAR(),
               type_=sa.Enum('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', name='processingstatusenum'),
               nullable=False)
    op.alter_column('user_assets', 'file_metadata',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=False)
    op.create_index(op.f('ix_user_assets_asset_type'), 'user_assets', ['asset_type'], unique=False)
    op.create_index(op.f('ix_user_assets_id'), 'user_assets', ['id'], unique=False)
    op.create_index(op.f('ix_user_assets_processing_status'), 'user_assets', ['processing_status'], unique=False)
    op.create_index(op.f('ix_user_assets_user_id'), 'user_assets', ['user_id'], unique=False)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('users', 'hashed_password',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('users', 'hashed_password',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_index(op.f('ix_user_assets_user_id'), table_name='user_assets')
    op.drop_index(op.f('ix_user_assets_processing_status'), table_name='user_assets')
    op.drop_index(op.f('ix_user_assets_id'), table_name='user_assets')
    op.drop_index(op.f('ix_user_assets_asset_type'), table_name='user_assets')
    op.alter_column('user_assets', 'file_metadata',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=True)
    op.alter_column('user_assets', 'processing_status',
               existing_type=sa.Enum('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', name='processingstatusenum'),
               type_=sa.VARCHAR(),
               nullable=True)
    op.alter_column('user_assets', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('user_assets', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('user_assets', 'asset_type',
               existing_type=sa.Enum('PDF_RESUME', 'LINKEDIN_PROFILE', 'PORTFOLIO', 'COVER_LETTER', name='assettypeenum'),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.create_index(op.f('ix_resumes_id'), 'resumes', ['id'], unique=False)
    op.create_index(op.f('idx_resume_created_at'), 'resumes', ['created_at'], unique=False)
    op.create_index(op.f('idx_resume_candidate_type'), 'resumes', ['candidate_id', 'resume_type'], unique=False)
    op.alter_column('resumes', 'resume_type',
               existing_type=sa.String(),
               type_=postgresql.ENUM('GENERAL', 'POSITION', 'ROLE', name='resumetype'),
               existing_nullable=False)
    op.create_foreign_key(op.f('job_positions_company_id_fkey'), 'job_positions', 'companies', ['company_id'], ['id'])
    op.alter_column('job_positions', 'status',
               existing_type=sa.Enum('PENDING', 'APPROVED', 'REJECTED', 'OPEN', 'CLOSED', 'PAUSED', name='jobpositionstatusenum'),
               type_=postgresql.ENUM('DRAFT', 'PENDING', 'APPROVED', 'REJECTED', 'OPEN', 'CLOSED', 'PAUSED', name='jobpositionstatus'),
               existing_nullable=False)
    op.alter_column('job_positions', 'visa_sponsorship',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('job_positions', 'travel_required',
               existing_type=sa.Integer(),
               type_=sa.BOOLEAN(),
               existing_nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('job_positions', 'number_of_openings',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('1'))
    op.alter_column('job_positions', 'position_level',
               existing_type=sa.Enum('INTERN', 'JUNIOR', 'MID', 'SENIOR', 'LEAD', 'EXECUTIVE', name='jobpositionlevelenum'),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.alter_column('job_positions', 'job_category',
               existing_type=sa.Enum('TECHNOLOGY', 'OPERATIONS', 'SALES', 'MARKETING', 'ADMINISTRATION', 'HR', 'FINANCE', 'CUSTOMER_SERVICE', 'OTHER', name='jobcategoryenum'),
               type_=postgresql.ENUM('TECHNOLOGY', 'OPERATIONS', 'SALES', 'MARKETING', 'ADMINISTRATION', 'HR', 'FINANCE', 'CUSTOMER_SERVICE', 'OTHER', name='jobcategory'),
               existing_nullable=False)
    op.alter_column('job_positions', 'contract_type',
               existing_type=sa.Enum('FULL_TIME', 'PART_TIME', 'CONTRACT', 'FREELANCE', 'INTERNSHIP', 'TEMPORARY', name='contracttypeenum'),
               type_=postgresql.ENUM('FULL_TIME', 'PART_TIME', 'CONTRACT', 'FREELANCE', 'INTERNSHIP', 'TEMPORARY', name='contracttype'),
               existing_nullable=False)
    op.alter_column('job_positions', 'work_location_type',
               existing_type=sa.Enum('REMOTE', 'ON_SITE', 'HYBRID', name='worklocationtypeenum'),
               type_=postgresql.ENUM('REMOTE', 'ON_SITE', 'HYBRID', name='worklocationtype'),
               existing_nullable=False)
    op.alter_column('job_positions', 'description',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.add_column('interview_templates', sa.Column('parent_template_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('interview_templates', sa.Column('version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False))
    op.add_column('interview_templates', sa.Column('section', postgresql.ENUM('EXPERIENCE', 'EDUCATION', 'PROJECT', 'SOFT_SKILL', 'GENERAL', name='interviewtemplatesection'), autoincrement=False, nullable=True))
    op.add_column('interview_templates', sa.Column('is_current_version', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False))
    op.drop_index('idx_type', table_name='interview_templates')
    op.create_index(op.f('ix_interview_templates_version'), 'interview_templates', ['version'], unique=False)
    op.create_index(op.f('ix_interview_templates_section'), 'interview_templates', ['section'], unique=False)
    op.create_index(op.f('ix_interview_templates_parent_template_id'), 'interview_templates', ['parent_template_id'], unique=False)
    op.create_index(op.f('ix_interview_templates_is_current_version'), 'interview_templates', ['is_current_version'], unique=False)
    op.create_index(op.f('idx_version_current'), 'interview_templates', ['id', 'version', 'is_current_version'], unique=False)
    op.create_index(op.f('idx_section_type'), 'interview_templates', ['section', 'type'], unique=False)
    op.create_index(op.f('idx_parent_template'), 'interview_templates', ['parent_template_id'], unique=False)
    op.alter_column('interview_templates', 'job_category',
               existing_type=sa.Enum('TECHNOLOGY', 'OPERATIONS', 'SALES', 'MARKETING', 'ADMINISTRATION', 'HR', 'FINANCE', 'CUSTOMER_SERVICE', 'OTHER', name='jobcategoryenum'),
               type_=postgresql.ENUM('TECHNOLOGY', 'OPERATIONS', 'SALES', 'MARKETING', 'ADMINISTRATION', 'HR', 'FINANCE', 'CUSTOMER_SERVICE', 'OTHER', name='jobcategory'),
               existing_nullable=True)
    op.alter_column('interview_templates', 'status',
               existing_type=sa.Enum('ENABLED', 'DRAFT', 'DISABLED', name='interviewtemplatestatusenum'),
               type_=postgresql.ENUM('ENABLED', 'DRAFT', 'DISABLED', name='interviewtemplatestatus'),
               existing_nullable=False)
    op.alter_column('interview_templates', 'type',
               existing_type=sa.Enum('EXTENDED_PROFILE', 'POSITION_INTERVIEW', name='interviewtemplatetypeenum'),
               type_=postgresql.ENUM('EXTENDED_PROFILE', 'POSITION_INTERVIEW', name='interviewtemplatetype'),
               existing_nullable=False)
    op.alter_column('interview_templates', 'goal',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('interview_templates', 'prompt',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('interview_templates', 'intro',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('interview_template_sections', 'goal',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('interview_template_sections', 'prompt',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('interview_template_sections', 'intro',
               existing_type=sa.TEXT(),
               nullable=True)
    op.drop_index(op.f('ix_interview_template_questions_status'), table_name='interview_template_questions')
    op.alter_column('interview_template_questions', 'code',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('interview_template_questions', 'scope',
               existing_type=sa.Enum('GLOBAL', 'ITEM', name='interviewtemplatequestionscopeenum'),
               type_=postgresql.ENUM('GLOBAL', 'ITEM', name='interviewtemplatequestionscope'),
               nullable=True)
    op.alter_column('interview_template_questions', 'data_type',
               existing_type=sa.Enum('INT', 'DATE', 'SHORT_STRING', 'LARGE_STRING', name='interviewtemplatequestiondatatypeenum'),
               type_=postgresql.ENUM('INT', 'DATE', 'SHORT_STRING', 'LARGE_STRING', name='interviewtemplatequestiondatatype'),
               nullable=True)
    op.alter_column('interview_template_questions', 'status',
               existing_type=sa.Enum('ENABLED', 'DRAFT', 'DISABLED', name='interviewtemplatequestionstatusenum'),
               type_=postgresql.ENUM('ENABLED', 'DRAFT', 'DISABLED', name='interviewtemplatequestionstatus'),
               nullable=True)
    op.alter_column('interview_template_questions', 'description',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('interview_template_questions', 'name',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.add_column('companies', sa.Column('sector', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('companies', sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('companies', sa.Column('size', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('companies', sa.Column('website', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('companies', sa.Column('culture', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('companies', sa.Column('location', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('companies', sa.Column('external_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_companies_domain'), table_name='companies')
    op.alter_column('companies', 'status',
               existing_type=sa.Enum('ACTIVE', 'SUSPENDED', 'DELETED', name='companystatus', native_enum=False, length=20),
               type_=postgresql.ENUM('PENDING', 'APPROVED', 'REJECTED', 'ACTIVE', 'INACTIVE', name='companystatus'),
               existing_nullable=False)
    op.drop_column('companies', 'settings')
    op.drop_column('companies', 'logo_url')
    op.drop_column('companies', 'domain')
    op.alter_column('candidates', 'candidate_type',
               existing_type=sa.Enum('BASIC', 'EXTENDED', 'PREMIUM', name='candidatetypeenum'),
               type_=postgresql.ENUM('BASIC', 'EXTENDED', 'PREMIUM', name='candidatetype'),
               existing_nullable=False)
    op.alter_column('candidates', 'job_category',
               existing_type=sa.Enum('TECHNOLOGY', 'OPERATIONS', 'SALES', 'MARKETING', 'ADMINISTRATION', 'HR', 'FINANCE', 'CUSTOMER_SERVICE', 'OTHER', name='jobcategoryenum'),
               type_=sa.VARCHAR(),
               nullable=True)
    op.alter_column('candidates', 'status',
               existing_type=sa.Enum('DRAFT', 'COMPLETE', 'DELETED', name='candidatestatusenum'),
               type_=sa.VARCHAR(),
               nullable=True)
    op.alter_column('candidates', 'phone',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('candidates', 'country',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('candidates', 'city',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('candidates', 'date_of_birth',
               existing_type=sa.DATE(),
               nullable=True)
    op.alter_column('candidates', 'name',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('candidate_projects', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('candidate_projects', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('candidate_projects', 'start_date',
               existing_type=sa.DATE(),
               nullable=True)
    op.alter_column('candidate_projects', 'description',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('candidate_projects', 'name',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('candidate_projects', 'candidate_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('candidate_experiences', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('candidate_experiences', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('candidate_experiences', 'start_date',
               existing_type=sa.DATE(),
               nullable=True)
    op.alter_column('candidate_experiences', 'description',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('candidate_experiences', 'company',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('candidate_experiences', 'job_title',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('candidate_experiences', 'candidate_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('candidate_educations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('candidate_educations', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('candidate_educations', 'start_date',
               existing_type=sa.DATE(),
               nullable=True)
    op.alter_column('candidate_educations', 'description',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('candidate_educations', 'institution',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('candidate_educations', 'degree',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('candidate_educations', 'candidate_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.create_table('candidate_job_categories',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('candidate_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('job_category', postgresql.ENUM('TECHNOLOGY', 'OPERATIONS', 'SALES', 'MARKETING', 'ADMINISTRATION', 'HR', 'FINANCE', 'CUSTOMER_SERVICE', 'OTHER', name='jobcategory'), autoincrement=False, nullable=True),
    sa.Column('is_primary', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('candidate_job_categories_pkey'))
    )
    op.create_index(op.f('ix_candidate_job_categories_id'), 'candidate_job_categories', ['id'], unique=False)
    op.create_table('async_jobs',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('job_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('entity_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('progress', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('results', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('job_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('timeout_seconds', sa.INTEGER(), server_default=sa.text('30'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('async_jobs_pkey'))
    )
    op.create_index(op.f('idx_async_jobs_type_entity'), 'async_jobs', ['job_type', 'entity_type', 'entity_id'], unique=False)
    op.create_index(op.f('idx_async_jobs_status'), 'async_jobs', ['status'], unique=False)
    op.create_index(op.f('idx_async_jobs_created_at'), 'async_jobs', ['created_at'], unique=False)
    op.create_table('staff',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('roles', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('active', 'inactive', name='staffstatusenum'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('staff_pkey')),
    sa.UniqueConstraint('user_id', name=op.f('staff_user_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('interviews',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('candidate_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'IN_PROGRESS', 'PAUSED', 'DRAFT', 'COMPLETED', 'DISCARDED', name='interviewstatus'), autoincrement=False, nullable=False),
    sa.Column('interview_template_type', postgresql.ENUM('EXTENDED_PROFILE', 'POSITION_INTERVIEW', name='interviewtemplatetype'), autoincrement=False, nullable=False),
    sa.Column('progress_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ai_context', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('interview_type', postgresql.ENUM('RESUME_ENHANCEMENT', 'JOB_APPLICATION', 'SCREENING', name='interviewtype'), autoincrement=False, nullable=False),
    sa.Column('membership_level', postgresql.ENUM('BASIC', 'PREMIUM', 'ELITE', name='membershiplevel'), autoincrement=False, nullable=False),
    sa.Column('application_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['application_id'], ['candidate_applications.id'], name='fk_interviews_application_id_candidate_applications'),
    sa.ForeignKeyConstraint(['candidate_id'], ['candidates.id'], name='interviews_candidate_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='interviews_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_interviews_status'), 'interviews', ['status'], unique=False)
    op.create_index(op.f('ix_interviews_membership_level'), 'interviews', ['membership_level'], unique=False)
    op.create_index(op.f('ix_interviews_interview_type'), 'interviews', ['interview_type'], unique=False)
    op.create_index(op.f('ix_interviews_id'), 'interviews', ['id'], unique=False)
    op.create_index(op.f('ix_interviews_created_at'), 'interviews', ['created_at'], unique=False)
    op.create_index(op.f('ix_interviews_candidate_id'), 'interviews', ['candidate_id'], unique=False)
    op.create_index(op.f('ix_interviews_application_id'), 'interviews', ['application_id'], unique=False)
    op.create_index(op.f('idx_interview_type_membership'), 'interviews', ['interview_type', 'membership_level'], unique=False)
    op.create_index(op.f('idx_created_status'), 'interviews', ['created_at', 'status'], unique=False)
    op.create_index(op.f('idx_candidate_status'), 'interviews', ['candidate_id', 'status'], unique=False)
    op.create_table('resume_versions',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('resume_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('version_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('content_snapshot', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_by_action', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['resume_id'], ['resumes.id'], name=op.f('resume_versions_resume_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('resume_versions_pkey'))
    )
    op.create_index(op.f('ix_resume_versions_resume_id'), 'resume_versions', ['resume_id'], unique=False)
    op.create_index(op.f('ix_resume_versions_id'), 'resume_versions', ['id'], unique=False)
    op.create_index(op.f('idx_resume_version_resume_id'), 'resume_versions', ['resume_id'], unique=False)
    op.create_index(op.f('idx_resume_version_number'), 'resume_versions', ['resume_id', 'version_number'], unique=False)
    op.create_index(op.f('idx_resume_version_created_at'), 'resume_versions', ['created_at'], unique=False)
    op.create_table('interview_answers',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('interview_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('interview_question_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('question_text', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('answer_text', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('answered_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('comments', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('interview_answers_pkey'))
    )
    op.create_index(op.f('ix_interview_answers_id'), 'interview_answers', ['id'], unique=False)
    op.create_table('interview_questions',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('template_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('question_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('category', postgresql.ENUM('TECHNICAL', 'BEHAVIORAL', 'SITUATIONAL', 'EXPERIENCE', 'EDUCATION', 'PROJECTS', 'SOFT_SKILLS', 'GENERAL', name='questioncategory'), autoincrement=False, nullable=False),
    sa.Column('difficulty', postgresql.ENUM('EASY', 'MEDIUM', 'HARD', 'EXPERT', name='questiondifficulty'), autoincrement=False, nullable=False),
    sa.Column('order_position', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_required', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_follow_up', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('parent_question_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('expected_answer_keywords', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('scoring_criteria', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ai_generation_context', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('estimated_time_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_adaptive', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('context_dependencies', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['parent_question_id'], ['interview_questions.id'], name='interview_questions_parent_question_id_fkey'),
    sa.ForeignKeyConstraint(['template_id'], ['interview_templates.id'], name='interview_questions_template_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='interview_questions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_interview_questions_template_id'), 'interview_questions', ['template_id'], unique=False)
    op.create_index(op.f('ix_interview_questions_parent_question_id'), 'interview_questions', ['parent_question_id'], unique=False)
    op.create_index(op.f('ix_interview_questions_order_position'), 'interview_questions', ['order_position'], unique=False)
    op.create_index(op.f('ix_interview_questions_is_required'), 'interview_questions', ['is_required'], unique=False)
    op.create_index(op.f('ix_interview_questions_is_follow_up'), 'interview_questions', ['is_follow_up'], unique=False)
    op.create_index(op.f('ix_interview_questions_is_adaptive'), 'interview_questions', ['is_adaptive'], unique=False)
    op.create_index(op.f('ix_interview_questions_id'), 'interview_questions', ['id'], unique=False)
    op.create_index(op.f('ix_interview_questions_difficulty'), 'interview_questions', ['difficulty'], unique=False)
    op.create_index(op.f('ix_interview_questions_category'), 'interview_questions', ['category'], unique=False)
    op.create_index(op.f('idx_template_order'), 'interview_questions', ['template_id', 'order_position'], unique=False)
    op.create_index(op.f('idx_template_category'), 'interview_questions', ['template_id', 'category'], unique=False)
    op.create_index(op.f('idx_required_follow_up'), 'interview_questions', ['is_required', 'is_follow_up'], unique=False)
    op.create_index(op.f('idx_category_difficulty'), 'interview_questions', ['category', 'difficulty'], unique=False)
    op.create_index(op.f('idx_adaptive_parent'), 'interview_questions', ['is_adaptive', 'parent_question_id'], unique=False)
    op.create_table('profile_sections',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('section_type', postgresql.ENUM('PROFILE', 'PROJECTS', 'EXPERIENCE', 'EDUCATION', 'INTERVIEW', name='sectiontype'), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'COMPLETED', 'SKIPPED', name='sectionstatus'), autoincrement=False, nullable=False),
    sa.Column('candidate_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('ai_generated_content', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('profile_sections_pkey'))
    )
    op.create_index(op.f('ix_profile_sections_id'), 'profile_sections', ['id'], unique=False)
    op.create_table('usage_tracking',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('action_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('action_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('usage_tracking_pkey'))
    )
    op.create_index(op.f('ix_usage_tracking_id'), 'usage_tracking', ['id'], unique=False)
    op.create_table('job_applications',
    sa.Column('id', sa.VARCHAR(length=26), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=26), autoincrement=False, nullable=False),
    sa.Column('candidate_id', sa.VARCHAR(length=26), autoincrement=False, nullable=False),
    sa.Column('job_title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('company_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('job_description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('job_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('job_analysis', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('tailored_resume', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('cover_letter', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('key_matches', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('suggestions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('applied_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('application_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['candidate_id'], ['candidates.id'], name=op.f('job_applications_candidate_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('job_applications_pkey'))
    )
    op.create_index(op.f('ix_job_applications_user_id'), 'job_applications', ['user_id'], unique=False)
    op.create_index(op.f('ix_job_applications_candidate_id'), 'job_applications', ['candidate_id'], unique=False)
    op.create_table('interview_responses',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('interview_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('question_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('question_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('response_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('response_quality_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ai_analysis', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('keywords_extracted', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('sentiment_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('response_time_seconds', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_complete', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('follow_up_needed', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['interview_id'], ['interviews.id'], name=op.f('interview_responses_interview_id_fkey')),
    sa.ForeignKeyConstraint(['question_id'], ['interview_questions.id'], name=op.f('interview_responses_question_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('interview_responses_pkey'))
    )
    op.create_index(op.f('ix_interview_responses_question_id'), 'interview_responses', ['question_id'], unique=False)
    op.create_index(op.f('ix_interview_responses_is_complete'), 'interview_responses', ['is_complete'], unique=False)
    op.create_index(op.f('ix_interview_responses_interview_id'), 'interview_responses', ['interview_id'], unique=False)
    op.create_index(op.f('ix_interview_responses_id'), 'interview_responses', ['id'], unique=False)
    op.create_index(op.f('ix_interview_responses_follow_up_needed'), 'interview_responses', ['follow_up_needed'], unique=False)
    op.create_index(op.f('idx_quality_complete'), 'interview_responses', ['response_quality_score', 'is_complete'], unique=False)
    op.create_index(op.f('idx_interview_question'), 'interview_responses', ['interview_id', 'question_id'], unique=False)
    op.create_index(op.f('idx_follow_up_sentiment'), 'interview_responses', ['follow_up_needed', 'sentiment_score'], unique=False)
    op.create_index(op.f('idx_created_interview'), 'interview_responses', ['created_at', 'interview_id'], unique=False)
    op.create_table('interview_history',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('interview_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('version_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('change_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('change_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('interview_snapshot', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('progress_snapshot', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ai_context_snapshot', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('changed_by', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('change_reason', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['interview_id'], ['interviews.id'], name=op.f('interview_history_interview_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('interview_history_pkey'))
    )
    op.create_index(op.f('ix_interview_history_version_number'), 'interview_history', ['version_number'], unique=False)
    op.create_index(op.f('ix_interview_history_interview_id'), 'interview_history', ['interview_id'], unique=False)
    op.create_index(op.f('ix_interview_history_id'), 'interview_history', ['id'], unique=False)
    op.create_index(op.f('ix_interview_history_created_at'), 'interview_history', ['created_at'], unique=False)
    op.create_index(op.f('ix_interview_history_change_type'), 'interview_history', ['change_type'], unique=False)
    op.create_index(op.f('idx_interview_version'), 'interview_history', ['interview_id', 'version_number'], unique=False)
    op.create_index(op.f('idx_interview_created'), 'interview_history', ['interview_id', 'created_at'], unique=False)
    op.create_index(op.f('idx_change_type_created'), 'interview_history', ['change_type', 'created_at'], unique=False)
    op.drop_index(op.f('ix_company_candidates_workflow_id'), table_name='company_candidates')
    op.drop_index(op.f('ix_company_candidates_status'), table_name='company_candidates')
    op.drop_index(op.f('ix_company_candidates_ownership_status'), table_name='company_candidates')
    op.drop_index(op.f('ix_company_candidates_id'), table_name='company_candidates')
    op.drop_index(op.f('ix_company_candidates_current_stage_id'), table_name='company_candidates')
    op.drop_index(op.f('ix_company_candidates_created_by_user_id'), table_name='company_candidates')
    op.drop_index(op.f('ix_company_candidates_company_id'), table_name='company_candidates')
    op.drop_index(op.f('ix_company_candidates_candidate_id'), table_name='company_candidates')
    op.drop_table('company_candidates')
    op.drop_index(op.f('ix_company_users_user_id'), table_name='company_users')
    op.drop_index(op.f('ix_company_users_id'), table_name='company_users')
    op.drop_index(op.f('ix_company_users_company_id'), table_name='company_users')
    op.drop_table('company_users')
    # ### end Alembic commands ###
