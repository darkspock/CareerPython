import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { api } from '../lib/api';
import InterviewProgressTracker from '../components/interview/InterviewProgressTracker';
import InterviewProgressChart from '../components/interview/InterviewProgressChart';
import { Interview, InterviewProgress, InterviewStatus } from '../types/interview';
import LoadingSpinner from '../components/common/LoadingSpinner';
import ErrorAlert from '../components/common/ErrorAlert';

const InterviewConductPage: React.FC = () => {
  const { interviewId } = useParams<{ interviewId: string }>();
  const [interview, setInterview] = useState<Interview | null>(null);
  const [progress, setProgress] = useState<InterviewProgress | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [view, setView] = useState<'conduct' | 'progress' | 'analytics'>('conduct');
  const [currentAnswer, setCurrentAnswer] = useState('');
  const [submittingAnswer, setSubmittingAnswer] = useState(false);

  useEffect(() => {
    if (interviewId) {
      loadInterview();
    }
  }, [interviewId]);

  const loadInterview = async () => {
    if (!interviewId) return;

    try {
      setLoading(true);
      setError(null);

      const interviewData = await api.getInterview(interviewId);
      setInterview(interviewData);

      // If interview isn't started, try to start it
      if (interviewData.status === InterviewStatus.SCHEDULED) {
        // This would typically redirect to start the interview or show start options
      }
    } catch (err: any) {
      setError(err.message || 'Failed to load interview');
    } finally {
      setLoading(false);
    }
  };

  const handleProgressUpdate = (newProgress: InterviewProgress) => {
    setProgress(newProgress);
  };

  const handleSubmitAnswer = async () => {
    if (!interviewId || !progress?.current_question || !currentAnswer.trim()) {
      return;
    }

    try {
      setSubmittingAnswer(true);
      await api.processInterviewAnswer(interviewId, {
        question_id: progress.current_question.question_id,
        answer_text: currentAnswer.trim()
      });

      setCurrentAnswer('');
      // Progress will be updated via the real-time tracker
    } catch (err: any) {
      alert(`Failed to submit answer: ${err.message}`);
    } finally {
      setSubmittingAnswer(false);
    }
  };

  const handlePauseInterview = async () => {
    if (!interviewId) return;

    try {
      await api.pauseInterview(interviewId, 'User requested pause');
      // Progress will be updated via the real-time tracker
    } catch (err: any) {
      alert(`Failed to pause interview: ${err.message}`);
    }
  };

  const handleResumeInterview = async () => {
    if (!interviewId) return;

    try {
      await api.resumeInterview(interviewId);
      // Progress will be updated via the real-time tracker
    } catch (err: any) {
      alert(`Failed to resume interview: ${err.message}`);
    }
  };

  const getStatusColor = (status: InterviewStatus) => {
    const colors = {
      [InterviewStatus.SCHEDULED]: 'text-blue-600 bg-blue-100',
      [InterviewStatus.IN_PROGRESS]: 'text-green-600 bg-green-100',
      [InterviewStatus.PAUSED]: 'text-yellow-600 bg-yellow-100',
      [InterviewStatus.COMPLETED]: 'text-purple-600 bg-purple-100',
      [InterviewStatus.CANCELLED]: 'text-red-600 bg-red-100',
      [InterviewStatus.FAILED]: 'text-red-600 bg-red-100',
    };
    return colors[status] || 'text-gray-600 bg-gray-100';
  };

  if (loading) {
    return <LoadingSpinner />;
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <ErrorAlert message={error} onRetry={loadInterview} />
      </div>
    );
  }

  if (!interview || !interviewId) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Interview Not Found</h2>
          <p className="text-gray-600 mb-4">The requested interview could not be found.</p>
          <button
            onClick={() => window.location.href = '/interviews'}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            Back to Interviews
          </button>
        </div>
      </div>
    );
  }

  const isActive = interview.status === InterviewStatus.IN_PROGRESS;
  const isPaused = interview.status === InterviewStatus.PAUSED;
  const isCompleted = interview.status === InterviewStatus.COMPLETED;
  const canConductInterview = isActive || isPaused;

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-6">
          <div className="flex justify-between items-start">
            <div>
              <div className="flex items-center gap-3 mb-2">
                <h1 className="text-2xl font-bold text-gray-900">
                  {interview.interview_type.replace('_', ' ')} Interview
                </h1>
                <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(interview.status)}`}>
                  {interview.status.replace('_', ' ')}
                </span>
              </div>
              <p className="text-gray-600">
                Interview ID: {interview.id}
              </p>
            </div>

            <div className="flex items-center gap-3">
              {/* View Toggle */}
              <div className="flex bg-gray-100 rounded-lg p-1">
                <button
                  onClick={() => setView('conduct')}
                  className={`px-3 py-1 text-sm font-medium rounded-md transition-colors ${
                    view === 'conduct'
                      ? 'bg-white text-gray-900 shadow-sm'
                      : 'text-gray-600 hover:text-gray-900'
                  }`}
                >
                  Interview
                </button>
                <button
                  onClick={() => setView('progress')}
                  className={`px-3 py-1 text-sm font-medium rounded-md transition-colors ${
                    view === 'progress'
                      ? 'bg-white text-gray-900 shadow-sm'
                      : 'text-gray-600 hover:text-gray-900'
                  }`}
                >
                  Progress
                </button>
                <button
                  onClick={() => setView('analytics')}
                  className={`px-3 py-1 text-sm font-medium rounded-md transition-colors ${
                    view === 'analytics'
                      ? 'bg-white text-gray-900 shadow-sm'
                      : 'text-gray-600 hover:text-gray-900'
                  }`}
                >
                  Analytics
                </button>
              </div>

              {/* Action Buttons */}
              {isActive && (
                <button
                  onClick={handlePauseInterview}
                  className="px-4 py-2 border border-yellow-300 text-yellow-700 bg-yellow-50 rounded-lg hover:bg-yellow-100 transition-colors flex items-center gap-2"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  Pause
                </button>
              )}

              {isPaused && (
                <button
                  onClick={handleResumeInterview}
                  className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h8m-10-4h1m9-4V5a1 1 0 00-1-1H8a1 1 0 00-1 1v1m3 0V5a1 1 0 011-1h4a1 1 0 011 1v1" />
                  </svg>
                  Resume
                </button>
              )}

              <button
                onClick={() => window.location.href = '/interviews'}
                className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Back to List
              </button>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          {/* Main Content */}
          <div className="lg:col-span-3">
            {view === 'conduct' && (
              <div className="space-y-6">
                {/* Interview Conductor */}
                {canConductInterview ? (
                  <div className="bg-white border border-gray-200 rounded-lg p-6">
                    <div className="space-y-6">
                      {/* Current Question */}
                      {progress?.current_question ? (
                        <div>
                          <div className="flex items-center justify-between mb-4">
                            <h3 className="text-lg font-medium text-gray-900">Current Question</h3>
                            <div className="flex items-center gap-2 text-sm text-gray-600">
                              <span>Section: {progress.current_question.section.replace('_', ' ')}</span>
                              {progress.current_question.is_follow_up && (
                                <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                                  Follow-up
                                </span>
                              )}
                            </div>
                          </div>

                          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
                            <p className="text-blue-900 text-lg leading-relaxed">
                              {progress.current_question.question_text}
                            </p>
                            {progress.current_question.context && (
                              <p className="text-blue-700 text-sm mt-2 italic">
                                Context: {progress.current_question.context}
                              </p>
                            )}
                          </div>

                          {/* Answer Input */}
                          <div className="space-y-4">
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-2">
                                Your Answer
                              </label>
                              <textarea
                                rows={6}
                                value={currentAnswer}
                                onChange={(e) => setCurrentAnswer(e.target.value)}
                                placeholder="Type your answer here..."
                                className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                                disabled={isPaused}
                              />
                            </div>

                            <div className="flex justify-between items-center">
                              <div className="text-sm text-gray-600">
                                {currentAnswer.trim().split(/\s+/).length} words
                              </div>
                              <button
                                onClick={handleSubmitAnswer}
                                disabled={submittingAnswer || !currentAnswer.trim() || isPaused}
                                className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                              >
                                {submittingAnswer && (
                                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                                )}
                                Submit Answer
                              </button>
                            </div>
                          </div>
                        </div>
                      ) : (
                        <div className="text-center py-12">
                          <div className="w-16 h-16 mx-auto mb-4 text-gray-400">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                          </div>
                          <h3 className="text-lg font-medium text-gray-900 mb-2">No Current Question</h3>
                          <p className="text-gray-600">
                            {isPaused ? 'Interview is paused' : 'Waiting for next question...'}
                          </p>
                        </div>
                      )}
                    </div>
                  </div>
                ) : isCompleted ? (
                  <div className="bg-white border border-gray-200 rounded-lg p-6">
                    <div className="text-center py-12">
                      <div className="w-16 h-16 mx-auto mb-4 text-green-500">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                      </div>
                      <h3 className="text-lg font-medium text-gray-900 mb-2">Interview Completed</h3>
                      <p className="text-gray-600 mb-6">
                        Congratulations! You have completed this interview.
                      </p>
                      <div className="flex justify-center gap-3">
                        <button
                          onClick={() => setView('analytics')}
                          className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700"
                        >
                          View Results
                        </button>
                        <button
                          onClick={() => window.location.href = `/interviews/${interviewId}/analysis`}
                          className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
                        >
                          Detailed Analysis
                        </button>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="bg-white border border-gray-200 rounded-lg p-6">
                    <div className="text-center py-12">
                      <div className="w-16 h-16 mx-auto mb-4 text-gray-400">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                      </div>
                      <h3 className="text-lg font-medium text-gray-900 mb-2">Interview Not Started</h3>
                      <p className="text-gray-600 mb-6">
                        This interview is scheduled but hasn't been started yet.
                      </p>
                      <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                        Start Interview
                      </button>
                    </div>
                  </div>
                )}
              </div>
            )}

            {view === 'progress' && (
              <InterviewProgressTracker
                interviewId={interviewId}
                showRealTimeUpdates={true}
                onProgressUpdate={handleProgressUpdate}
                compact={false}
              />
            )}

            {view === 'analytics' && (
              <InterviewProgressChart
                interviewId={interviewId}
                showDetailedMetrics={true}
              />
            )}
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Compact Progress */}
            <InterviewProgressTracker
              interviewId={interviewId}
              showRealTimeUpdates={true}
              onProgressUpdate={handleProgressUpdate}
              compact={true}
            />

            {/* Interview Info */}
            <div className="bg-white border border-gray-200 rounded-lg p-4">
              <h4 className="font-medium text-gray-900 mb-3">Interview Details</h4>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-600">Type:</span>
                  <span className="text-gray-900">{interview.interview_type.replace('_', ' ')}</span>
                </div>

                {interview.scheduled_at && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Scheduled:</span>
                    <span className="text-gray-900">
                      {new Date(interview.scheduled_at).toLocaleDateString('en-US', {
                        month: 'short',
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                      })}
                    </span>
                  </div>
                )}

                {interview.started_at && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Started:</span>
                    <span className="text-gray-900">
                      {new Date(interview.started_at).toLocaleDateString('en-US', {
                        month: 'short',
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                      })}
                    </span>
                  </div>
                )}

                {interview.template_id && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Template:</span>
                    <span className="text-gray-900 text-xs font-mono">{interview.template_id.slice(0, 8)}...</span>
                  </div>
                )}
              </div>

              {interview.notes && (
                <div className="mt-4 pt-3 border-t border-gray-100">
                  <span className="text-gray-600 text-sm">Notes:</span>
                  <p className="text-gray-900 text-sm mt-1">{interview.notes}</p>
                </div>
              )}
            </div>

            {/* Quick Actions */}
            <div className="bg-white border border-gray-200 rounded-lg p-4">
              <h4 className="font-medium text-gray-900 mb-3">Quick Actions</h4>
              <div className="space-y-2">
                <button
                  onClick={() => setView('progress')}
                  className="w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-lg flex items-center gap-2"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v4a2 2 0 01-2 2h-2a2 2 0 00-2-2z" />
                  </svg>
                  View Progress
                </button>

                <button
                  onClick={() => setView('analytics')}
                  className="w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-lg flex items-center gap-2"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 8v8m-4-5v5m-4-2v2m-2 4h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  View Analytics
                </button>

                {isCompleted && (
                  <button
                    onClick={() => window.location.href = `/interviews/${interviewId}/analysis`}
                    className="w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-lg flex items-center gap-2"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    Detailed Analysis
                  </button>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default InterviewConductPage;