import React, { useState, useEffect } from 'react';
import { api } from '../lib/api';
import InterviewScheduler from '../components/interview/InterviewScheduler';
import InterviewCalendar from '../components/interview/InterviewCalendar';
import { Interview, InterviewStatus } from '../types/interview';

const InterviewSchedulingPage: React.FC = () => {
  const [view, setView] = useState<'calendar' | 'schedule'>('calendar');
  const [selectedInterview, setSelectedInterview] = useState<Interview | null>(null);
  const [showScheduler, setShowScheduler] = useState(false);
  const [upcomingInterviews, setUpcomingInterviews] = useState<Interview[]>([]);
  const [loadingUpcoming, setLoadingUpcoming] = useState(true);

  useEffect(() => {
    loadUpcomingInterviews();
  }, []);

  const loadUpcomingInterviews = async () => {
    try {
      setLoadingUpcoming(true);
      const now = new Date();
      const oneWeekFromNow = new Date();
      oneWeekFromNow.setDate(oneWeekFromNow.getDate() + 7);

      const response = await api.getInterviews({
        status: InterviewStatus.SCHEDULED,
        scheduled_after: now.toISOString(),
        scheduled_before: oneWeekFromNow.toISOString(),
        sort_by: 'scheduled_at',
        sort_order: 'asc',
        page_size: 5
      });

      setUpcomingInterviews(response.interviews);
    } catch (error) {
      console.error('Failed to load upcoming interviews:', error);
    } finally {
      setLoadingUpcoming(false);
    }
  };

  const handleInterviewScheduled = (interview: Interview) => {
    setShowScheduler(false);
    setView('calendar');
    loadUpcomingInterviews();
    // Show success message
    alert('Interview scheduled successfully!');
  };

  const handleInterviewSelect = (interview: Interview) => {
    setSelectedInterview(interview);
  };

  const formatDateTime = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      weekday: 'short',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getStatusColor = (status: InterviewStatus) => {
    const colors = {
      [InterviewStatus.SCHEDULED]: 'text-blue-600 bg-blue-100',
      [InterviewStatus.IN_PROGRESS]: 'text-yellow-600 bg-yellow-100',
      [InterviewStatus.PAUSED]: 'text-orange-600 bg-orange-100',
      [InterviewStatus.COMPLETED]: 'text-green-600 bg-green-100',
      [InterviewStatus.CANCELLED]: 'text-red-600 bg-red-100',
      [InterviewStatus.FAILED]: 'text-red-600 bg-red-100',
    };
    return colors[status] || 'text-gray-600 bg-gray-100';
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Interview Scheduling</h1>
            <p className="mt-2 text-gray-600">
              Schedule new interviews and manage your calendar
            </p>
          </div>

          <div className="flex items-center gap-3">
            <div className="flex bg-gray-100 rounded-lg p-1">
              <button
                onClick={() => setView('calendar')}
                className={`px-3 py-1 text-sm font-medium rounded-md transition-colors ${
                  view === 'calendar'
                    ? 'bg-white text-gray-900 shadow-sm'
                    : 'text-gray-600 hover:text-gray-900'
                }`}
              >
                Calendar
              </button>
              <button
                onClick={() => setView('schedule')}
                className={`px-3 py-1 text-sm font-medium rounded-md transition-colors ${
                  view === 'schedule'
                    ? 'bg-white text-gray-900 shadow-sm'
                    : 'text-gray-600 hover:text-gray-900'
                }`}
              >
                Schedule
              </button>
            </div>

            <button
              onClick={() => setShowScheduler(true)}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
              </svg>
              Schedule Interview
            </button>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-3">
            {showScheduler ? (
              <div className="bg-white rounded-lg shadow-sm p-6">
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-xl font-semibold text-gray-900">Schedule New Interview</h2>
                  <button
                    onClick={() => setShowScheduler(false)}
                    className="text-gray-400 hover:text-gray-600"
                  >
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>

                <InterviewScheduler
                  onScheduled={handleInterviewScheduled}
                  onClose={() => setShowScheduler(false)}
                />
              </div>
            ) : view === 'calendar' ? (
              <InterviewCalendar
                onInterviewSelect={handleInterviewSelect}
                showOnlyScheduled={false}
              />
            ) : (
              <div className="bg-white rounded-lg shadow-sm p-6">
                <h2 className="text-xl font-semibold text-gray-900 mb-4">Schedule New Interview</h2>
                <InterviewScheduler
                  onScheduled={handleInterviewScheduled}
                />
              </div>
            )}
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Upcoming Interviews */}
            <div className="bg-white rounded-lg shadow-sm p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium text-gray-900">Upcoming Interviews</h3>
                <button
                  onClick={loadUpcomingInterviews}
                  className="text-sm text-blue-600 hover:text-blue-800"
                >
                  Refresh
                </button>
              </div>

              {loadingUpcoming ? (
                <div className="flex justify-center py-4">
                  <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
                </div>
              ) : upcomingInterviews.length > 0 ? (
                <div className="space-y-3">
                  {upcomingInterviews.map((interview) => (
                    <div
                      key={interview.id}
                      className="border border-gray-200 rounded-lg p-3 hover:bg-gray-50 cursor-pointer transition-colors"
                      onClick={() => handleInterviewSelect(interview)}
                    >
                      <div className="flex items-start justify-between mb-2">
                        <h4 className="font-medium text-gray-900 text-sm">
                          {interview.interview_type.replace('_', ' ')}
                        </h4>
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(interview.status)}`}>
                          {interview.status}
                        </span>
                      </div>

                      {interview.scheduled_at && (
                        <div className="text-sm text-gray-600 flex items-center gap-1">
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                          </svg>
                          {formatDateTime(interview.scheduled_at)}
                        </div>
                      )}

                      {interview.notes && (
                        <p className="text-xs text-gray-500 mt-2 truncate">
                          {interview.notes}
                        </p>
                      )}
                    </div>
                  ))}

                  <button
                    onClick={() => window.location.href = '/interviews'}
                    className="w-full text-center text-sm text-blue-600 hover:text-blue-800 py-2"
                  >
                    View all interviews â†’
                  </button>
                </div>
              ) : (
                <div className="text-center py-6">
                  <div className="w-12 h-12 mx-auto mb-4 text-gray-400">
                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                  </div>
                  <p className="text-gray-500 text-sm">No upcoming interviews</p>
                  <button
                    onClick={() => setShowScheduler(true)}
                    className="text-blue-600 hover:text-blue-800 text-sm mt-1"
                  >
                    Schedule your first interview
                  </button>
                </div>
              )}
            </div>

            {/* Quick Actions */}
            <div className="bg-white rounded-lg shadow-sm p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Quick Actions</h3>
              <div className="space-y-2">
                <button
                  onClick={() => window.location.href = '/interviews/templates'}
                  className="w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-lg flex items-center gap-2"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                  </svg>
                  Browse Templates
                </button>

                <button
                  onClick={() => window.location.href = '/interviews/analytics'}
                  className="w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-lg flex items-center gap-2"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v4a2 2 0 01-2 2h-2a2 2 0 00-2-2z" />
                  </svg>
                  View Analytics
                </button>

                <button
                  onClick={() => window.location.href = '/interviews'}
                  className="w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-lg flex items-center gap-2"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                  </svg>
                  All Interviews
                </button>
              </div>
            </div>

            {/* Selected Interview Details */}
            {selectedInterview && (
              <div className="bg-white rounded-lg shadow-sm p-6">
                <h3 className="text-lg font-medium text-gray-900 mb-4">Interview Details</h3>
                <div className="space-y-3 text-sm">
                  <div>
                    <span className="font-medium text-gray-700">Type:</span>
                    <span className="ml-2 text-gray-900">
                      {selectedInterview.interview_type.replace('_', ' ')}
                    </span>
                  </div>

                  <div>
                    <span className="font-medium text-gray-700">Status:</span>
                    <span className={`ml-2 px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(selectedInterview.status)}`}>
                      {selectedInterview.status}
                    </span>
                  </div>

                  {selectedInterview.scheduled_at && (
                    <div>
                      <span className="font-medium text-gray-700">Scheduled:</span>
                      <span className="ml-2 text-gray-900">
                        {formatDateTime(selectedInterview.scheduled_at)}
                      </span>
                    </div>
                  )}

                  {selectedInterview.notes && (
                    <div>
                      <span className="font-medium text-gray-700">Notes:</span>
                      <p className="mt-1 text-gray-900">{selectedInterview.notes}</p>
                    </div>
                  )}
                </div>

                <div className="mt-4 flex gap-2">
                  <button
                    onClick={() => window.location.href = `/interviews/${selectedInterview.id}`}
                    className="flex-1 px-3 py-2 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                  >
                    View Details
                  </button>
                  <button
                    onClick={() => setSelectedInterview(null)}
                    className="px-3 py-2 text-sm border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
                  >
                    Close
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default InterviewSchedulingPage;