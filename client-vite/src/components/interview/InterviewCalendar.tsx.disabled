import React, { useState, useEffect } from 'react';
import { api } from '../../lib/api';
import { Interview, InterviewStatus, InterviewType } from '../../types/interview';

interface InterviewCalendarProps {
  onInterviewSelect?: (interview: Interview) => void;
  showOnlyScheduled?: boolean;
}

interface CalendarDay {
  date: Date;
  interviews: Interview[];
  isCurrentMonth: boolean;
  isToday: boolean;
}

const InterviewCalendar: React.FC<InterviewCalendarProps> = ({
  onInterviewSelect,
  showOnlyScheduled = true
}) => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [interviews, setInterviews] = useState<Interview[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [viewMode, setViewMode] = useState<'month' | 'week' | 'day'>('month');

  useEffect(() => {
    loadInterviews();
  }, [currentDate, showOnlyScheduled]);

  const loadInterviews = async () => {
    try {
      setLoading(true);
      setError(null);

      // Get interviews for the current month
      const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
      const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);

      const filters: any = {
        scheduled_after: startOfMonth.toISOString(),
        scheduled_before: endOfMonth.toISOString(),
        page_size: 100 // Get all interviews for the month
      };

      if (showOnlyScheduled) {
        filters.status = InterviewStatus.SCHEDULED;
      }

      const response = await api.getInterviews(filters);
      setInterviews(response.interviews);
    } catch (err: any) {
      setError(err.message || 'Failed to load interviews');
    } finally {
      setLoading(false);
    }
  };

  const generateCalendarDays = (): CalendarDay[] => {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();

    const firstDayOfMonth = new Date(year, month, 1);
    const lastDayOfMonth = new Date(year, month + 1, 0);
    const firstDayOfCalendar = new Date(firstDayOfMonth);
    firstDayOfCalendar.setDate(firstDayOfCalendar.getDate() - firstDayOfCalendar.getDay());

    const days: CalendarDay[] = [];
    const today = new Date();

    for (let i = 0; i < 42; i++) { // 6 weeks * 7 days
      const date = new Date(firstDayOfCalendar);
      date.setDate(date.getDate() + i);

      const dayInterviews = interviews.filter(interview => {
        if (!interview.scheduled_at) return false;
        const interviewDate = new Date(interview.scheduled_at);
        return (
          interviewDate.getDate() === date.getDate() &&
          interviewDate.getMonth() === date.getMonth() &&
          interviewDate.getFullYear() === date.getFullYear()
        );
      });

      days.push({
        date,
        interviews: dayInterviews,
        isCurrentMonth: date.getMonth() === month,
        isToday: date.toDateString() === today.toDateString()
      });
    }

    return days;
  };

  const navigateMonth = (direction: 'prev' | 'next') => {
    const newDate = new Date(currentDate);
    newDate.setMonth(newDate.getMonth() + (direction === 'next' ? 1 : -1));
    setCurrentDate(newDate);
  };

  const goToToday = () => {
    setCurrentDate(new Date());
  };

  const getInterviewTypeColor = (type: InterviewType) => {
    const colors = {
      [InterviewType.TECHNICAL]: 'bg-purple-100 text-purple-800 border-purple-200',
      [InterviewType.BEHAVIORAL]: 'bg-blue-100 text-blue-800 border-blue-200',
      [InterviewType.SYSTEM_DESIGN]: 'bg-indigo-100 text-indigo-800 border-indigo-200',
      [InterviewType.CODING]: 'bg-green-100 text-green-800 border-green-200',
      [InterviewType.COMPREHENSIVE]: 'bg-gray-100 text-gray-800 border-gray-200',
      [InterviewType.QUICK]: 'bg-yellow-100 text-yellow-800 border-yellow-200',
    };
    return colors[type] || 'bg-gray-100 text-gray-800 border-gray-200';
  };

  const formatTime = (dateString: string) => {
    return new Date(dateString).toLocaleTimeString('en-US', {
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const monthNames = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
  ];

  const weekDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-lg p-4">
        <div className="flex">
          <svg className="w-5 h-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
          </svg>
          <div className="ml-3">
            <p className="text-sm text-red-800">{error}</p>
            <button
              onClick={loadInterviews}
              className="mt-2 text-sm text-red-600 hover:text-red-800 underline"
            >
              Try again
            </button>
          </div>
        </div>
      </div>
    );
  }

  const calendarDays = generateCalendarDays();

  return (
    <div className="bg-white border border-gray-200 rounded-lg">
      {/* Calendar Header */}
      <div className="p-4 border-b border-gray-200">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-4">
            <h2 className="text-xl font-semibold text-gray-900">
              {monthNames[currentDate.getMonth()]} {currentDate.getFullYear()}
            </h2>
            <div className="flex gap-1">
              <button
                onClick={() => navigateMonth('prev')}
                className="p-2 hover:bg-gray-100 rounded-lg"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
              </button>
              <button
                onClick={() => navigateMonth('next')}
                className="p-2 hover:bg-gray-100 rounded-lg"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                </svg>
              </button>
            </div>
          </div>

          <div className="flex items-center gap-3">
            <button
              onClick={goToToday}
              className="px-3 py-1 text-sm border border-gray-300 rounded-lg hover:bg-gray-50"
            >
              Today
            </button>
            <button
              onClick={loadInterviews}
              className="px-3 py-1 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              Refresh
            </button>
          </div>
        </div>

        {/* Stats */}
        <div className="flex items-center gap-6 text-sm text-gray-600">
          <span>
            {interviews.length} interview{interviews.length !== 1 ? 's' : ''} this month
          </span>
          {interviews.filter(i => i.status === InterviewStatus.SCHEDULED).length > 0 && (
            <span>
              {interviews.filter(i => i.status === InterviewStatus.SCHEDULED).length} scheduled
            </span>
          )}
        </div>
      </div>

      {/* Calendar Grid */}
      <div className="p-4">
        {/* Week day headers */}
        <div className="grid grid-cols-7 gap-1 mb-2">
          {weekDays.map(day => (
            <div key={day} className="p-2 text-center text-sm font-medium text-gray-500">
              {day}
            </div>
          ))}
        </div>

        {/* Calendar days */}
        <div className="grid grid-cols-7 gap-1">
          {calendarDays.map((day, index) => (
            <div
              key={index}
              className={`min-h-[100px] p-2 border border-gray-100 rounded-lg ${
                day.isCurrentMonth
                  ? 'bg-white'
                  : 'bg-gray-50'
              } ${
                day.isToday
                  ? 'ring-2 ring-blue-500 ring-opacity-50'
                  : ''
              }`}
            >
              <div className={`text-sm font-medium mb-1 ${
                day.isCurrentMonth
                  ? day.isToday
                    ? 'text-blue-600'
                    : 'text-gray-900'
                  : 'text-gray-400'
              }`}>
                {day.date.getDate()}
              </div>

              <div className="space-y-1">
                {day.interviews.map((interview) => (
                  <div
                    key={interview.id}
                    onClick={() => onInterviewSelect?.(interview)}
                    className={`text-xs p-1 rounded border cursor-pointer hover:shadow-sm transition-shadow ${getInterviewTypeColor(interview.interview_type)}`}
                  >
                    <div className="font-medium truncate">
                      {interview.scheduled_at && formatTime(interview.scheduled_at)}
                    </div>
                    <div className="truncate">
                      {interview.interview_type.replace('_', ' ')}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Legend */}
      <div className="p-4 border-t border-gray-200">
        <div className="text-sm text-gray-600 mb-2">Legend:</div>
        <div className="flex flex-wrap gap-4 text-xs">
          {Object.values(InterviewType).map(type => (
            <div key={type} className="flex items-center gap-1">
              <div className={`w-3 h-3 rounded border ${getInterviewTypeColor(type)}`}></div>
              <span>{type.replace('_', ' ')}</span>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default InterviewCalendar;