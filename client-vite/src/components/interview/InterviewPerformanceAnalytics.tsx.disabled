import React, { useState, useEffect, useRef } from 'react';
import { api } from '../../lib/api';
import {
  Interview,
  InterviewProgress,
  QuestionCategory,
  QuestionDifficulty,
  InterviewType
} from '../../types/interview';

interface PerformanceMetrics {
  overallScore: number;
  scoreHistory: Array<{
    interviewId: string;
    date: string;
    score: number;
    type: InterviewType;
  }>;
  categoryBreakdown: Record<QuestionCategory, {
    averageScore: number;
    questionsAnswered: number;
    improvementTrend: number; // percentage change from previous attempts
    strengths: string[];
    weaknesses: string[];
    timeEfficiency: number; // average time per question vs expected
  }>;
  difficultyAnalysis: Record<QuestionDifficulty, {
    successRate: number;
    averageScore: number;
    averageTime: number;
    attemptCount: number;
    improvementRate: number;
  }>;
  skillProgression: {
    technicalSkills: Record<string, Array<{
      date: string;
      score: number;
      confidence: number;
    }>>;
    softSkills: Record<string, Array<{
      date: string;
      score: number;
      confidence: number;
    }>>;
  };
  responsePatterns: {
    averageResponseLength: number;
    vocabularyDiversity: number;
    communicationClarity: number;
    confidenceLevel: number;
    preparationLevel: number;
  };
  timeAnalysis: {
    totalTimeSpent: number;
    averageQuestionTime: number;
    timeDistribution: Array<{
      category: QuestionCategory;
      percentage: number;
      efficiency: number;
    }>;
    paceConsistency: number;
    rushingIndicators: number;
  };
  comparativeAnalysis: {
    industryBenchmark: number;
    experienceLevelBenchmark: number;
    roleTypeBenchmark: number;
    percentileRanking: number;
    competitorComparison: Array<{
      metric: string;
      yourScore: number;
      averageScore: number;
      topPercentileScore: number;
    }>;
  };
  learningInsights: {
    strengthAreas: Array<{
      skill: string;
      proficiency: number;
      consistency: number;
      marketDemand: number;
    }>;
    developmentAreas: Array<{
      skill: string;
      currentLevel: number;
      targetLevel: number;
      priority: 'high' | 'medium' | 'low';
      estimatedTimeToImprove: number; // in weeks
    }>;
    recommendations: Array<{
      type: 'skill_development' | 'practice_focus' | 'interview_strategy';
      priority: number;
      description: string;
      actionItems: string[];
      estimatedImpact: number;
    }>;
  };
}

interface InterviewPerformanceAnalyticsProps {
  interviewId?: string;
  candidateId?: string;
  timeRange?: '1month' | '3months' | '6months' | '1year' | 'all';
  showComparisons?: boolean;
  showRecommendations?: boolean;
}

const InterviewPerformanceAnalytics: React.FC<InterviewPerformanceAnalyticsProps> = ({
  interviewId,
  candidateId,
  timeRange = '3months',
  showComparisons = true,
  showRecommendations = true
}) => {
  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<'overview' | 'categories' | 'skills' | 'trends' | 'insights'>('overview');
  const [selectedCategory, setSelectedCategory] = useState<QuestionCategory | null>(null);
  const [chartType, setChartType] = useState<'line' | 'bar' | 'radar'>('line');

  const chartCanvasRef = useRef<HTMLCanvasElement>(null);

  useEffect(() => {
    loadPerformanceMetrics();
  }, [interviewId, candidateId, timeRange]);

  const loadPerformanceMetrics = async () => {
    try {
      setLoading(true);
      setError(null);

      // In real implementation, this would fetch from API
      // Mock comprehensive performance data
      const mockMetrics: PerformanceMetrics = {
        overallScore: 7.8,
        scoreHistory: [
          { interviewId: 'int-1', date: '2024-01-01', score: 6.2, type: InterviewType.TECHNICAL },
          { interviewId: 'int-2', date: '2024-01-08', score: 6.8, type: InterviewType.BEHAVIORAL },
          { interviewId: 'int-3', date: '2024-01-15', score: 7.2, type: InterviewType.TECHNICAL },
          { interviewId: 'int-4', date: '2024-01-22', score: 7.5, type: InterviewType.SYSTEM_DESIGN },
          { interviewId: 'int-5', date: '2024-01-29', score: 7.8, type: InterviewType.TECHNICAL }
        ],
        categoryBreakdown: {
          [QuestionCategory.TECHNICAL]: {
            averageScore: 8.2,
            questionsAnswered: 15,
            improvementTrend: 18.5,
            strengths: ['Algorithm design', 'Code structure', 'Problem decomposition'],
            weaknesses: ['Edge case handling', 'Time complexity analysis'],
            timeEfficiency: 0.92
          },
          [QuestionCategory.BEHAVIORAL]: {
            averageScore: 7.1,
            questionsAnswered: 8,
            improvementTrend: 12.3,
            strengths: ['Communication clarity', 'Leadership examples'],
            weaknesses: ['Quantifying impact', 'Conflict resolution examples'],
            timeEfficiency: 0.85
          },
          [QuestionCategory.SYSTEM_DESIGN]: {
            averageScore: 7.9,
            questionsAnswered: 6,
            improvementTrend: 25.2,
            strengths: ['Scalability considerations', 'Trade-off analysis'],
            weaknesses: ['Security considerations', 'Monitoring strategies'],
            timeEfficiency: 0.78
          },
          [QuestionCategory.SITUATIONAL]: {
            averageScore: 7.5,
            questionsAnswered: 4,
            improvementTrend: 8.7,
            strengths: ['Decision making process', 'Stakeholder consideration'],
            weaknesses: ['Risk assessment', 'Alternative solution generation'],
            timeEfficiency: 0.88
          }
        },
        difficultyAnalysis: {
          [QuestionDifficulty.EASY]: {
            successRate: 95,
            averageScore: 8.8,
            averageTime: 120,
            attemptCount: 12,
            improvementRate: 5.2
          },
          [QuestionDifficulty.MEDIUM]: {
            successRate: 82,
            averageScore: 7.6,
            averageTime: 180,
            attemptCount: 18,
            improvementRate: 15.8
          },
          [QuestionDifficulty.HARD]: {
            successRate: 67,
            averageScore: 6.9,
            averageTime: 280,
            attemptCount: 9,
            improvementRate: 28.3
          }
        },
        skillProgression: {
          technicalSkills: {
            'JavaScript': [
              { date: '2024-01-01', score: 7.2, confidence: 6.5 },
              { date: '2024-01-08', score: 7.8, confidence: 7.2 },
              { date: '2024-01-15', score: 8.1, confidence: 7.8 },
              { date: '2024-01-22', score: 8.4, confidence: 8.0 },
              { date: '2024-01-29', score: 8.7, confidence: 8.3 }
            ],
            'System Design': [
              { date: '2024-01-01', score: 6.8, confidence: 5.9 },
              { date: '2024-01-08', score: 7.2, confidence: 6.4 },
              { date: '2024-01-15', score: 7.6, confidence: 7.1 },
              { date: '2024-01-22', score: 8.0, confidence: 7.5 },
              { date: '2024-01-29', score: 8.2, confidence: 7.8 }
            ],
            'Algorithms': [
              { date: '2024-01-01', score: 7.5, confidence: 7.0 },
              { date: '2024-01-08', score: 7.8, confidence: 7.3 },
              { date: '2024-01-15', score: 8.2, confidence: 7.8 },
              { date: '2024-01-22', score: 8.5, confidence: 8.1 },
              { date: '2024-01-29', score: 8.8, confidence: 8.4 }
            ]
          },
          softSkills: {
            'Communication': [
              { date: '2024-01-01', score: 6.9, confidence: 6.2 },
              { date: '2024-01-08', score: 7.3, confidence: 6.8 },
              { date: '2024-01-15', score: 7.7, confidence: 7.2 },
              { date: '2024-01-22', score: 8.0, confidence: 7.6 },
              { date: '2024-01-29', score: 8.2, confidence: 7.9 }
            ],
            'Leadership': [
              { date: '2024-01-01', score: 7.1, confidence: 6.5 },
              { date: '2024-01-08', score: 7.4, confidence: 7.0 },
              { date: '2024-01-15', score: 7.8, confidence: 7.4 },
              { date: '2024-01-22', score: 8.1, confidence: 7.7 },
              { date: '2024-01-29', score: 8.3, confidence: 8.0 }
            ],
            'Problem Solving': [
              { date: '2024-01-01', score: 7.8, confidence: 7.2 },
              { date: '2024-01-08', score: 8.1, confidence: 7.6 },
              { date: '2024-01-15', score: 8.4, confidence: 8.0 },
              { date: '2024-01-22', score: 8.6, confidence: 8.2 },
              { date: '2024-01-29', score: 8.9, confidence: 8.5 }
            ]
          }
        },
        responsePatterns: {
          averageResponseLength: 142,
          vocabularyDiversity: 0.78,
          communicationClarity: 8.1,
          confidenceLevel: 7.6,
          preparationLevel: 8.3
        },
        timeAnalysis: {
          totalTimeSpent: 3420, // seconds
          averageQuestionTime: 184,
          timeDistribution: [
            { category: QuestionCategory.TECHNICAL, percentage: 45, efficiency: 0.92 },
            { category: QuestionCategory.BEHAVIORAL, percentage: 25, efficiency: 0.85 },
            { category: QuestionCategory.SYSTEM_DESIGN, percentage: 20, efficiency: 0.78 },
            { category: QuestionCategory.SITUATIONAL, percentage: 10, efficiency: 0.88 }
          ],
          paceConsistency: 0.87,
          rushingIndicators: 0.15
        },
        comparativeAnalysis: {
          industryBenchmark: 7.2,
          experienceLevelBenchmark: 7.5,
          roleTypeBenchmark: 7.8,
          percentileRanking: 78,
          competitorComparison: [
            { metric: 'Technical Skills', yourScore: 8.2, averageScore: 7.1, topPercentileScore: 9.1 },
            { metric: 'Communication', yourScore: 7.8, averageScore: 7.4, topPercentileScore: 8.9 },
            { metric: 'Problem Solving', yourScore: 8.5, averageScore: 7.3, topPercentileScore: 9.2 },
            { metric: 'Leadership', yourScore: 7.6, averageScore: 7.0, topPercentileScore: 8.7 },
            { metric: 'System Design', yourScore: 7.9, averageScore: 6.8, topPercentileScore: 8.8 }
          ]
        },
        learningInsights: {
          strengthAreas: [
            { skill: 'Algorithm Design', proficiency: 8.8, consistency: 0.92, marketDemand: 9.2 },
            { skill: 'Problem Solving', proficiency: 8.5, consistency: 0.89, marketDemand: 9.5 },
            { skill: 'JavaScript', proficiency: 8.7, consistency: 0.85, marketDemand: 8.8 }
          ],
          developmentAreas: [
            { skill: 'System Security', currentLevel: 6.2, targetLevel: 8.0, priority: 'high', estimatedTimeToImprove: 8 },
            { skill: 'Conflict Resolution', currentLevel: 6.8, targetLevel: 7.5, priority: 'medium', estimatedTimeToImprove: 4 },
            { skill: 'Public Speaking', currentLevel: 7.1, targetLevel: 8.2, priority: 'medium', estimatedTimeToImprove: 6 }
          ],
          recommendations: [
            {
              type: 'skill_development',
              priority: 1,
              description: 'Focus on system security and monitoring practices',
              actionItems: [
                'Study common security vulnerabilities (OWASP Top 10)',
                'Practice designing secure authentication systems',
                'Learn about monitoring and alerting strategies'
              ],
              estimatedImpact: 0.8
            },
            {
              type: 'practice_focus',
              priority: 2,
              description: 'Improve behavioral interview responses with specific examples',
              actionItems: [
                'Use STAR method for all behavioral questions',
                'Quantify impact in all examples',
                'Prepare 5-7 detailed scenarios covering different situations'
              ],
              estimatedImpact: 0.6
            },
            {
              type: 'interview_strategy',
              priority: 3,
              description: 'Optimize time management during technical interviews',
              actionItems: [
                'Practice coding under time pressure',
                'Learn to communicate thought process while coding',
                'Master common patterns to reduce thinking time'
              ],
              estimatedImpact: 0.7
            }
          ]
        }
      };

      setMetrics(mockMetrics);

    } catch (err: any) {
      setError(err.message || 'Failed to load performance metrics');
    } finally {
      setLoading(false);
    }
  };

  const drawChart = (canvas: HTMLCanvasElement, data: any[], type: 'line' | 'bar' | 'radar') => {
    const ctx = canvas.getContext('2d');
    if (!ctx || !data.length) return;

    const width = canvas.width;
    const height = canvas.height;
    const padding = 40;

    // Clear canvas
    ctx.clearRect(0, 0, width, height);

    if (type === 'line') {
      // Draw line chart for score history
      const scores = data.map(d => d.score);
      const maxScore = Math.max(...scores);
      const minScore = Math.min(...scores);
      const range = maxScore - minScore || 1;

      // Draw axes
      ctx.strokeStyle = '#e5e7eb';
      ctx.lineWidth = 1;
      ctx.beginPath();
      ctx.moveTo(padding, padding);
      ctx.lineTo(padding, height - padding);
      ctx.lineTo(width - padding, height - padding);
      ctx.stroke();

      // Draw grid lines
      for (let i = 1; i <= 4; i++) {
        const y = padding + (height - 2 * padding) * i / 4;
        ctx.beginPath();
        ctx.moveTo(padding, y);
        ctx.lineTo(width - padding, y);
        ctx.stroke();
      }

      // Draw line
      ctx.strokeStyle = '#3b82f6';
      ctx.lineWidth = 2;
      ctx.beginPath();

      data.forEach((point, index) => {
        const x = padding + (width - 2 * padding) * index / (data.length - 1);
        const y = height - padding - (height - 2 * padding) * (point.score - minScore) / range;

        if (index === 0) {
          ctx.moveTo(x, y);
        } else {
          ctx.lineTo(x, y);
        }

        // Draw points
        ctx.fillStyle = '#3b82f6';
        ctx.beginPath();
        ctx.arc(x, y, 3, 0, 2 * Math.PI);
        ctx.fill();
      });

      ctx.stroke();

      // Draw labels
      ctx.fillStyle = '#6b7280';
      ctx.font = '12px Arial';
      ctx.textAlign = 'center';

      data.forEach((point, index) => {
        const x = padding + (width - 2 * padding) * index / (data.length - 1);
        const date = new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
        ctx.fillText(date, x, height - padding + 15);
      });

      // Y-axis labels
      ctx.textAlign = 'right';
      for (let i = 0; i <= 4; i++) {
        const y = height - padding - (height - 2 * padding) * i / 4;
        const value = (minScore + range * i / 4).toFixed(1);
        ctx.fillText(value, padding - 10, y + 4);
      }
    }
  };

  useEffect(() => {
    if (metrics && chartCanvasRef.current) {
      drawChart(chartCanvasRef.current, metrics.scoreHistory, chartType);
    }
  }, [metrics, chartType]);

  const formatTime = (seconds: number): string => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    return hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;
  };

  const getScoreColor = (score: number): string => {
    if (score >= 8) return 'text-green-600';
    if (score >= 6) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getScoreBadgeColor = (score: number): string => {
    if (score >= 8) return 'bg-green-100 text-green-800';
    if (score >= 6) return 'bg-yellow-100 text-yellow-800';
    return 'bg-red-100 text-red-800';
  };

  const getTrendIcon = (trend: number) => {
    if (trend > 0) {
      return (
        <svg className="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 17l9.2-9.2M17 17V7H7" />
        </svg>
      );
    } else if (trend < 0) {
      return (
        <svg className="w-4 h-4 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 7l-9.2 9.2M7 7v10h10" />
        </svg>
      );
    }
    return (
      <svg className="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 12H4" />
      </svg>
    );
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-lg p-4">
        <div className="flex items-center space-x-2">
          <svg className="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <span className="text-red-800">{error}</span>
        </div>
      </div>
    );
  }

  if (!metrics) {
    return (
      <div className="text-center py-12">
        <p className="text-gray-500">No performance data available</p>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto space-y-6">
      {/* Header */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div className="flex justify-between items-center mb-4">
          <div>
            <h2 className="text-2xl font-bold text-gray-900">Performance Analytics</h2>
            <p className="text-gray-600 mt-1">
              Comprehensive analysis of your interview performance and growth
            </p>
          </div>

          <div className="flex items-center space-x-4">
            <select
              value={timeRange}
              onChange={(e) => setTimeRange(e.target.value as any)}
              className="border border-gray-300 rounded-lg px-3 py-2 text-sm"
            >
              <option value="1month">Last Month</option>
              <option value="3months">Last 3 Months</option>
              <option value="6months">Last 6 Months</option>
              <option value="1year">Last Year</option>
              <option value="all">All Time</option>
            </select>
          </div>
        </div>

        {/* Overall Score */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-6">
          <div className="text-center">
            <div className={`text-4xl font-bold ${getScoreColor(metrics.overallScore)}`}>
              {metrics.overallScore.toFixed(1)}
            </div>
            <div className="text-gray-600 text-sm">Overall Score</div>
            <div className="text-xs text-gray-500 mt-1">
              {metrics.percentileRanking}th percentile
            </div>
          </div>
          <div className="text-center">
            <div className="text-4xl font-bold text-blue-600">
              {metrics.scoreHistory.length}
            </div>
            <div className="text-gray-600 text-sm">Interviews</div>
            <div className="text-xs text-gray-500 mt-1">
              Completed
            </div>
          </div>
          <div className="text-center">
            <div className="text-4xl font-bold text-purple-600">
              {formatTime(metrics.timeAnalysis.totalTimeSpent)}
            </div>
            <div className="text-gray-600 text-sm">Practice Time</div>
            <div className="text-xs text-gray-500 mt-1">
              Total invested
            </div>
          </div>
          <div className="text-center">
            <div className="text-4xl font-bold text-green-600">
              {Math.round(metrics.difficultyAnalysis[QuestionDifficulty.MEDIUM].improvementRate)}%
            </div>
            <div className="text-gray-600 text-sm">Improvement</div>
            <div className="text-xs text-gray-500 mt-1">
              Last 30 days
            </div>
          </div>
        </div>
      </div>

      {/* Tab Navigation */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
        <div className="border-b border-gray-200">
          <nav className="-mb-px flex space-x-8 px-6">
            {[
              { id: 'overview', name: 'Overview', icon: '📊' },
              { id: 'categories', name: 'Categories', icon: '📝' },
              { id: 'skills', name: 'Skills', icon: '🎯' },
              { id: 'trends', name: 'Trends', icon: '📈' },
              { id: 'insights', name: 'Insights', icon: '💡' }
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id as any)}
                className={`whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm flex items-center gap-2 ${
                  activeTab === tab.id
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <span>{tab.icon}</span>
                {tab.name}
              </button>
            ))}
          </nav>
        </div>

        <div className="p-6">
          {activeTab === 'overview' && (
            <div className="space-y-6">
              {/* Score History Chart */}
              <div>
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-lg font-medium text-gray-900">Score Progression</h3>
                  <div className="flex space-x-2">
                    {['line', 'bar'].map((type) => (
                      <button
                        key={type}
                        onClick={() => setChartType(type as any)}
                        className={`px-3 py-1 text-sm rounded ${
                          chartType === type
                            ? 'bg-blue-100 text-blue-800'
                            : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                        }`}
                      >
                        {type.charAt(0).toUpperCase() + type.slice(1)}
                      </button>
                    ))}
                  </div>
                </div>
                <div className="bg-gray-50 rounded-lg p-4">
                  <canvas
                    ref={chartCanvasRef}
                    width={800}
                    height={300}
                    className="w-full h-auto"
                  />
                </div>
              </div>

              {/* Quick Stats */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="bg-blue-50 rounded-lg p-4">
                  <h4 className="font-medium text-blue-900 mb-2">Response Quality</h4>
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-sm text-blue-700">Clarity</span>
                      <span className="text-sm font-medium text-blue-900">
                        {metrics.responsePatterns.communicationClarity}/10
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm text-blue-700">Confidence</span>
                      <span className="text-sm font-medium text-blue-900">
                        {metrics.responsePatterns.confidenceLevel}/10
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm text-blue-700">Preparation</span>
                      <span className="text-sm font-medium text-blue-900">
                        {metrics.responsePatterns.preparationLevel}/10
                      </span>
                    </div>
                  </div>
                </div>

                <div className="bg-green-50 rounded-lg p-4">
                  <h4 className="font-medium text-green-900 mb-2">Time Efficiency</h4>
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-sm text-green-700">Avg. per Question</span>
                      <span className="text-sm font-medium text-green-900">
                        {formatTime(metrics.timeAnalysis.averageQuestionTime)}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm text-green-700">Pace Consistency</span>
                      <span className="text-sm font-medium text-green-900">
                        {Math.round(metrics.timeAnalysis.paceConsistency * 100)}%
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm text-green-700">Rushing Risk</span>
                      <span className="text-sm font-medium text-green-900">
                        {Math.round(metrics.timeAnalysis.rushingIndicators * 100)}%
                      </span>
                    </div>
                  </div>
                </div>

                <div className="bg-purple-50 rounded-lg p-4">
                  <h4 className="font-medium text-purple-900 mb-2">Benchmark Comparison</h4>
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-sm text-purple-700">Industry</span>
                      <span className={`text-sm font-medium ${
                        metrics.overallScore > metrics.comparativeAnalysis.industryBenchmark
                          ? 'text-green-900' : 'text-red-900'
                      }`}>
                        {metrics.overallScore > metrics.comparativeAnalysis.industryBenchmark ? '+' : ''}
                        {(metrics.overallScore - metrics.comparativeAnalysis.industryBenchmark).toFixed(1)}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm text-purple-700">Experience Level</span>
                      <span className={`text-sm font-medium ${
                        metrics.overallScore > metrics.comparativeAnalysis.experienceLevelBenchmark
                          ? 'text-green-900' : 'text-red-900'
                      }`}>
                        {metrics.overallScore > metrics.comparativeAnalysis.experienceLevelBenchmark ? '+' : ''}
                        {(metrics.overallScore - metrics.comparativeAnalysis.experienceLevelBenchmark).toFixed(1)}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm text-purple-700">Role Type</span>
                      <span className={`text-sm font-medium ${
                        metrics.overallScore > metrics.comparativeAnalysis.roleTypeBenchmark
                          ? 'text-green-900' : 'text-red-900'
                      }`}>
                        {metrics.overallScore > metrics.comparativeAnalysis.roleTypeBenchmark ? '+' : ''}
                        {(metrics.overallScore - metrics.comparativeAnalysis.roleTypeBenchmark).toFixed(1)}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'categories' && (
            <div className="space-y-6">
              <h3 className="text-lg font-medium text-gray-900">Performance by Category</h3>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {Object.entries(metrics.categoryBreakdown).map(([category, data]) => (
                  <div
                    key={category}
                    className={`border-2 rounded-lg p-4 cursor-pointer transition-colors ${
                      selectedCategory === category
                        ? 'border-blue-500 bg-blue-50'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                    onClick={() => setSelectedCategory(
                      selectedCategory === category ? null : category as QuestionCategory
                    )}
                  >
                    <div className="flex items-center justify-between mb-3">
                      <h4 className="font-medium text-gray-900 capitalize">
                        {category.replace('_', ' ')}
                      </h4>
                      <div className="flex items-center space-x-2">
                        {getTrendIcon(data.improvementTrend)}
                        <span className={`px-3 py-1 rounded-full text-sm font-medium ${getScoreBadgeColor(data.averageScore)}`}>
                          {data.averageScore.toFixed(1)}/10
                        </span>
                      </div>
                    </div>

                    <div className="grid grid-cols-3 gap-4 text-sm">
                      <div>
                        <div className="text-gray-500">Questions</div>
                        <div className="font-medium">{data.questionsAnswered}</div>
                      </div>
                      <div>
                        <div className="text-gray-500">Efficiency</div>
                        <div className="font-medium">{Math.round(data.timeEfficiency * 100)}%</div>
                      </div>
                      <div>
                        <div className="text-gray-500">Trend</div>
                        <div className="font-medium text-green-600">
                          +{data.improvementTrend.toFixed(1)}%
                        </div>
                      </div>
                    </div>

                    {selectedCategory === category && (
                      <div className="mt-4 pt-4 border-t border-gray-200">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <h5 className="font-medium text-green-700 mb-2">Strengths</h5>
                            <ul className="space-y-1">
                              {data.strengths.map((strength, index) => (
                                <li key={index} className="text-sm text-green-600 flex items-start">
                                  <span className="text-green-500 mr-1 mt-0.5">✓</span>
                                  {strength}
                                </li>
                              ))}
                            </ul>
                          </div>
                          <div>
                            <h5 className="font-medium text-orange-700 mb-2">Areas to Improve</h5>
                            <ul className="space-y-1">
                              {data.weaknesses.map((weakness, index) => (
                                <li key={index} className="text-sm text-orange-600 flex items-start">
                                  <span className="text-orange-500 mr-1 mt-0.5">→</span>
                                  {weakness}
                                </li>
                              ))}
                            </ul>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>

              {/* Difficulty Analysis */}
              <div>
                <h3 className="text-lg font-medium text-gray-900 mb-4">Difficulty Analysis</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {Object.entries(metrics.difficultyAnalysis).map(([difficulty, data]) => (
                    <div key={difficulty} className="bg-gray-50 rounded-lg p-4">
                      <div className="flex items-center justify-between mb-3">
                        <h4 className="font-medium text-gray-900 capitalize">{difficulty}</h4>
                        <span className={`px-2 py-1 rounded text-sm font-medium ${getScoreBadgeColor(data.averageScore)}`}>
                          {data.averageScore.toFixed(1)}/10
                        </span>
                      </div>
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between">
                          <span className="text-gray-600">Success Rate</span>
                          <span className="font-medium">{data.successRate}%</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Avg. Time</span>
                          <span className="font-medium">{formatTime(data.averageTime)}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Attempts</span>
                          <span className="font-medium">{data.attemptCount}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Improvement</span>
                          <span className="font-medium text-green-600">+{data.improvementRate.toFixed(1)}%</span>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {activeTab === 'skills' && (
            <div className="space-y-6">
              <h3 className="text-lg font-medium text-gray-900">Skill Progression</h3>

              {/* Technical Skills */}
              <div>
                <h4 className="font-medium text-gray-900 mb-4">Technical Skills</h4>
                <div className="space-y-4">
                  {Object.entries(metrics.skillProgression.technicalSkills).map(([skill, progression]) => {
                    const latest = progression[progression.length - 1];
                    const earliest = progression[0];
                    const improvement = latest.score - earliest.score;

                    return (
                      <div key={skill} className="bg-gray-50 rounded-lg p-4">
                        <div className="flex items-center justify-between mb-3">
                          <h5 className="font-medium text-gray-900">{skill}</h5>
                          <div className="flex items-center space-x-3">
                            <span className="text-sm text-gray-600">
                              +{improvement.toFixed(1)} improvement
                            </span>
                            <span className={`px-3 py-1 rounded-full text-sm font-medium ${getScoreBadgeColor(latest.score)}`}>
                              {latest.score.toFixed(1)}/10
                            </span>
                          </div>
                        </div>
                        <div className="grid grid-cols-5 gap-2">
                          {progression.map((point, index) => (
                            <div key={index} className="text-center">
                              <div className="h-20 bg-white rounded flex items-end justify-center p-1">
                                <div
                                  className="bg-blue-500 rounded w-full transition-all"
                                  style={{ height: `${(point.score / 10) * 100}%` }}
                                />
                              </div>
                              <div className="text-xs text-gray-500 mt-1">
                                {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}
                              </div>
                              <div className="text-xs font-medium">{point.score.toFixed(1)}</div>
                            </div>
                          ))}
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>

              {/* Soft Skills */}
              <div>
                <h4 className="font-medium text-gray-900 mb-4">Soft Skills</h4>
                <div className="space-y-4">
                  {Object.entries(metrics.skillProgression.softSkills).map(([skill, progression]) => {
                    const latest = progression[progression.length - 1];
                    const earliest = progression[0];
                    const improvement = latest.score - earliest.score;

                    return (
                      <div key={skill} className="bg-gray-50 rounded-lg p-4">
                        <div className="flex items-center justify-between mb-3">
                          <h5 className="font-medium text-gray-900">{skill}</h5>
                          <div className="flex items-center space-x-3">
                            <span className="text-sm text-gray-600">
                              +{improvement.toFixed(1)} improvement
                            </span>
                            <span className={`px-3 py-1 rounded-full text-sm font-medium ${getScoreBadgeColor(latest.score)}`}>
                              {latest.score.toFixed(1)}/10
                            </span>
                          </div>
                        </div>
                        <div className="flex items-end space-x-2 h-16">
                          {progression.map((point, index) => (
                            <div key={index} className="flex-1 flex flex-col items-center">
                              <div
                                className="bg-green-500 rounded w-full transition-all"
                                style={{ height: `${(point.score / 10) * 100}%` }}
                              />
                              <div className="text-xs text-gray-500 mt-1">
                                {point.score.toFixed(1)}
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>
          )}

          {activeTab === 'trends' && (
            <div className="space-y-6">
              <h3 className="text-lg font-medium text-gray-900">Performance Trends</h3>

              {/* Time Distribution */}
              <div>
                <h4 className="font-medium text-gray-900 mb-4">Time Distribution by Category</h4>
                <div className="space-y-3">
                  {metrics.timeAnalysis.timeDistribution.map((item) => (
                    <div key={item.category} className="flex items-center space-x-4">
                      <div className="w-32 text-sm text-gray-700 capitalize">
                        {item.category.replace('_', ' ')}
                      </div>
                      <div className="flex-1">
                        <div className="bg-gray-200 rounded-full h-6 relative">
                          <div
                            className="bg-blue-500 rounded-full h-6 flex items-center px-2 text-white text-xs font-medium"
                            style={{ width: `${item.percentage}%` }}
                          >
                            {item.percentage}%
                          </div>
                        </div>
                      </div>
                      <div className="w-20 text-sm text-gray-600">
                        {Math.round(item.efficiency * 100)}% efficient
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Competitive Comparison */}
              {showComparisons && (
                <div>
                  <h4 className="font-medium text-gray-900 mb-4">Competitive Comparison</h4>
                  <div className="space-y-4">
                    {metrics.comparativeAnalysis.competitorComparison.map((item) => (
                      <div key={item.metric} className="bg-gray-50 rounded-lg p-4">
                        <div className="flex items-center justify-between mb-2">
                          <h5 className="font-medium text-gray-900">{item.metric}</h5>
                          <span className={`px-3 py-1 rounded-full text-sm font-medium ${getScoreBadgeColor(item.yourScore)}`}>
                            {item.yourScore.toFixed(1)}/10
                          </span>
                        </div>
                        <div className="space-y-2">
                          <div className="flex items-center justify-between text-sm">
                            <span className="text-gray-600">Your Score</span>
                            <span className="font-medium">{item.yourScore.toFixed(1)}</span>
                          </div>
                          <div className="flex items-center justify-between text-sm">
                            <span className="text-gray-600">Average</span>
                            <span className="font-medium">{item.averageScore.toFixed(1)}</span>
                          </div>
                          <div className="flex items-center justify-between text-sm">
                            <span className="text-gray-600">Top 10%</span>
                            <span className="font-medium">{item.topPercentileScore.toFixed(1)}</span>
                          </div>
                          <div className="relative">
                            <div className="bg-gray-200 rounded-full h-2">
                              <div
                                className="bg-blue-500 rounded-full h-2"
                                style={{ width: `${(item.yourScore / 10) * 100}%` }}
                              />
                            </div>
                            <div className="flex justify-between text-xs text-gray-500 mt-1">
                              <span>0</span>
                              <span>5</span>
                              <span>10</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}

          {activeTab === 'insights' && (
            <div className="space-y-6">
              <h3 className="text-lg font-medium text-gray-900">Learning Insights & Recommendations</h3>

              {/* Strength Areas */}
              <div>
                <h4 className="font-medium text-green-700 mb-4 flex items-center">
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                  </svg>
                  Your Strength Areas
                </h4>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {metrics.learningInsights.strengthAreas.map((strength) => (
                    <div key={strength.skill} className="bg-green-50 border border-green-200 rounded-lg p-4">
                      <h5 className="font-medium text-green-900 mb-2">{strength.skill}</h5>
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between">
                          <span className="text-green-700">Proficiency</span>
                          <span className="font-medium">{strength.proficiency.toFixed(1)}/10</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-green-700">Consistency</span>
                          <span className="font-medium">{Math.round(strength.consistency * 100)}%</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-green-700">Market Demand</span>
                          <span className="font-medium">{strength.marketDemand.toFixed(1)}/10</span>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Development Areas */}
              <div>
                <h4 className="font-medium text-orange-700 mb-4 flex items-center">
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  Development Opportunities
                </h4>
                <div className="space-y-4">
                  {metrics.learningInsights.developmentAreas.map((area) => (
                    <div key={area.skill} className="bg-orange-50 border border-orange-200 rounded-lg p-4">
                      <div className="flex items-center justify-between mb-3">
                        <h5 className="font-medium text-orange-900">{area.skill}</h5>
                        <div className="flex items-center space-x-2">
                          <span className={`px-2 py-1 rounded text-xs font-medium ${
                            area.priority === 'high' ? 'bg-red-100 text-red-800' :
                            area.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                            'bg-blue-100 text-blue-800'
                          }`}>
                            {area.priority} priority
                          </span>
                          <span className="text-sm text-orange-700">
                            ~{area.estimatedTimeToImprove} weeks
                          </span>
                        </div>
                      </div>
                      <div className="flex items-center space-x-4">
                        <div className="flex-1">
                          <div className="flex justify-between text-sm mb-1">
                            <span className="text-orange-700">Current</span>
                            <span className="text-orange-700">Target</span>
                          </div>
                          <div className="bg-orange-200 rounded-full h-2 relative">
                            <div
                              className="bg-orange-500 rounded-full h-2"
                              style={{ width: `${(area.currentLevel / 10) * 100}%` }}
                            />
                            <div
                              className="absolute top-0 w-1 h-2 bg-orange-800 rounded"
                              style={{ left: `${(area.targetLevel / 10) * 100}%` }}
                            />
                          </div>
                          <div className="flex justify-between text-xs text-orange-600 mt-1">
                            <span>{area.currentLevel.toFixed(1)}</span>
                            <span>{area.targetLevel.toFixed(1)}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Recommendations */}
              {showRecommendations && (
                <div>
                  <h4 className="font-medium text-blue-700 mb-4 flex items-center">
                    <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                    </svg>
                    Personalized Recommendations
                  </h4>
                  <div className="space-y-4">
                    {metrics.learningInsights.recommendations
                      .sort((a, b) => a.priority - b.priority)
                      .map((recommendation, index) => (
                        <div key={index} className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                          <div className="flex items-start justify-between mb-3">
                            <div>
                              <h5 className="font-medium text-blue-900 mb-1">
                                {recommendation.description}
                              </h5>
                              <span className={`px-2 py-1 rounded text-xs font-medium ${
                                recommendation.type === 'skill_development' ? 'bg-purple-100 text-purple-800' :
                                recommendation.type === 'practice_focus' ? 'bg-green-100 text-green-800' :
                                'bg-yellow-100 text-yellow-800'
                              }`}>
                                {recommendation.type.replace('_', ' ')}
                              </span>
                            </div>
                            <div className="text-right">
                              <div className="text-sm text-blue-700">Priority #{recommendation.priority}</div>
                              <div className="text-xs text-blue-600">
                                {Math.round(recommendation.estimatedImpact * 100)}% impact
                              </div>
                            </div>
                          </div>
                          <div>
                            <h6 className="text-sm font-medium text-blue-800 mb-2">Action Items:</h6>
                            <ul className="space-y-1">
                              {recommendation.actionItems.map((item, itemIndex) => (
                                <li key={itemIndex} className="text-sm text-blue-700 flex items-start">
                                  <span className="text-blue-500 mr-2 mt-0.5">•</span>
                                  {item}
                                </li>
                              ))}
                            </ul>
                          </div>
                        </div>
                      ))}
                  </div>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default InterviewPerformanceAnalytics;