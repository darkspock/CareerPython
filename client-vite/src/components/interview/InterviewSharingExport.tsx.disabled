import React, { useState, useRef } from 'react';
import { api } from '../../lib/api';
import {
  Interview,
  InterviewProgress,
  QuestionCategory,
  QuestionDifficulty
} from '../../types/interview';

interface ExportOptions {
  format: 'pdf' | 'json' | 'csv' | 'docx';
  includeResponses: boolean;
  includeAnalysis: boolean;
  includeRecommendations: boolean;
  includeMetrics: boolean;
  includeCharts: boolean;
  anonymize: boolean;
  template: 'professional' | 'detailed' | 'summary' | 'academic';
}

interface SharingOptions {
  visibility: 'private' | 'public' | 'link_only';
  allowComments: boolean;
  expirationDate?: string;
  password?: string;
  recipientEmails?: string[];
  customMessage?: string;
  includeContact: boolean;
}

interface InterviewSharingExportProps {
  interviewId: string;
  candidateName?: string;
  interviewType?: string;
  completionDate?: string;
  onExportComplete?: (exportUrl: string, format: string) => void;
  onShareComplete?: (shareUrl: string, options: SharingOptions) => void;
}

const InterviewSharingExport: React.FC<InterviewSharingExportProps> = ({
  interviewId,
  candidateName = 'Anonymous',
  interviewType = 'Technical Interview',
  completionDate = new Date().toISOString(),
  onExportComplete,
  onShareComplete
}) => {
  const [activeTab, setActiveTab] = useState<'export' | 'share' | 'history'>('export');
  const [exportOptions, setExportOptions] = useState<ExportOptions>({
    format: 'pdf',
    includeResponses: true,
    includeAnalysis: true,
    includeRecommendations: true,
    includeMetrics: true,
    includeCharts: true,
    anonymize: false,
    template: 'professional'
  });
  const [sharingOptions, setSharingOptions] = useState<SharingOptions>({
    visibility: 'private',
    allowComments: false,
    includeContact: false
  });
  const [isExporting, setIsExporting] = useState(false);
  const [isSharing, setIsSharing] = useState(false);
  const [exportHistory, setExportHistory] = useState([
    {
      id: 'exp-1',
      date: '2024-01-20T14:30:00Z',
      format: 'pdf',
      template: 'professional',
      size: '2.1 MB',
      downloads: 3,
      url: '#'
    },
    {
      id: 'exp-2',
      date: '2024-01-19T10:15:00Z',
      format: 'json',
      template: 'detailed',
      size: '456 KB',
      downloads: 1,
      url: '#'
    }
  ]);
  const [shareHistory, setShareHistory] = useState([
    {
      id: 'share-1',
      date: '2024-01-20T16:45:00Z',
      visibility: 'link_only',
      views: 12,
      url: 'https://app.example.com/shared/abc-123',
      expires: '2024-02-20T16:45:00Z'
    }
  ]);

  const exportFileRef = useRef<HTMLAnchorElement>(null);

  const handleExport = async () => {
    try {
      setIsExporting(true);

      // In real implementation, this would call the API to generate the export
      // Mock export process
      await new Promise(resolve => setTimeout(resolve, 2000));

      const fileName = `interview-results-${interviewId}-${Date.now()}.${exportOptions.format}`;
      const mockUrl = URL.createObjectURL(new Blob(['Mock export data'], { type: 'text/plain' }));

      // Add to export history
      const newExport = {
        id: `exp-${Date.now()}`,
        date: new Date().toISOString(),
        format: exportOptions.format,
        template: exportOptions.template,
        size: '1.8 MB',
        downloads: 0,
        url: mockUrl
      };
      setExportHistory(prev => [newExport, ...prev]);

      // Trigger download
      if (exportFileRef.current) {
        exportFileRef.current.href = mockUrl;
        exportFileRef.current.download = fileName;
        exportFileRef.current.click();
      }

      onExportComplete?.(mockUrl, exportOptions.format);

    } catch (error) {
      console.error('Export failed:', error);
    } finally {
      setIsExporting(false);
    }
  };

  const handleShare = async () => {
    try {
      setIsSharing(true);

      // In real implementation, this would call the API to create a shareable link
      await new Promise(resolve => setTimeout(resolve, 1500));

      const shareUrl = `https://app.example.com/shared/${interviewId}-${Date.now()}`;

      // Add to share history
      const newShare = {
        id: `share-${Date.now()}`,
        date: new Date().toISOString(),
        visibility: sharingOptions.visibility,
        views: 0,
        url: shareUrl,
        expires: sharingOptions.expirationDate
      };
      setShareHistory(prev => [newShare, ...prev]);

      // Copy to clipboard
      await navigator.clipboard.writeText(shareUrl);

      onShareComplete?.(shareUrl, sharingOptions);

    } catch (error) {
      console.error('Sharing failed:', error);
    } finally {
      setIsSharing(false);
    }
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      // Show success message (in real app, would use toast notification)
    } catch (error) {
      console.error('Failed to copy to clipboard:', error);
    }
  };

  const getFormatIcon = (format: string) => {
    switch (format) {
      case 'pdf':
        return '📄';
      case 'json':
        return '🔧';
      case 'csv':
        return '📊';
      case 'docx':
        return '📝';
      default:
        return '📁';
    }
  };

  const getVisibilityIcon = (visibility: string) => {
    switch (visibility) {
      case 'public':
        return '🌐';
      case 'link_only':
        return '🔗';
      case 'private':
        return '🔒';
      default:
        return '🔒';
    }
  };

  const formatFileSize = (sizeStr: string) => sizeStr;

  const formatDate = (dateStr: string) => {
    return new Date(dateStr).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  return (
    <div className="max-w-4xl mx-auto">
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
        {/* Header */}
        <div className="px-6 py-4 border-b border-gray-200">
          <div className="flex justify-between items-center">
            <div>
              <h2 className="text-xl font-semibold text-gray-900">Share & Export Results</h2>
              <p className="text-sm text-gray-600 mt-1">
                {interviewType} • {candidateName} • {formatDate(completionDate)}
              </p>
            </div>
            <div className="flex items-center space-x-2">
              <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded">
                Interview ID: {interviewId.slice(-8)}
              </span>
            </div>
          </div>
        </div>

        {/* Tab Navigation */}
        <div className="border-b border-gray-200">
          <nav className="-mb-px flex space-x-8 px-6">
            {[
              { id: 'export', name: 'Export', icon: '📥' },
              { id: 'share', name: 'Share', icon: '🔗' },
              { id: 'history', name: 'History', icon: '📋' }
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id as any)}
                className={`whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm flex items-center gap-2 ${
                  activeTab === tab.id
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <span>{tab.icon}</span>
                {tab.name}
              </button>
            ))}
          </nav>
        </div>

        <div className="p-6">
          {activeTab === 'export' && (
            <div className="space-y-6">
              <div>
                <h3 className="text-lg font-medium text-gray-900 mb-4">Export Options</h3>

                {/* Format Selection */}
                <div className="mb-6">
                  <label className="block text-sm font-medium text-gray-700 mb-3">Export Format</label>
                  <div className="grid grid-cols-4 gap-3">
                    {[
                      { value: 'pdf', label: 'PDF', description: 'Professional report format' },
                      { value: 'json', label: 'JSON', description: 'Raw data for developers' },
                      { value: 'csv', label: 'CSV', description: 'Spreadsheet compatible' },
                      { value: 'docx', label: 'Word', description: 'Editable document' }
                    ].map((format) => (
                      <div key={format.value} className="relative">
                        <input
                          type="radio"
                          id={format.value}
                          name="format"
                          value={format.value}
                          checked={exportOptions.format === format.value}
                          onChange={(e) => setExportOptions(prev => ({ ...prev, format: e.target.value as any }))}
                          className="sr-only"
                        />
                        <label
                          htmlFor={format.value}
                          className={`block p-4 border rounded-lg cursor-pointer transition-colors ${
                            exportOptions.format === format.value
                              ? 'border-blue-500 bg-blue-50'
                              : 'border-gray-200 hover:border-gray-300'
                          }`}
                        >
                          <div className="text-center">
                            <div className="text-2xl mb-2">{getFormatIcon(format.value)}</div>
                            <div className="font-medium text-gray-900">{format.label}</div>
                            <div className="text-xs text-gray-500 mt-1">{format.description}</div>
                          </div>
                        </label>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Template Selection (for PDF/DOCX) */}
                {(exportOptions.format === 'pdf' || exportOptions.format === 'docx') && (
                  <div className="mb-6">
                    <label className="block text-sm font-medium text-gray-700 mb-3">Template Style</label>
                    <div className="grid grid-cols-4 gap-3">
                      {[
                        { value: 'professional', label: 'Professional', description: 'Clean, business format' },
                        { value: 'detailed', label: 'Detailed', description: 'Comprehensive analysis' },
                        { value: 'summary', label: 'Summary', description: 'Key highlights only' },
                        { value: 'academic', label: 'Academic', description: 'Research-style format' }
                      ].map((template) => (
                        <label key={template.value} className="relative">
                          <input
                            type="radio"
                            name="template"
                            value={template.value}
                            checked={exportOptions.template === template.value}
                            onChange={(e) => setExportOptions(prev => ({ ...prev, template: e.target.value as any }))}
                            className="sr-only"
                          />
                          <div className={`p-3 border rounded-lg cursor-pointer transition-colors ${
                            exportOptions.template === template.value
                              ? 'border-blue-500 bg-blue-50'
                              : 'border-gray-200 hover:border-gray-300'
                          }`}>
                            <div className="font-medium text-gray-900 text-sm">{template.label}</div>
                            <div className="text-xs text-gray-500 mt-1">{template.description}</div>
                          </div>
                        </label>
                      ))}
                    </div>
                  </div>
                )}

                {/* Content Options */}
                <div className="mb-6">
                  <label className="block text-sm font-medium text-gray-700 mb-3">Include Content</label>
                  <div className="grid grid-cols-2 gap-4">
                    {[
                      { key: 'includeResponses', label: 'Interview Responses', description: 'Your answers to interview questions' },
                      { key: 'includeAnalysis', label: 'AI Analysis', description: 'Feedback and scoring details' },
                      { key: 'includeRecommendations', label: 'Recommendations', description: 'Improvement suggestions' },
                      { key: 'includeMetrics', label: 'Performance Metrics', description: 'Scores and benchmarks' },
                      { key: 'includeCharts', label: 'Charts & Graphs', description: 'Visual performance data' },
                      { key: 'anonymize', label: 'Anonymize Data', description: 'Remove personal information' }
                    ].map((option) => (
                      <div key={option.key} className="flex items-start space-x-3">
                        <input
                          type="checkbox"
                          id={option.key}
                          checked={exportOptions[option.key as keyof ExportOptions] as boolean}
                          onChange={(e) => setExportOptions(prev => ({
                            ...prev,
                            [option.key]: e.target.checked
                          }))}
                          className="mt-1 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                        />
                        <label htmlFor={option.key} className="flex-1 cursor-pointer">
                          <div className="font-medium text-gray-900">{option.label}</div>
                          <div className="text-sm text-gray-500">{option.description}</div>
                        </label>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Export Preview */}
                <div className="bg-gray-50 border border-gray-200 rounded-lg p-4 mb-6">
                  <h4 className="font-medium text-gray-900 mb-2">Export Preview</h4>
                  <div className="text-sm text-gray-600 space-y-1">
                    <div>Format: {exportOptions.format.toUpperCase()}</div>
                    {(exportOptions.format === 'pdf' || exportOptions.format === 'docx') && (
                      <div>Template: {exportOptions.template}</div>
                    )}
                    <div>Estimated size: 1.2 - 2.5 MB</div>
                    <div>
                      Content sections: {
                        [
                          exportOptions.includeResponses && 'Responses',
                          exportOptions.includeAnalysis && 'Analysis',
                          exportOptions.includeRecommendations && 'Recommendations',
                          exportOptions.includeMetrics && 'Metrics',
                          exportOptions.includeCharts && 'Charts'
                        ].filter(Boolean).join(', ')
                      }
                    </div>
                  </div>
                </div>

                {/* Export Button */}
                <div className="flex justify-center">
                  <button
                    onClick={handleExport}
                    disabled={isExporting}
                    className="px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
                  >
                    {isExporting ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                        <span>Generating Export...</span>
                      </>
                    ) : (
                      <>
                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        <span>Export Results</span>
                      </>
                    )}
                  </button>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'share' && (
            <div className="space-y-6">
              <div>
                <h3 className="text-lg font-medium text-gray-900 mb-4">Sharing Options</h3>

                {/* Visibility Settings */}
                <div className="mb-6">
                  <label className="block text-sm font-medium text-gray-700 mb-3">Visibility</label>
                  <div className="space-y-3">
                    {[
                      { value: 'private', label: 'Private', description: 'Only you can access', icon: '🔒' },
                      { value: 'link_only', label: 'Link Only', description: 'Anyone with the link can view', icon: '🔗' },
                      { value: 'public', label: 'Public', description: 'Publicly searchable and viewable', icon: '🌐' }
                    ].map((visibility) => (
                      <label key={visibility.value} className="relative">
                        <input
                          type="radio"
                          name="visibility"
                          value={visibility.value}
                          checked={sharingOptions.visibility === visibility.value}
                          onChange={(e) => setSharingOptions(prev => ({ ...prev, visibility: e.target.value as any }))}
                          className="sr-only"
                        />
                        <div className={`flex items-start space-x-3 p-4 border rounded-lg cursor-pointer transition-colors ${
                          sharingOptions.visibility === visibility.value
                            ? 'border-blue-500 bg-blue-50'
                            : 'border-gray-200 hover:border-gray-300'
                        }`}>
                          <span className="text-xl">{visibility.icon}</span>
                          <div className="flex-1">
                            <div className="font-medium text-gray-900">{visibility.label}</div>
                            <div className="text-sm text-gray-500">{visibility.description}</div>
                          </div>
                        </div>
                      </label>
                    ))}
                  </div>
                </div>

                {/* Additional Options */}
                <div className="mb-6">
                  <label className="block text-sm font-medium text-gray-700 mb-3">Additional Options</label>
                  <div className="space-y-4">
                    <div className="flex items-center space-x-3">
                      <input
                        type="checkbox"
                        id="allowComments"
                        checked={sharingOptions.allowComments}
                        onChange={(e) => setSharingOptions(prev => ({ ...prev, allowComments: e.target.checked }))}
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                      />
                      <label htmlFor="allowComments" className="flex-1">
                        <div className="font-medium text-gray-900">Allow Comments</div>
                        <div className="text-sm text-gray-500">Let viewers leave feedback and comments</div>
                      </label>
                    </div>

                    <div className="flex items-center space-x-3">
                      <input
                        type="checkbox"
                        id="includeContact"
                        checked={sharingOptions.includeContact}
                        onChange={(e) => setSharingOptions(prev => ({ ...prev, includeContact: e.target.checked }))}
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                      />
                      <label htmlFor="includeContact" className="flex-1">
                        <div className="font-medium text-gray-900">Include Contact Information</div>
                        <div className="text-sm text-gray-500">Show your email for potential opportunities</div>
                      </label>
                    </div>
                  </div>
                </div>

                {/* Expiration Date */}
                <div className="mb-6">
                  <label className="block text-sm font-medium text-gray-700 mb-2">Expiration Date (Optional)</label>
                  <input
                    type="datetime-local"
                    value={sharingOptions.expirationDate || ''}
                    onChange={(e) => setSharingOptions(prev => ({ ...prev, expirationDate: e.target.value }))}
                    className="block w-full border border-gray-300 rounded-lg px-3 py-2"
                  />
                  <p className="text-sm text-gray-500 mt-1">Leave empty for no expiration</p>
                </div>

                {/* Password Protection */}
                {sharingOptions.visibility === 'link_only' && (
                  <div className="mb-6">
                    <label className="block text-sm font-medium text-gray-700 mb-2">Password Protection (Optional)</label>
                    <input
                      type="password"
                      placeholder="Enter password"
                      value={sharingOptions.password || ''}
                      onChange={(e) => setSharingOptions(prev => ({ ...prev, password: e.target.value }))}
                      className="block w-full border border-gray-300 rounded-lg px-3 py-2"
                    />
                    <p className="text-sm text-gray-500 mt-1">Add password protection for extra security</p>
                  </div>
                )}

                {/* Custom Message */}
                <div className="mb-6">
                  <label className="block text-sm font-medium text-gray-700 mb-2">Custom Message (Optional)</label>
                  <textarea
                    rows={3}
                    placeholder="Add a personal message to accompany your shared results..."
                    value={sharingOptions.customMessage || ''}
                    onChange={(e) => setSharingOptions(prev => ({ ...prev, customMessage: e.target.value }))}
                    className="block w-full border border-gray-300 rounded-lg px-3 py-2"
                  />
                </div>

                {/* Direct Email Sharing */}
                <div className="mb-6">
                  <label className="block text-sm font-medium text-gray-700 mb-2">Send Direct Email (Optional)</label>
                  <input
                    type="text"
                    placeholder="Enter email addresses separated by commas"
                    value={sharingOptions.recipientEmails?.join(', ') || ''}
                    onChange={(e) => setSharingOptions(prev => ({
                      ...prev,
                      recipientEmails: e.target.value.split(',').map(email => email.trim()).filter(Boolean)
                    }))}
                    className="block w-full border border-gray-300 rounded-lg px-3 py-2"
                  />
                  <p className="text-sm text-gray-500 mt-1">We'll send an email with the link and your custom message</p>
                </div>

                {/* Share Button */}
                <div className="flex justify-center">
                  <button
                    onClick={handleShare}
                    disabled={isSharing}
                    className="px-8 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
                  >
                    {isSharing ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                        <span>Creating Share Link...</span>
                      </>
                    ) : (
                      <>
                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
                        </svg>
                        <span>Create Share Link</span>
                      </>
                    )}
                  </button>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'history' && (
            <div className="space-y-6">
              {/* Export History */}
              <div>
                <h3 className="text-lg font-medium text-gray-900 mb-4">Export History</h3>
                {exportHistory.length > 0 ? (
                  <div className="space-y-3">
                    {exportHistory.map((export_) => (
                      <div key={export_.id} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                        <div className="flex items-center space-x-3">
                          <span className="text-2xl">{getFormatIcon(export_.format)}</span>
                          <div>
                            <div className="font-medium text-gray-900">
                              {export_.format.toUpperCase()} Export ({export_.template})
                            </div>
                            <div className="text-sm text-gray-500">
                              {formatDate(export_.date)} • {export_.size} • {export_.downloads} downloads
                            </div>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          <button
                            onClick={() => copyToClipboard(export_.url)}
                            className="px-3 py-1 text-sm text-blue-600 hover:text-blue-800"
                          >
                            Copy Link
                          </button>
                          <a
                            href={export_.url}
                            download
                            className="px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700"
                          >
                            Download
                          </a>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-8 text-gray-500">
                    <svg className="w-12 h-12 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    <p>No exports yet</p>
                  </div>
                )}
              </div>

              {/* Share History */}
              <div>
                <h3 className="text-lg font-medium text-gray-900 mb-4">Share History</h3>
                {shareHistory.length > 0 ? (
                  <div className="space-y-3">
                    {shareHistory.map((share) => (
                      <div key={share.id} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                        <div className="flex items-center space-x-3">
                          <span className="text-2xl">{getVisibilityIcon(share.visibility)}</span>
                          <div>
                            <div className="font-medium text-gray-900">
                              {share.visibility.replace('_', ' ')} Share
                            </div>
                            <div className="text-sm text-gray-500">
                              {formatDate(share.date)} • {share.views} views
                              {share.expires && ` • Expires ${formatDate(share.expires)}`}
                            </div>
                            <div className="text-sm text-blue-600 font-mono">{share.url}</div>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          <button
                            onClick={() => copyToClipboard(share.url)}
                            className="px-3 py-1 text-sm text-blue-600 hover:text-blue-800"
                          >
                            Copy Link
                          </button>
                          <button className="px-3 py-1 text-sm text-red-600 hover:text-red-800">
                            Revoke
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-8 text-gray-500">
                    <svg className="w-12 h-12 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
                    </svg>
                    <p>No shared links yet</p>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Hidden download link for exports */}
      <a ref={exportFileRef} className="hidden" />
    </div>
  );
};

export default InterviewSharingExport;