import React, { useState, useEffect, useRef } from 'react';
import { api } from '../../lib/api';
import {
  ConversationalQuestion,
  InterviewProgress,
  QuestionDifficulty,
  QuestionCategory
} from '../../types/interview';
import DynamicQuestionRenderer, { QuestionResponse } from './DynamicQuestionRenderer';
import LoadingSpinner from '../common/LoadingSpinner';

interface ResponseCollectionSystemProps {
  interviewId: string;
  progress: InterviewProgress;
  onResponseSubmitted?: (response: QuestionResponse) => void;
  onProgressUpdate?: (progress: InterviewProgress) => void;
  disabled?: boolean;
  showAdvancedFeatures?: boolean;
}

interface SubmissionMetadata {
  submissionTime: Date;
  timeSpentOnQuestion: number;
  responseLength: number;
  revisionCount: number;
  confidenceLevel?: number;
  difficultyRating?: number;
  selfAssessment?: string;
}

interface ResponseDraft {
  questionId: string;
  content: any;
  lastSaved: Date;
  autoSaveInterval: NodeJS.Timeout | null;
}

interface ResponseAnalytics {
  averageResponseTime: number;
  responseQuality: 'poor' | 'fair' | 'good' | 'excellent';
  completenessScore: number;
  confidenceScore: number;
  improvementSuggestions: string[];
}

const ResponseCollectionSystem: React.FC<ResponseCollectionSystemProps> = ({
  interviewId,
  progress,
  onResponseSubmitted,
  onProgressUpdate,
  disabled = false,
  showAdvancedFeatures = false
}) => {
  const [currentResponse, setCurrentResponse] = useState<QuestionResponse | null>(null);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [validationErrors, setValidationErrors] = useState<string[]>([]);
  const [draft, setDraft] = useState<ResponseDraft | null>(null);
  const [showMetadata, setShowMetadata] = useState(false);
  const [confidenceLevel, setConfidenceLevel] = useState(3);
  const [difficultyRating, setDifficultyRating] = useState<number | null>(null);
  const [selfAssessment, setSelfAssessment] = useState('');
  const [responseAnalytics, setResponseAnalytics] = useState<ResponseAnalytics | null>(null);
  const [revisionCount, setRevisionCount] = useState(0);
  const [startTime, setStartTime] = useState<Date | null>(null);
  const [showPreview, setShowPreview] = useState(false);

  const questionStartRef = useRef<Date | null>(null);
  const autoSaveTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    if (progress.current_question) {
      setStartTime(new Date());
      questionStartRef.current = new Date();
      setRevisionCount(0);
      setDraft(null);
      setCurrentResponse(null);
      setError(null);
      setValidationErrors([]);
      loadDraft(progress.current_question.question_id);
    }
  }, [progress.current_question?.question_id]);

  useEffect(() => {
    if (currentResponse) {
      scheduleAutoSave();
      analyzeResponse();
    }
  }, [currentResponse]);

  const loadDraft = async (questionId: string) => {
    try {
      // In real implementation, this would load from local storage or API
      const savedDraft = localStorage.getItem(`interview_draft_${interviewId}_${questionId}`);
      if (savedDraft) {
        const draftData = JSON.parse(savedDraft);
        if (Date.now() - new Date(draftData.lastSaved).getTime() < 24 * 60 * 60 * 1000) { // 24 hours
          setDraft(draftData);
        }
      }
    } catch (err) {
      console.error('Failed to load draft:', err);
    }
  };

  const saveDraft = () => {
    if (currentResponse && progress.current_question) {
      const draftData: ResponseDraft = {
        questionId: progress.current_question.question_id,
        content: currentResponse.content,
        lastSaved: new Date(),
        autoSaveInterval: null
      };

      localStorage.setItem(
        `interview_draft_${interviewId}_${progress.current_question.question_id}`,
        JSON.stringify(draftData)
      );
      setDraft(draftData);
    }
  };

  const scheduleAutoSave = () => {
    if (autoSaveTimeoutRef.current) {
      clearTimeout(autoSaveTimeoutRef.current);
    }

    autoSaveTimeoutRef.current = setTimeout(() => {
      saveDraft();
    }, 3000); // Auto-save after 3 seconds of inactivity
  };

  const analyzeResponse = async () => {
    if (!currentResponse || !currentResponse.content) {
      setResponseAnalytics(null);
      return;
    }

    try {
      // Mock analytics - in real implementation, this would use AI
      const responseLength = typeof currentResponse.content === 'string'
        ? currentResponse.content.length
        : JSON.stringify(currentResponse.content).length;

      const wordCount = typeof currentResponse.content === 'string'
        ? currentResponse.content.trim().split(/\s+/).filter(w => w.length > 0).length
        : 0;

      const analytics: ResponseAnalytics = {
        averageResponseTime: currentResponse.metadata?.timeSpent || 0,
        responseQuality: wordCount > 100 ? 'good' : wordCount > 50 ? 'fair' : 'poor',
        completenessScore: Math.min(responseLength / 200, 1) * 100,
        confidenceScore: (currentResponse.metadata?.confidence || 3) * 20,
        improvementSuggestions: []
      };

      if (wordCount < 30) {
        analytics.improvementSuggestions.push('Consider providing more detail in your response');
      }
      if (currentResponse.metadata?.confidence && currentResponse.metadata.confidence < 3) {
        analytics.improvementSuggestions.push('Take time to review and improve your confidence');
      }

      setResponseAnalytics(analytics);
    } catch (err) {
      console.error('Failed to analyze response:', err);
    }
  };

  const validateResponse = (): string[] => {
    const errors: string[] = [];

    if (!currentResponse || !currentResponse.content) {
      errors.push('Response is required');
      return errors;
    }

    if (!progress.current_question) {
      errors.push('No current question found');
      return errors;
    }

    // Type-specific validation
    switch (currentResponse.responseType) {
      case 'text':
        if (typeof currentResponse.content === 'string') {
          if (currentResponse.content.trim().length < 10) {
            errors.push('Response should be at least 10 characters long');
          }
          if (currentResponse.content.length > 5000) {
            errors.push('Response is too long (maximum 5000 characters)');
          }
        }
        break;

      case 'code':
        if (typeof currentResponse.content === 'string') {
          if (currentResponse.content.trim().length < 5) {
            errors.push('Code response seems too short');
          }
        }
        break;

      case 'file_upload':
        if (!currentResponse.content || !currentResponse.content.file) {
          errors.push('Please upload a file');
        }
        break;

      case 'multiple_choice':
        if (!currentResponse.content) {
          errors.push('Please select an option');
        }
        break;

      case 'rating':
        if (typeof currentResponse.content !== 'number' || currentResponse.content < 1) {
          errors.push('Please provide a rating');
        }
        break;
    }

    return errors;
  };

  const handleResponseChange = (response: QuestionResponse) => {
    setCurrentResponse(response);
    setRevisionCount(prev => prev + 1);
    setError(null);

    // Clear validation errors when user starts typing
    if (validationErrors.length > 0) {
      setValidationErrors([]);
    }
  };

  const handleSubmitResponse = async () => {
    if (!progress.current_question || !currentResponse || submitting) {
      return;
    }

    const errors = validateResponse();
    if (errors.length > 0) {
      setValidationErrors(errors);
      return;
    }

    try {
      setSubmitting(true);
      setError(null);

      const timeSpent = questionStartRef.current
        ? Math.floor((new Date().getTime() - questionStartRef.current.getTime()) / 1000)
        : 0;

      const metadata: SubmissionMetadata = {
        submissionTime: new Date(),
        timeSpentOnQuestion: timeSpent,
        responseLength: typeof currentResponse.content === 'string' ? currentResponse.content.length : 0,
        revisionCount,
        confidenceLevel: showAdvancedFeatures ? confidenceLevel : undefined,
        difficultyRating: showAdvancedFeatures ? difficultyRating : undefined,
        selfAssessment: showAdvancedFeatures && selfAssessment ? selfAssessment : undefined
      };

      // Submit to API
      await api.processInterviewAnswer(interviewId, {
        question_id: progress.current_question.question_id,
        answer_text: typeof currentResponse.content === 'string' ? currentResponse.content : JSON.stringify(currentResponse.content),
        response_type: currentResponse.responseType,
        metadata: {
          ...currentResponse.metadata,
          ...metadata
        }
      });

      // Clear draft
      localStorage.removeItem(`interview_draft_${interviewId}_${progress.current_question.question_id}`);

      // Notify parent
      if (onResponseSubmitted) {
        onResponseSubmitted(currentResponse);
      }

      // Reset state
      setCurrentResponse(null);
      setRevisionCount(0);
      setConfidenceLevel(3);
      setDifficultyRating(null);
      setSelfAssessment('');

    } catch (err: any) {
      setError(err.message || 'Failed to submit response');
    } finally {
      setSubmitting(false);
    }
  };

  const handleSkipQuestion = async () => {
    if (!progress.current_question || submitting) {
      return;
    }

    try {
      setSubmitting(true);
      await api.skipInterviewQuestion(interviewId, progress.current_question.question_id);
    } catch (err: any) {
      setError(err.message || 'Failed to skip question');
    } finally {
      setSubmitting(false);
    }
  };

  const handleRestoreDraft = () => {
    if (draft && progress.current_question) {
      const restoredResponse: QuestionResponse = {
        questionId: progress.current_question.question_id,
        responseType: 'text', // Default, will be corrected by renderer
        content: draft.content
      };
      setCurrentResponse(restoredResponse);
      setDraft(null);
    }
  };

  if (!progress.current_question) {
    return (
      <div className="text-center py-8">
        <p className="text-gray-500">No question available</p>
      </div>
    );
  }

  const canSubmit = currentResponse &&
                   currentResponse.content &&
                   validationErrors.length === 0 &&
                   !submitting &&
                   !disabled;

  const canSkip = !progress.current_question.is_required && !submitting && !disabled;

  return (
    <div className="space-y-6">
      {/* Draft Restoration */}
      {draft && !currentResponse && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <div className="flex items-center justify-between">
            <div>
              <h4 className="font-medium text-blue-900">Draft Available</h4>
              <p className="text-sm text-blue-700">
                You have a saved draft from {draft.lastSaved.toLocaleString()}
              </p>
            </div>
            <div className="flex gap-2">
              <button
                onClick={handleRestoreDraft}
                className="px-3 py-1 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700"
              >
                Restore Draft
              </button>
              <button
                onClick={() => setDraft(null)}
                className="px-3 py-1 border border-blue-300 text-blue-700 text-sm rounded-lg hover:bg-blue-100"
              >
                Dismiss
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Question Renderer */}
      <DynamicQuestionRenderer
        question={progress.current_question}
        onResponseChange={handleResponseChange}
        disabled={disabled}
      />

      {/* Response Analytics */}
      {showAdvancedFeatures && responseAnalytics && currentResponse?.content && (
        <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
          <h4 className="font-medium text-gray-900 mb-3">Response Analysis</h4>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-3">
            <div className="text-center">
              <div className="text-lg font-semibold text-gray-900">
                {responseAnalytics.completenessScore.toFixed(0)}%
              </div>
              <div className="text-sm text-gray-600">Completeness</div>
            </div>
            <div className="text-center">
              <div className="text-lg font-semibold text-gray-900 capitalize">
                {responseAnalytics.responseQuality}
              </div>
              <div className="text-sm text-gray-600">Quality</div>
            </div>
            <div className="text-center">
              <div className="text-lg font-semibold text-gray-900">
                {Math.floor(responseAnalytics.averageResponseTime / 60)}m
              </div>
              <div className="text-sm text-gray-600">Time Spent</div>
            </div>
            <div className="text-center">
              <div className="text-lg font-semibold text-gray-900">
                {revisionCount}
              </div>
              <div className="text-sm text-gray-600">Revisions</div>
            </div>
          </div>

          {responseAnalytics.improvementSuggestions.length > 0 && (
            <div className="mt-3">
              <div className="text-sm font-medium text-gray-700 mb-2">Suggestions:</div>
              <ul className="space-y-1">
                {responseAnalytics.improvementSuggestions.map((suggestion, index) => (
                  <li key={index} className="text-sm text-gray-600 flex items-start space-x-2">
                    <span className="text-blue-500 mt-1">•</span>
                    <span>{suggestion}</span>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      )}

      {/* Advanced Metadata */}
      {showAdvancedFeatures && (
        <div className="bg-white border border-gray-200 rounded-lg p-4">
          <button
            onClick={() => setShowMetadata(!showMetadata)}
            className="flex items-center justify-between w-full text-left"
          >
            <span className="font-medium text-gray-900">Advanced Options</span>
            <svg
              className={`w-5 h-5 text-gray-500 transition-transform ${showMetadata ? 'transform rotate-180' : ''}`}
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
            </svg>
          </button>

          {showMetadata && (
            <div className="mt-4 space-y-4">
              {/* Confidence Level */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Confidence Level
                </label>
                <div className="flex items-center space-x-3">
                  <input
                    type="range"
                    min="1"
                    max="5"
                    value={confidenceLevel}
                    onChange={(e) => setConfidenceLevel(parseInt(e.target.value))}
                    className="flex-1"
                  />
                  <span className="text-sm font-medium text-gray-900 min-w-[80px]">
                    {['Very Low', 'Low', 'Medium', 'High', 'Very High'][confidenceLevel - 1]}
                  </span>
                </div>
              </div>

              {/* Difficulty Rating */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  How difficult was this question for you?
                </label>
                <div className="flex space-x-2">
                  {[1, 2, 3, 4, 5].map((rating) => (
                    <button
                      key={rating}
                      onClick={() => setDifficultyRating(rating)}
                      className={`w-8 h-8 rounded-full border-2 flex items-center justify-center text-sm font-medium transition-colors ${
                        difficultyRating === rating
                          ? 'bg-blue-600 border-blue-600 text-white'
                          : 'border-gray-300 text-gray-500 hover:border-blue-300'
                      }`}
                    >
                      {rating}
                    </button>
                  ))}
                </div>
              </div>

              {/* Self Assessment */}
              <div>
                <label htmlFor="self-assessment" className="block text-sm font-medium text-gray-700 mb-2">
                  Self Assessment (Optional)
                </label>
                <textarea
                  id="self-assessment"
                  value={selfAssessment}
                  onChange={(e) => setSelfAssessment(e.target.value)}
                  placeholder="How do you feel about your response? Any additional thoughts?"
                  rows={2}
                  className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
            </div>
          )}
        </div>
      )}

      {/* Validation Errors */}
      {validationErrors.length > 0 && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex items-start space-x-2">
            <svg className="w-5 h-5 text-red-600 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <div>
              <h4 className="font-medium text-red-900">Please fix the following issues:</h4>
              <ul className="mt-1 space-y-1">
                {validationErrors.map((error, index) => (
                  <li key={index} className="text-sm text-red-800">• {error}</li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      )}

      {/* Error Display */}
      {error && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex items-center space-x-2">
            <svg className="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <span className="text-red-800">{error}</span>
          </div>
        </div>
      )}

      {/* Action Buttons */}
      <div className="flex items-center justify-between pt-4 border-t border-gray-200">
        <div className="flex items-center space-x-3">
          {draft && (
            <span className="text-sm text-gray-500">
              Draft saved {new Date(draft.lastSaved).toLocaleTimeString()}
            </span>
          )}
        </div>

        <div className="flex items-center space-x-3">
          {canSkip && (
            <button
              onClick={handleSkipQuestion}
              disabled={submitting}
              className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 disabled:opacity-50"
            >
              Skip Question
            </button>
          )}

          <button
            onClick={handleSubmitResponse}
            disabled={!canSubmit}
            className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
          >
            {submitting && <LoadingSpinner />}
            <span>Submit Response</span>
          </button>
        </div>
      </div>
    </div>
  );
};

export default ResponseCollectionSystem;