import React, { useState, useEffect } from 'react';
import {
  ConversationalQuestion,
  QuestionDifficulty,
  QuestionCategory,
  QuestionType
} from '../../types/interview';

interface DynamicQuestionRendererProps {
  question: ConversationalQuestion;
  onResponseChange: (response: QuestionResponse) => void;
  disabled?: boolean;
  compact?: boolean;
}

export interface QuestionResponse {
  questionId: string;
  responseType: 'text' | 'multiple_choice' | 'rating' | 'code' | 'file_upload';
  content: any;
  metadata?: {
    timeSpent?: number;
    confidence?: number;
    wordCount?: number;
    codeLanguage?: string;
    fileType?: string;
  };
}

interface QuestionOption {
  id: string;
  text: string;
  value: string;
}

interface QuestionValidation {
  required: boolean;
  minLength?: number;
  maxLength?: number;
  pattern?: string;
  customValidator?: (value: any) => string | null;
}

// Extended question interface for different question types
interface ExtendedQuestion extends ConversationalQuestion {
  question_type?: QuestionType;
  options?: QuestionOption[];
  validation?: QuestionValidation;
  placeholder_text?: string;
  max_rating?: number;
  code_language?: string;
  allowed_file_types?: string[];
  max_file_size?: number;
  example_answer?: string;
  hints?: string[];
}

const DynamicQuestionRenderer: React.FC<DynamicQuestionRendererProps> = ({
  question,
  onResponseChange,
  disabled = false,
  compact = false
}) => {
  const extendedQuestion = question as ExtendedQuestion;
  const [response, setResponse] = useState<QuestionResponse>({
    questionId: question.question_id,
    responseType: 'text',
    content: '',
    metadata: {}
  });
  const [showHints, setShowHints] = useState(false);
  const [showExample, setShowExample] = useState(false);
  const [validationError, setValidationError] = useState<string | null>(null);
  const [wordCount, setWordCount] = useState(0);
  const [startTime, setStartTime] = useState<Date>(new Date());

  useEffect(() => {
    setStartTime(new Date());
    // Reset response when question changes
    setResponse({
      questionId: question.question_id,
      responseType: getResponseType(),
      content: getInitialContent(),
      metadata: {}
    });
  }, [question.question_id]);

  useEffect(() => {
    // Update metadata and notify parent
    const updatedResponse = {
      ...response,
      metadata: {
        ...response.metadata,
        timeSpent: Math.floor((new Date().getTime() - startTime.getTime()) / 1000),
        wordCount: typeof response.content === 'string' ? response.content.trim().split(/\s+/).filter(w => w.length > 0).length : 0
      }
    };
    onResponseChange(updatedResponse);
  }, [response.content]);

  const getResponseType = (): QuestionResponse['responseType'] => {
    if (extendedQuestion.question_type === 'multiple_choice') return 'multiple_choice';
    if (extendedQuestion.question_type === 'rating') return 'rating';
    if (extendedQuestion.question_type === 'code') return 'code';
    if (extendedQuestion.question_type === 'file_upload') return 'file_upload';
    return 'text';
  };

  const getInitialContent = () => {
    switch (getResponseType()) {
      case 'multiple_choice':
        return '';
      case 'rating':
        return Math.ceil((extendedQuestion.max_rating || 5) / 2);
      case 'code':
        return '';
      case 'file_upload':
        return null;
      default:
        return '';
    }
  };

  const validateResponse = (value: any): string | null => {
    const validation = extendedQuestion.validation;
    if (!validation) return null;

    if (validation.required && (!value || (typeof value === 'string' && !value.trim()))) {
      return 'This field is required';
    }

    if (typeof value === 'string') {
      if (validation.minLength && value.trim().length < validation.minLength) {
        return `Minimum length is ${validation.minLength} characters`;
      }
      if (validation.maxLength && value.length > validation.maxLength) {
        return `Maximum length is ${validation.maxLength} characters`;
      }
      if (validation.pattern && !new RegExp(validation.pattern).test(value)) {
        return 'Please enter a valid format';
      }
    }

    if (validation.customValidator) {
      return validation.customValidator(value);
    }

    return null;
  };

  const handleContentChange = (newContent: any) => {
    const error = validateResponse(newContent);
    setValidationError(error);

    setResponse(prev => ({
      ...prev,
      content: newContent
    }));
  };

  const getDifficultyColor = (difficulty: QuestionDifficulty) => {
    const colors = {
      [QuestionDifficulty.EASY]: 'text-green-600 bg-green-50 border-green-200',
      [QuestionDifficulty.MEDIUM]: 'text-yellow-600 bg-yellow-50 border-yellow-200',
      [QuestionDifficulty.HARD]: 'text-red-600 bg-red-50 border-red-200'
    };
    return colors[difficulty] || 'text-gray-600 bg-gray-50 border-gray-200';
  };

  const getCategoryIcon = (category: QuestionCategory) => {
    const icons = {
      [QuestionCategory.TECHNICAL]: '💻',
      [QuestionCategory.BEHAVIORAL]: '🤝',
      [QuestionCategory.SITUATIONAL]: '📋',
      [QuestionCategory.SYSTEM_DESIGN]: '🏗️'
    };
    return icons[category] || '❓';
  };

  const formatExpectedDuration = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    return minutes > 0 ? `~${minutes} min` : `~${seconds}s`;
  };

  const renderTextResponse = () => (
    <div className="space-y-3">
      <textarea
        value={response.content}
        onChange={(e) => handleContentChange(e.target.value)}
        placeholder={extendedQuestion.placeholder_text || "Type your response here..."}
        disabled={disabled}
        className={`w-full border rounded-lg px-3 py-2 focus:ring-blue-500 focus:border-blue-500 resize-none ${
          disabled ? 'bg-gray-50 text-gray-500' : 'bg-white'
        } ${validationError ? 'border-red-300' : 'border-gray-300'}`}
        rows={compact ? 3 : 5}
      />

      {/* Word count and character limit */}
      <div className="flex justify-between text-sm text-gray-500">
        <span>
          {typeof response.content === 'string' ? response.content.trim().split(/\s+/).filter(w => w.length > 0).length : 0} words
        </span>
        {extendedQuestion.validation?.maxLength && (
          <span>
            {typeof response.content === 'string' ? response.content.length : 0} / {extendedQuestion.validation.maxLength} characters
          </span>
        )}
      </div>
    </div>
  );

  const renderMultipleChoiceResponse = () => (
    <div className="space-y-3">
      {extendedQuestion.options?.map((option) => (
        <label key={option.id} className="flex items-center space-x-3 cursor-pointer">
          <input
            type="radio"
            name={`question-${question.question_id}`}
            value={option.value}
            checked={response.content === option.value}
            onChange={(e) => handleContentChange(e.target.value)}
            disabled={disabled}
            className="text-blue-600 focus:ring-blue-500"
          />
          <span className={`${disabled ? 'text-gray-500' : 'text-gray-900'}`}>
            {option.text}
          </span>
        </label>
      ))}
    </div>
  );

  const renderRatingResponse = () => {
    const maxRating = extendedQuestion.max_rating || 5;

    return (
      <div className="space-y-3">
        <div className="flex items-center space-x-2">
          {Array.from({ length: maxRating }, (_, i) => i + 1).map((rating) => (
            <button
              key={rating}
              onClick={() => !disabled && handleContentChange(rating)}
              disabled={disabled}
              className={`w-10 h-10 rounded-full border-2 flex items-center justify-center font-medium transition-colors ${
                response.content >= rating
                  ? 'bg-blue-600 border-blue-600 text-white'
                  : 'border-gray-300 text-gray-500 hover:border-blue-300'
              } ${disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}
            >
              {rating}
            </button>
          ))}
        </div>
        <div className="text-sm text-gray-600">
          Click to rate from 1 (lowest) to {maxRating} (highest)
        </div>
      </div>
    );
  };

  const renderCodeResponse = () => (
    <div className="space-y-3">
      <div className="flex items-center justify-between">
        <span className="text-sm text-gray-700">Code Response</span>
        {extendedQuestion.code_language && (
          <span className="px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded">
            {extendedQuestion.code_language}
          </span>
        )}
      </div>

      <textarea
        value={response.content}
        onChange={(e) => handleContentChange(e.target.value)}
        placeholder={extendedQuestion.placeholder_text || "Write your code here..."}
        disabled={disabled}
        className={`w-full border rounded-lg px-3 py-2 font-mono text-sm focus:ring-blue-500 focus:border-blue-500 resize-none ${
          disabled ? 'bg-gray-50 text-gray-500' : 'bg-gray-900 text-green-400'
        } ${validationError ? 'border-red-300' : 'border-gray-300'}`}
        rows={compact ? 6 : 10}
      />

      <div className="text-sm text-gray-500">
        Lines: {typeof response.content === 'string' ? response.content.split('\n').length : 0}
      </div>
    </div>
  );

  const renderFileUploadResponse = () => (
    <div className="space-y-3">
      <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
        <input
          type="file"
          onChange={(e) => {
            const file = e.target.files?.[0];
            if (file) {
              handleContentChange({
                file,
                name: file.name,
                size: file.size,
                type: file.type
              });
            }
          }}
          accept={extendedQuestion.allowed_file_types?.join(',')}
          disabled={disabled}
          className="hidden"
          id={`file-upload-${question.question_id}`}
        />

        {response.content ? (
          <div className="space-y-2">
            <div className="flex items-center justify-center space-x-2">
              <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              <span className="text-sm font-medium text-gray-900">
                {response.content.name}
              </span>
            </div>
            <div className="text-xs text-gray-500">
              {(response.content.size / 1024).toFixed(1)} KB
            </div>
            <button
              onClick={() => handleContentChange(null)}
              disabled={disabled}
              className="text-sm text-red-600 hover:text-red-800"
            >
              Remove file
            </button>
          </div>
        ) : (
          <label htmlFor={`file-upload-${question.question_id}`} className={`cursor-pointer ${disabled ? 'opacity-50' : ''}`}>
            <div className="space-y-2">
              <svg className="w-8 h-8 text-gray-400 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
              </svg>
              <div className="text-sm text-gray-600">
                Click to upload a file
              </div>
              {extendedQuestion.allowed_file_types && (
                <div className="text-xs text-gray-500">
                  Allowed: {extendedQuestion.allowed_file_types.join(', ')}
                </div>
              )}
              {extendedQuestion.max_file_size && (
                <div className="text-xs text-gray-500">
                  Max size: {(extendedQuestion.max_file_size / 1024 / 1024).toFixed(1)} MB
                </div>
              )}
            </div>
          </label>
        )}
      </div>
    </div>
  );

  const renderResponseInput = () => {
    switch (response.responseType) {
      case 'multiple_choice':
        return renderMultipleChoiceResponse();
      case 'rating':
        return renderRatingResponse();
      case 'code':
        return renderCodeResponse();
      case 'file_upload':
        return renderFileUploadResponse();
      default:
        return renderTextResponse();
    }
  };

  return (
    <div className={`bg-white border border-gray-200 rounded-lg ${compact ? 'p-4' : 'p-6'}`}>
      {/* Question Header */}
      <div className="mb-4">
        <div className="flex items-start justify-between mb-3">
          <div className="flex items-center space-x-2">
            <span className="text-lg">{getCategoryIcon(question.category)}</span>
            <span className="font-medium text-gray-700 capitalize">
              {question.category.replace('_', ' ')}
            </span>
            {question.is_required && (
              <span className="px-2 py-1 bg-red-100 text-red-700 text-xs rounded-full">
                Required
              </span>
            )}
            <span className={`px-2 py-1 text-xs rounded-full border ${getDifficultyColor(question.difficulty)}`}>
              {question.difficulty}
            </span>
          </div>

          <div className="text-right text-sm text-gray-500">
            {question.expected_duration && formatExpectedDuration(question.expected_duration)}
            {question.points && (
              <div className="font-medium text-gray-700">
                {question.points} points
              </div>
            )}
          </div>
        </div>

        {/* Question Text */}
        <div className="text-gray-900 leading-relaxed mb-3">
          {question.question_text}
        </div>

        {/* Context */}
        {question.context && (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-3 mb-3">
            <div className="flex items-start space-x-2">
              <svg className="w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <div>
                <div className="font-medium text-blue-900 text-sm mb-1">Context</div>
                <div className="text-blue-800 text-sm">{question.context}</div>
              </div>
            </div>
          </div>
        )}

        {/* Helper Actions */}
        <div className="flex items-center space-x-4 text-sm">
          {extendedQuestion.hints && (
            <button
              onClick={() => setShowHints(!showHints)}
              className="text-blue-600 hover:text-blue-800 flex items-center space-x-1"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
              </svg>
              <span>{showHints ? 'Hide' : 'Show'} Hints</span>
            </button>
          )}

          {extendedQuestion.example_answer && (
            <button
              onClick={() => setShowExample(!showExample)}
              className="text-green-600 hover:text-green-800 flex items-center space-x-1"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
              </svg>
              <span>{showExample ? 'Hide' : 'Show'} Example</span>
            </button>
          )}
        </div>
      </div>

      {/* Hints */}
      {showHints && extendedQuestion.hints && (
        <div className="mb-4 bg-yellow-50 border border-yellow-200 rounded-lg p-3">
          <div className="font-medium text-yellow-900 text-sm mb-2">💡 Hints</div>
          <ul className="space-y-1">
            {extendedQuestion.hints.map((hint, index) => (
              <li key={index} className="text-yellow-800 text-sm flex items-start space-x-2">
                <span className="text-yellow-600 mt-1">•</span>
                <span>{hint}</span>
              </li>
            ))}
          </ul>
        </div>
      )}

      {/* Example Answer */}
      {showExample && extendedQuestion.example_answer && (
        <div className="mb-4 bg-green-50 border border-green-200 rounded-lg p-3">
          <div className="font-medium text-green-900 text-sm mb-2">📝 Example Answer</div>
          <div className="text-green-800 text-sm italic">
            {extendedQuestion.example_answer}
          </div>
        </div>
      )}

      {/* Response Input */}
      <div className="space-y-3">
        {renderResponseInput()}

        {/* Validation Error */}
        {validationError && (
          <div className="text-red-600 text-sm flex items-center space-x-1">
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <span>{validationError}</span>
          </div>
        )}
      </div>
    </div>
  );
};

export default DynamicQuestionRenderer;