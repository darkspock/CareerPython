import React, { useState, useEffect } from 'react';
import { api } from '../../lib/api';
import {
  Interview,
  InterviewType,
  QuestionCategory,
  QuestionDifficulty
} from '../../types/interview';

interface PersonalizedRecommendation {
  id: string;
  type: 'skill_improvement' | 'interview_practice' | 'career_opportunity' | 'learning_resource' | 'networking' | 'certification';
  priority: 'critical' | 'high' | 'medium' | 'low';
  title: string;
  description: string;
  reasoning: string;
  actionSteps: Array<{
    step: string;
    description: string;
    timeEstimate: string;
    resources?: Array<{
      type: 'article' | 'course' | 'book' | 'video' | 'practice' | 'tool';
      title: string;
      url?: string;
      description: string;
      cost?: 'free' | 'paid' | 'subscription';
      difficulty?: 'beginner' | 'intermediate' | 'advanced';
    }>;
  }>;
  expectedOutcome: string;
  timeFrame: string;
  effort: 'low' | 'medium' | 'high';
  impact: number; // 1-10 scale
  prerequisites?: string[];
  tags: string[];
  progressTracking: {
    milestones: Array<{
      title: string;
      description: string;
      dueDate?: string;
      completed: boolean;
    }>;
    metrics: Array<{
      name: string;
      currentValue: number;
      targetValue: number;
      unit: string;
    }>;
  };
}

interface CareerPathway {
  id: string;
  title: string;
  description: string;
  matchScore: number;
  timeline: string;
  roles: Array<{
    title: string;
    level: 'entry' | 'mid' | 'senior' | 'lead' | 'executive';
    timeToReach: string;
    requiredSkills: string[];
    averageSalary?: {
      min: number;
      max: number;
      currency: string;
    };
  }>;
  skillGaps: Array<{
    skill: string;
    currentLevel: number;
    requiredLevel: number;
    priority: 'critical' | 'important' | 'nice-to-have';
  }>;
  nextSteps: string[];
}

interface InterviewOpportunity {
  id: string;
  type: 'practice_interview' | 'mock_interview' | 'real_interview' | 'assessment';
  title: string;
  company?: string;
  description: string;
  matchScore: number;
  difficulty: QuestionDifficulty;
  categories: QuestionCategory[];
  estimatedDuration: number;
  preparationTime: number;
  benefits: string[];
  requirements: string[];
  schedulingInfo?: {
    availableTimes: string[];
    deadline?: string;
    cost?: number;
  };
}

interface InterviewRecommendationSystemProps {
  candidateId?: string;
  interviewId?: string;
  showCareerPaths?: boolean;
  showOpportunities?: boolean;
  showProgressTracking?: boolean;
}

const InterviewRecommendationSystem: React.FC<InterviewRecommendationSystemProps> = ({
  candidateId,
  interviewId,
  showCareerPaths = true,
  showOpportunities = true,
  showProgressTracking = true
}) => {
  const [recommendations, setRecommendations] = useState<PersonalizedRecommendation[]>([]);
  const [careerPaths, setCareerPaths] = useState<CareerPathway[]>([]);
  const [opportunities, setOpportunities] = useState<InterviewOpportunity[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<'recommendations' | 'career_paths' | 'opportunities'>('recommendations');
  const [selectedRecommendation, setSelectedRecommendation] = useState<string | null>(null);
  const [completedMilestones, setCompletedMilestones] = useState<Set<string>>(new Set());
  const [filterPriority, setFilterPriority] = useState<string>('all');
  const [filterType, setFilterType] = useState<string>('all');

  useEffect(() => {
    loadRecommendations();
  }, [candidateId, interviewId]);

  const loadRecommendations = async () => {
    try {
      setLoading(true);
      setError(null);

      // In real implementation, this would fetch from API based on interview performance
      // Mock comprehensive recommendation data
      const mockRecommendations: PersonalizedRecommendation[] = [
        {
          id: 'rec-1',
          type: 'skill_improvement',
          priority: 'critical',
          title: 'Master System Design Fundamentals',
          description: 'Your system design responses show good high-level thinking but lack depth in scalability and security considerations.',
          reasoning: 'You scored 6.8/10 in system design questions, with particular weaknesses in distributed systems and security architecture. This is critical for senior-level positions.',
          actionSteps: [
            {
              step: 'Study Distributed Systems Fundamentals',
              description: 'Learn about consistency models, partitioning, and replication strategies',
              timeEstimate: '2-3 weeks',
              resources: [
                {
                  type: 'book',
                  title: 'Designing Data-Intensive Applications',
                  description: 'Comprehensive guide to distributed systems concepts',
                  cost: 'paid',
                  difficulty: 'intermediate'
                },
                {
                  type: 'course',
                  title: 'MIT 6.824: Distributed Systems',
                  url: 'https://pdos.csail.mit.edu/6.824/',
                  description: 'Free MIT course with lectures and labs',
                  cost: 'free',
                  difficulty: 'advanced'
                }
              ]
            },
            {
              step: 'Practice System Design Problems',
              description: 'Work through common system design interview questions',
              timeEstimate: '3-4 weeks',
              resources: [
                {
                  type: 'practice',
                  title: 'System Design Interview Questions',
                  description: 'Practice with real interview scenarios',
                  cost: 'free',
                  difficulty: 'intermediate'
                }
              ]
            },
            {
              step: 'Build a Distributed System Project',
              description: 'Implement a small distributed system to solidify concepts',
              timeEstimate: '4-6 weeks'
            }
          ],
          expectedOutcome: 'Improve system design interview performance by 2-3 points, qualify for senior engineering roles',
          timeFrame: '8-12 weeks',
          effort: 'high',
          impact: 9,
          prerequisites: ['Basic understanding of databases', 'Network programming knowledge'],
          tags: ['system-design', 'distributed-systems', 'scalability', 'architecture'],
          progressTracking: {
            milestones: [
              {
                title: 'Complete Distributed Systems Fundamentals',
                description: 'Finish reading key chapters and understand core concepts',
                dueDate: '2024-02-15',
                completed: false
              },
              {
                title: 'Solve 10 System Design Problems',
                description: 'Practice with common interview scenarios',
                dueDate: '2024-03-01',
                completed: false
              },
              {
                title: 'Complete Distributed System Project',
                description: 'Build and deploy a working distributed application',
                dueDate: '2024-03-15',
                completed: false
              }
            ],
            metrics: [
              { name: 'System Design Score', currentValue: 6.8, targetValue: 8.5, unit: 'points' },
              { name: 'Problems Solved', currentValue: 0, targetValue: 10, unit: 'problems' },
              { name: 'Concepts Mastered', currentValue:- 12, targetValue: 25, unit: 'concepts' }
            ]
          }
        },
        {
          id: 'rec-2',
          type: 'interview_practice',
          priority: 'high',
          title: 'Improve Behavioral Interview Responses',
          description: 'Your behavioral responses lack specific examples and quantified impact.',
          reasoning: 'Scored 7.1/10 in behavioral questions. Responses were clear but missed the STAR structure and specific metrics.',
          actionSteps: [
            {
              step: 'Master the STAR Method',
              description: 'Structure all behavioral responses using Situation, Task, Action, Result format',
              timeEstimate: '1 week',
              resources: [
                {
                  type: 'video',
                  title: 'STAR Method Interview Technique',
                  description: 'Learn to structure behavioral responses effectively',
                  cost: 'free',
                  difficulty: 'beginner'
                }
              ]
            },
            {
              step: 'Prepare 10 Detailed Stories',
              description: 'Document 10 professional experiences with quantified results',
              timeEstimate: '2 weeks'
            },
            {
              step: 'Practice with Mock Interviews',
              description: 'Schedule 5 behavioral mock interviews to refine delivery',
              timeEstimate: '2 weeks'
            }
          ],
          expectedOutcome: 'Improve behavioral interview scores to 8.5+/10, better storytelling ability',
          timeFrame: '4-5 weeks',
          effort: 'medium',
          impact: 7,
          tags: ['behavioral-interviews', 'storytelling', 'communication', 'leadership'],
          progressTracking: {
            milestones: [
              {
                title: 'Document 10 STAR Stories',
                description: 'Write detailed stories covering various behavioral competencies',
                dueDate: '2024-02-10',
                completed: false
              },
              {
                title: 'Complete 5 Mock Interviews',
                description: 'Practice behavioral questions with feedback',
                dueDate: '2024-02-20',
                completed: false
              }
            ],
            metrics: [
              { name: 'Behavioral Score', currentValue: 7.1, targetValue: 8.5, unit: 'points' },
              { name: 'Stories Prepared', currentValue: 0, targetValue: 10, unit: 'stories' },
              { name: 'Mock Interviews', currentValue: 0, targetValue: 5, unit: 'interviews' }
            ]
          }
        },
        {
          id: 'rec-3',
          type: 'career_opportunity',
          priority: 'medium',
          title: 'Target Senior Full-Stack Developer Roles',
          description: 'Your technical skills align well with senior full-stack positions at growth-stage companies.',
          reasoning: 'Strong performance in JavaScript (8.7/10) and algorithms (8.8/10) suggest readiness for senior roles.',
          actionSteps: [
            {
              step: 'Update Resume for Senior Roles',
              description: 'Highlight leadership experience and architectural decisions',
              timeEstimate: '1 week'
            },
            {
              step: 'Network with Senior Engineers',
              description: 'Connect with professionals in target companies',
              timeEstimate: '2-3 weeks'
            },
            {
              step: 'Apply to Target Companies',
              description: 'Focus on 10-15 companies with strong engineering cultures',
              timeEstimate: '4-6 weeks'
            }
          ],
          expectedOutcome: 'Land senior full-stack role with 20-30% salary increase',
          timeFrame: '8-12 weeks',
          effort: 'medium',
          impact: 8,
          tags: ['career-growth', 'job-search', 'senior-role', 'full-stack'],
          progressTracking: {
            milestones: [
              {
                title: 'Resume Updated',
                description: 'Tailor resume for senior positions',
                completed: false
              },
              {
                title: 'Network Contacts Made',
                description: 'Connect with 20+ professionals',
                completed: false
              },
              {
                title: 'Applications Submitted',
                description: 'Apply to 15 target companies',
                completed: false
              }
            ],
            metrics: [
              { name: 'Applications Sent', currentValue: 0, targetValue: 15, unit: 'applications' },
              { name: 'Network Connections', currentValue: 0, targetValue: 20, unit: 'connections' },
              { name: 'Interview Invites', currentValue: 0, targetValue: 5, unit: 'invites' }
            ]
          }
        },
        {
          id: 'rec-4',
          type: 'certification',
          priority: 'low',
          title: 'AWS Solutions Architect Certification',
          description: 'Complement your system design skills with cloud architecture expertise.',
          reasoning: 'Cloud architecture knowledge gap identified. AWS certification would strengthen your profile for senior roles.',
          actionSteps: [
            {
              step: 'Study AWS Fundamentals',
              description: 'Learn core AWS services and architecture patterns',
              timeEstimate: '4-6 weeks',
              resources: [
                {
                  type: 'course',
                  title: 'AWS Solutions Architect Course',
                  description: 'Comprehensive preparation for the certification',
                  cost: 'paid',
                  difficulty: 'intermediate'
                }
              ]
            },
            {
              step: 'Take Practice Exams',
              description: 'Assess readiness with multiple practice tests',
              timeEstimate: '2 weeks'
            },
            {
              step: 'Schedule and Take Exam',
              description: 'Book and complete AWS Solutions Architect exam',
              timeEstimate: '1 week'
            }
          ],
          expectedOutcome: 'AWS certification, improved cloud architecture knowledge',
          timeFrame: '8-10 weeks',
          effort: 'medium',
          impact: 6,
          tags: ['certification', 'aws', 'cloud-architecture', 'skills'],
          progressTracking: {
            milestones: [
              {
                title: 'Complete AWS Fundamentals',
                description: 'Finish foundational AWS learning',
                completed: false
              },
              {
                title: 'Pass Practice Exams',
                description: 'Score 80%+ on practice tests',
                completed: false
              },
              {
                title: 'Earn AWS Certification',
                description: 'Successfully pass the certification exam',
                completed: false
              }
            ],
            metrics: [
              { name: 'Study Hours', currentValue: 0, targetValue: 80, unit: 'hours' },
              { name: 'Practice Exam Score', currentValue: 0, targetValue: 85, unit: 'percentage' }
            ]
          }
        }
      ];

      const mockCareerPaths: CareerPathway[] = [
        {
          id: 'path-1',
          title: 'Senior Full-Stack Engineer → Technical Lead',
          description: 'Progress from senior individual contributor to team leadership role',
          matchScore: 87,
          timeline: '18-24 months',
          roles: [
            {
              title: 'Senior Full-Stack Engineer',
              level: 'senior',
              timeToReach: 'Ready now',
              requiredSkills: ['JavaScript', 'React', 'Node.js', 'System Design'],
              averageSalary: { min: 120000, max: 160000, currency: 'USD' }
            },
            {
              title: 'Staff Engineer',
              level: 'lead',
              timeToReach: '12-18 months',
              requiredSkills: ['Technical Leadership', 'Mentoring', 'Architecture Design', 'Cross-team Collaboration'],
              averageSalary: { min: 160000, max: 200000, currency: 'USD' }
            },
            {
              title: 'Technical Lead / Engineering Manager',
              level: 'lead',
              timeToReach: '18-24 months',
              requiredSkills: ['People Management', 'Strategic Planning', 'Stakeholder Communication', 'Technical Vision'],
              averageSalary: { min: 180000, max: 230000, currency: 'USD' }
            }
          ],
          skillGaps: [
            { skill: 'Technical Leadership', currentLevel: 6.5, requiredLevel: 8.0, priority: 'critical' },
            { skill: 'System Architecture', currentLevel: 7.0, requiredLevel: 8.5, priority: 'important' },
            { skill: 'Mentoring', currentLevel: 5.5, requiredLevel: 7.5, priority: 'important' },
            { skill: 'Cross-team Collaboration', currentLevel: 7.2, requiredLevel: 8.0, priority: 'nice-to-have' }
          ],
          nextSteps: [
            'Start leading technical initiatives in current role',
            'Mentor junior developers',
            'Participate in architecture discussions',
            'Develop presentation and communication skills',
            'Build relationships across engineering teams'
          ]
        },
        {
          id: 'path-2',
          title: 'Full-Stack Engineer → Product Engineer',
          description: 'Transition to product-focused engineering with user impact emphasis',
          matchScore: 73,
          timeline: '12-18 months',
          roles: [
            {
              title: 'Product Engineer',
              level: 'senior',
              timeToReach: '6-12 months',
              requiredSkills: ['Product Thinking', 'User Experience', 'A/B Testing', 'Analytics'],
              averageSalary: { min: 130000, max: 170000, currency: 'USD' }
            },
            {
              title: 'Senior Product Engineer',
              level: 'senior',
              timeToReach: '12-18 months',
              requiredSkills: ['Product Strategy', 'User Research', 'Growth Engineering', 'Data Analysis'],
              averageSalary: { min: 150000, max: 190000, currency: 'USD' }
            }
          ],
          skillGaps: [
            { skill: 'Product Thinking', currentLevel: 5.0, requiredLevel: 7.5, priority: 'critical' },
            { skill: 'User Experience Design', currentLevel: 4.5, requiredLevel: 7.0, priority: 'critical' },
            { skill: 'A/B Testing', currentLevel: 3.0, requiredLevel: 6.5, priority: 'important' },
            { skill: 'Data Analysis', currentLevel: 6.0, requiredLevel: 7.5, priority: 'important' }
          ],
          nextSteps: [
            'Learn product management fundamentals',
            'Study user experience principles',
            'Collaborate closely with product team',
            'Implement analytics and A/B testing',
            'Focus on user-facing features'
          ]
        }
      ];

      const mockOpportunities: InterviewOpportunity[] = [
        {
          id: 'opp-1',
          type: 'practice_interview',
          title: 'System Design Mock Interview',
          description: 'Practice system design interviews with a senior engineer from FAANG company',
          matchScore: 92,
          difficulty: QuestionDifficulty.HARD,
          categories: [QuestionCategory.SYSTEM_DESIGN, QuestionCategory.TECHNICAL],
          estimatedDuration: 60,
          preparationTime: 120,
          benefits: [
            'Feedback from experienced interviewer',
            'Practice with real interview scenarios',
            'Identify specific areas for improvement',
            'Build confidence for actual interviews'
          ],
          requirements: [
            'Basic understanding of distributed systems',
            'Familiarity with common system design patterns',
            'Ability to communicate technical concepts clearly'
          ],
          schedulingInfo: {
            availableTimes: ['2024-02-05T14:00:00Z', '2024-02-06T16:00:00Z', '2024-02-07T10:00:00Z'],
            cost: 50
          }
        },
        {
          id: 'opp-2',
          type: 'real_interview',
          title: 'Senior Full-Stack Engineer - TechCorp',
          company: 'TechCorp',
          description: 'Senior engineering role at a fast-growing SaaS company',
          matchScore: 85,
          difficulty: QuestionDifficulty.MEDIUM,
          categories: [QuestionCategory.TECHNICAL, QuestionCategory.BEHAVIORAL, QuestionCategory.SYSTEM_DESIGN],
          estimatedDuration: 180,
          preparationTime: 480,
          benefits: [
            'Competitive salary and equity',
            'Strong engineering culture',
            'Growth opportunities',
            'Remote-friendly environment'
          ],
          requirements: [
            '5+ years full-stack development experience',
            'Strong JavaScript/React skills',
            'System design knowledge',
            'Leadership experience preferred'
          ],
          schedulingInfo: {
            availableTimes: ['2024-02-10T09:00:00Z', '2024-02-12T14:00:00Z'],
            deadline: '2024-02-08T23:59:59Z'
          }
        },
        {
          id: 'opp-3',
          type: 'assessment',
          title: 'Technical Skills Assessment',
          description: 'Comprehensive technical assessment covering algorithms, system design, and coding',
          matchScore: 78,
          difficulty: QuestionDifficulty.MEDIUM,
          categories: [QuestionCategory.TECHNICAL],
          estimatedDuration: 120,
          preparationTime: 240,
          benefits: [
            'Get objective assessment of current skills',
            'Receive detailed feedback report',
            'Identify specific improvement areas',
            'Track progress over time'
          ],
          requirements: [
            'Intermediate programming skills',
            'Basic system design knowledge'
          ],
          schedulingInfo: {
            availableTimes: ['Available anytime'],
            cost: 0
          }
        }
      ];

      setRecommendations(mockRecommendations);
      setCareerPaths(mockCareerPaths);
      setOpportunities(mockOpportunities);

    } catch (err: any) {
      setError(err.message || 'Failed to load recommendations');
    } finally {
      setLoading(false);
    }
  };

  const toggleMilestone = (recommendationId: string, milestoneIndex: number) => {
    const milestoneKey = `${recommendationId}-${milestoneIndex}`;
    setCompletedMilestones(prev => {
      const newSet = new Set(prev);
      if (newSet.has(milestoneKey)) {
        newSet.delete(milestoneKey);
      } else {
        newSet.add(milestoneKey);
      }
      return newSet;
    });

    // Update the milestone in state
    setRecommendations(prev => prev.map(rec => {
      if (rec.id === recommendationId) {
        const updatedMilestones = [...rec.progressTracking.milestones];
        updatedMilestones[milestoneIndex] = {
          ...updatedMilestones[milestoneIndex],
          completed: !updatedMilestones[milestoneIndex].completed
        };
        return {
          ...rec,
          progressTracking: {
            ...rec.progressTracking,
            milestones: updatedMilestones
          }
        };
      }
      return rec;
    }));
  };

  const getFilteredRecommendations = () => {
    return recommendations.filter(rec => {
      const priorityMatch = filterPriority === 'all' || rec.priority === filterPriority;
      const typeMatch = filterType === 'all' || rec.type === filterType;
      return priorityMatch && typeMatch;
    });
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'critical': return 'bg-red-100 text-red-800';
      case 'high': return 'bg-orange-100 text-orange-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-blue-100 text-blue-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getEffortColor = (effort: string) => {
    switch (effort) {
      case 'high': return 'bg-red-50 text-red-700';
      case 'medium': return 'bg-yellow-50 text-yellow-700';
      case 'low': return 'bg-green-50 text-green-700';
      default: return 'bg-gray-50 text-gray-700';
    }
  };

  const formatCurrency = (amount: number, currency: string) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: currency,
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(amount);
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-lg p-4">
        <div className="flex items-center space-x-2">
          <svg className="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <span className="text-red-800">{error}</span>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto space-y-6">
      {/* Header */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">Personalized Recommendations</h2>
        <p className="text-gray-600">
          AI-powered insights and next steps based on your interview performance and career goals
        </p>
      </div>

      {/* Tab Navigation */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
        <div className="border-b border-gray-200">
          <nav className="-mb-px flex space-x-8 px-6">
            {[
              { id: 'recommendations', name: 'Recommendations', icon: '💡', count: recommendations.length },
              { id: 'career_paths', name: 'Career Paths', icon: '🚀', count: careerPaths.length },
              { id: 'opportunities', name: 'Opportunities', icon: '🎯', count: opportunities.length }
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id as any)}
                className={`whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm flex items-center gap-2 ${
                  activeTab === tab.id
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <span>{tab.icon}</span>
                {tab.name}
                <span className="bg-gray-100 text-gray-600 px-2 py-0.5 rounded-full text-xs">
                  {tab.count}
                </span>
              </button>
            ))}
          </nav>
        </div>

        <div className="p-6">
          {activeTab === 'recommendations' && (
            <div className="space-y-6">
              {/* Filters */}
              <div className="flex flex-wrap gap-4 items-center">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Priority:</label>
                  <select
                    value={filterPriority}
                    onChange={(e) => setFilterPriority(e.target.value)}
                    className="border border-gray-300 rounded-lg px-3 py-2 text-sm"
                  >
                    <option value="all">All priorities</option>
                    <option value="critical">Critical</option>
                    <option value="high">High</option>
                    <option value="medium">Medium</option>
                    <option value="low">Low</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Type:</label>
                  <select
                    value={filterType}
                    onChange={(e) => setFilterType(e.target.value)}
                    className="border border-gray-300 rounded-lg px-3 py-2 text-sm"
                  >
                    <option value="all">All types</option>
                    <option value="skill_improvement">Skill Improvement</option>
                    <option value="interview_practice">Interview Practice</option>
                    <option value="career_opportunity">Career Opportunity</option>
                    <option value="certification">Certification</option>
                  </select>
                </div>
              </div>

              {/* Recommendations */}
              <div className="space-y-6">
                {getFilteredRecommendations().map((recommendation) => (
                  <div
                    key={recommendation.id}
                    className={`border rounded-lg overflow-hidden ${
                      selectedRecommendation === recommendation.id ? 'border-blue-500' : 'border-gray-200'
                    }`}
                  >
                    <div className="p-6">
                      <div className="flex items-start justify-between mb-4">
                        <div className="flex-1">
                          <div className="flex items-center space-x-3 mb-2">
                            <span className={`px-2 py-1 rounded text-xs font-medium ${getPriorityColor(recommendation.priority)}`}>
                              {recommendation.priority}
                            </span>
                            <span className="px-2 py-1 bg-gray-100 text-gray-800 text-xs font-medium rounded">
                              {recommendation.type.replace('_', ' ')}
                            </span>
                            <span className={`px-2 py-1 rounded text-xs font-medium ${getEffortColor(recommendation.effort)}`}>
                              {recommendation.effort} effort
                            </span>
                          </div>
                          <h3 className="text-xl font-semibold text-gray-900 mb-2">
                            {recommendation.title}
                          </h3>
                          <p className="text-gray-600 mb-2">{recommendation.description}</p>
                          <p className="text-sm text-gray-500">{recommendation.reasoning}</p>
                        </div>

                        <div className="text-right ml-6">
                          <div className="text-2xl font-bold text-blue-600 mb-1">
                            {recommendation.impact}/10
                          </div>
                          <div className="text-sm text-gray-500">Impact Score</div>
                          <div className="text-sm text-gray-600 mt-2">
                            {recommendation.timeFrame}
                          </div>
                        </div>
                      </div>

                      {/* Expected Outcome */}
                      <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-4">
                        <h4 className="font-medium text-green-900 mb-1">Expected Outcome</h4>
                        <p className="text-green-800 text-sm">{recommendation.expectedOutcome}</p>
                      </div>

                      {/* Action Steps */}
                      <div className="mb-4">
                        <h4 className="font-medium text-gray-900 mb-3">Action Steps</h4>
                        <div className="space-y-4">
                          {recommendation.actionSteps.map((step, stepIndex) => (
                            <div key={stepIndex} className="flex items-start space-x-3">
                              <div className="flex-shrink-0 w-6 h-6 bg-blue-100 text-blue-800 rounded-full flex items-center justify-center text-sm font-medium">
                                {stepIndex + 1}
                              </div>
                              <div className="flex-1">
                                <h5 className="font-medium text-gray-900">{step.step}</h5>
                                <p className="text-sm text-gray-600 mb-1">{step.description}</p>
                                <p className="text-xs text-gray-500">Estimated time: {step.timeEstimate}</p>

                                {step.resources && step.resources.length > 0 && (
                                  <div className="mt-2">
                                    <h6 className="text-sm font-medium text-gray-700 mb-1">Resources:</h6>
                                    <div className="space-y-1">
                                      {step.resources.map((resource, resourceIndex) => (
                                        <div key={resourceIndex} className="flex items-center space-x-2 text-sm">
                                          <span className={`px-2 py-0.5 rounded text-xs ${
                                            resource.cost === 'free' ? 'bg-green-100 text-green-800' :
                                            resource.cost === 'paid' ? 'bg-blue-100 text-blue-800' :
                                            'bg-purple-100 text-purple-800'
                                          }`}>
                                            {resource.type}
                                          </span>
                                          <span className="text-gray-900 font-medium">{resource.title}</span>
                                          <span className="text-gray-500">- {resource.description}</span>
                                          {resource.cost && (
                                            <span className={`px-1 py-0.5 rounded text-xs ${
                                              resource.cost === 'free' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
                                            }`}>
                                              {resource.cost}
                                            </span>
                                          )}
                                        </div>
                                      ))}
                                    </div>
                                  </div>
                                )}
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>

                      {/* Progress Tracking */}
                      {showProgressTracking && (
                        <div>
                          <button
                            onClick={() => setSelectedRecommendation(
                              selectedRecommendation === recommendation.id ? null : recommendation.id
                            )}
                            className="flex items-center space-x-2 text-blue-600 hover:text-blue-800 mb-3"
                          >
                            <span>View Progress Tracking</span>
                            <svg
                              className={`w-4 h-4 transition-transform ${
                                selectedRecommendation === recommendation.id ? 'rotate-180' : ''
                              }`}
                              fill="none"
                              stroke="currentColor"
                              viewBox="0 0 24 24"
                            >
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                            </svg>
                          </button>

                          {selectedRecommendation === recommendation.id && (
                            <div className="bg-gray-50 rounded-lg p-4 space-y-4">
                              {/* Milestones */}
                              <div>
                                <h5 className="font-medium text-gray-900 mb-3">Milestones</h5>
                                <div className="space-y-2">
                                  {recommendation.progressTracking.milestones.map((milestone, milestoneIndex) => (
                                    <div key={milestoneIndex} className="flex items-start space-x-3">
                                      <input
                                        type="checkbox"
                                        checked={milestone.completed}
                                        onChange={() => toggleMilestone(recommendation.id, milestoneIndex)}
                                        className="mt-0.5 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                                      />
                                      <div className="flex-1">
                                        <div className={`font-medium ${milestone.completed ? 'text-green-700 line-through' : 'text-gray-900'}`}>
                                          {milestone.title}
                                        </div>
                                        <div className="text-sm text-gray-600">{milestone.description}</div>
                                        {milestone.dueDate && (
                                          <div className="text-xs text-gray-500">
                                            Due: {new Date(milestone.dueDate).toLocaleDateString()}
                                          </div>
                                        )}
                                      </div>
                                    </div>
                                  ))}
                                </div>
                              </div>

                              {/* Metrics */}
                              <div>
                                <h5 className="font-medium text-gray-900 mb-3">Progress Metrics</h5>
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                  {recommendation.progressTracking.metrics.map((metric, metricIndex) => (
                                    <div key={metricIndex} className="bg-white rounded-lg p-3 border border-gray-200">
                                      <div className="flex justify-between items-center mb-2">
                                        <span className="text-sm font-medium text-gray-900">{metric.name}</span>
                                        <span className="text-sm text-gray-600">
                                          {metric.currentValue}/{metric.targetValue} {metric.unit}
                                        </span>
                                      </div>
                                      <div className="w-full bg-gray-200 rounded-full h-2">
                                        <div
                                          className="bg-blue-600 h-2 rounded-full transition-all"
                                          style={{ width: `${Math.min((metric.currentValue / metric.targetValue) * 100, 100)}%` }}
                                        />
                                      </div>
                                    </div>
                                  ))}
                                </div>
                              </div>
                            </div>
                          )}
                        </div>
                      )}

                      {/* Prerequisites */}
                      {recommendation.prerequisites && recommendation.prerequisites.length > 0 && (
                        <div className="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                          <h5 className="font-medium text-yellow-900 mb-1">Prerequisites</h5>
                          <ul className="text-sm text-yellow-800 space-y-1">
                            {recommendation.prerequisites.map((prereq, index) => (
                              <li key={index} className="flex items-start">
                                <span className="text-yellow-600 mr-1 mt-0.5">•</span>
                                {prereq}
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}

                      {/* Tags */}
                      <div className="mt-4 flex flex-wrap gap-2">
                        {recommendation.tags.map((tag) => (
                          <span key={tag} className="px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded">
                            #{tag}
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {activeTab === 'career_paths' && showCareerPaths && (
            <div className="space-y-6">
              <h3 className="text-lg font-medium text-gray-900">Recommended Career Paths</h3>

              <div className="space-y-6">
                {careerPaths.map((path) => (
                  <div key={path.id} className="border border-gray-200 rounded-lg p-6">
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex-1">
                        <h4 className="text-xl font-semibold text-gray-900 mb-2">{path.title}</h4>
                        <p className="text-gray-600 mb-2">{path.description}</p>
                        <div className="flex items-center space-x-4 text-sm text-gray-500">
                          <span>Timeline: {path.timeline}</span>
                          <span>•</span>
                          <span>{path.roles.length} role progression</span>
                        </div>
                      </div>
                      <div className="text-right ml-6">
                        <div className="text-2xl font-bold text-green-600 mb-1">
                          {path.matchScore}%
                        </div>
                        <div className="text-sm text-gray-500">Match Score</div>
                      </div>
                    </div>

                    {/* Role Progression */}
                    <div className="mb-6">
                      <h5 className="font-medium text-gray-900 mb-3">Role Progression</h5>
                      <div className="space-y-4">
                        {path.roles.map((role, roleIndex) => (
                          <div key={roleIndex} className="flex items-start space-x-4 p-4 bg-gray-50 rounded-lg">
                            <div className="flex-shrink-0 w-8 h-8 bg-blue-100 text-blue-800 rounded-full flex items-center justify-center text-sm font-medium">
                              {roleIndex + 1}
                            </div>
                            <div className="flex-1">
                              <div className="flex items-center justify-between mb-2">
                                <h6 className="font-medium text-gray-900">{role.title}</h6>
                                <span className="text-sm text-gray-600">{role.timeToReach}</span>
                              </div>
                              {role.averageSalary && (
                                <div className="text-sm text-green-600 mb-2">
                                  {formatCurrency(role.averageSalary.min, role.averageSalary.currency)} - {formatCurrency(role.averageSalary.max, role.averageSalary.currency)}
                                </div>
                              )}
                              <div className="flex flex-wrap gap-1">
                                {role.requiredSkills.map((skill) => (
                                  <span key={skill} className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded">
                                    {skill}
                                  </span>
                                ))}
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>

                    {/* Skill Gaps */}
                    <div className="mb-6">
                      <h5 className="font-medium text-gray-900 mb-3">Skill Gaps to Address</h5>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {path.skillGaps.map((gap, gapIndex) => (
                          <div key={gapIndex} className="bg-orange-50 border border-orange-200 rounded-lg p-3">
                            <div className="flex items-center justify-between mb-2">
                              <span className="font-medium text-gray-900">{gap.skill}</span>
                              <span className={`px-2 py-1 rounded text-xs font-medium ${
                                gap.priority === 'critical' ? 'bg-red-100 text-red-800' :
                                gap.priority === 'important' ? 'bg-orange-100 text-orange-800' :
                                'bg-blue-100 text-blue-800'
                              }`}>
                                {gap.priority}
                              </span>
                            </div>
                            <div className="flex justify-between text-sm text-gray-600 mb-1">
                              <span>Current: {gap.currentLevel.toFixed(1)}</span>
                              <span>Required: {gap.requiredLevel.toFixed(1)}</span>
                            </div>
                            <div className="w-full bg-gray-200 rounded-full h-2">
                              <div
                                className="bg-orange-500 h-2 rounded-full"
                                style={{ width: `${(gap.currentLevel / gap.requiredLevel) * 100}%` }}
                              />
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>

                    {/* Next Steps */}
                    <div>
                      <h5 className="font-medium text-gray-900 mb-3">Immediate Next Steps</h5>
                      <ul className="space-y-2">
                        {path.nextSteps.map((step, stepIndex) => (
                          <li key={stepIndex} className="flex items-start">
                            <span className="text-blue-500 mr-2 mt-0.5">→</span>
                            <span className="text-gray-700">{step}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {activeTab === 'opportunities' && showOpportunities && (
            <div className="space-y-6">
              <h3 className="text-lg font-medium text-gray-900">Interview Opportunities</h3>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {opportunities.map((opportunity) => (
                  <div key={opportunity.id} className="border border-gray-200 rounded-lg p-6">
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex-1">
                        <div className="flex items-center space-x-2 mb-2">
                          <span className={`px-2 py-1 rounded text-xs font-medium ${
                            opportunity.type === 'real_interview' ? 'bg-green-100 text-green-800' :
                            opportunity.type === 'practice_interview' ? 'bg-blue-100 text-blue-800' :
                            opportunity.type === 'mock_interview' ? 'bg-purple-100 text-purple-800' :
                            'bg-orange-100 text-orange-800'
                          }`}>
                            {opportunity.type.replace('_', ' ')}
                          </span>
                          <span className="px-2 py-1 bg-gray-100 text-gray-800 text-xs font-medium rounded">
                            {opportunity.difficulty}
                          </span>
                        </div>
                        <h4 className="text-lg font-semibold text-gray-900 mb-1">{opportunity.title}</h4>
                        {opportunity.company && (
                          <p className="text-blue-600 font-medium mb-2">{opportunity.company}</p>
                        )}
                        <p className="text-gray-600 text-sm mb-3">{opportunity.description}</p>
                        <div className="flex items-center space-x-4 text-sm text-gray-500">
                          <span>Duration: {opportunity.estimatedDuration}min</span>
                          <span>•</span>
                          <span>Prep: {Math.round(opportunity.preparationTime / 60)}h</span>
                        </div>
                      </div>
                      <div className="text-right ml-4">
                        <div className="text-xl font-bold text-blue-600 mb-1">
                          {opportunity.matchScore}%
                        </div>
                        <div className="text-xs text-gray-500">Match</div>
                      </div>
                    </div>

                    {/* Categories */}
                    <div className="flex flex-wrap gap-1 mb-4">
                      {opportunity.categories.map((category) => (
                        <span key={category} className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded">
                          {category.replace('_', ' ')}
                        </span>
                      ))}
                    </div>

                    {/* Benefits */}
                    <div className="mb-4">
                      <h5 className="font-medium text-gray-900 mb-2">Benefits</h5>
                      <ul className="space-y-1">
                        {opportunity.benefits.slice(0, 3).map((benefit, index) => (
                          <li key={index} className="text-sm text-gray-600 flex items-start">
                            <span className="text-green-500 mr-1 mt-0.5">✓</span>
                            {benefit}
                          </li>
                        ))}
                      </ul>
                    </div>

                    {/* Requirements */}
                    <div className="mb-4">
                      <h5 className="font-medium text-gray-900 mb-2">Requirements</h5>
                      <ul className="space-y-1">
                        {opportunity.requirements.slice(0, 2).map((requirement, index) => (
                          <li key={index} className="text-sm text-gray-600 flex items-start">
                            <span className="text-blue-500 mr-1 mt-0.5">•</span>
                            {requirement}
                          </li>
                        ))}
                      </ul>
                    </div>

                    {/* Scheduling */}
                    {opportunity.schedulingInfo && (
                      <div className="bg-gray-50 rounded-lg p-3">
                        <h5 className="font-medium text-gray-900 mb-2">Scheduling</h5>
                        {opportunity.schedulingInfo.cost !== undefined && (
                          <div className="text-sm text-gray-600 mb-1">
                            Cost: {opportunity.schedulingInfo.cost === 0 ? 'Free' : `$${opportunity.schedulingInfo.cost}`}
                          </div>
                        )}
                        {opportunity.schedulingInfo.deadline && (
                          <div className="text-sm text-red-600 mb-1">
                            Deadline: {new Date(opportunity.schedulingInfo.deadline).toLocaleDateString()}
                          </div>
                        )}
                        <button className="w-full mt-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 text-sm">
                          {opportunity.type === 'real_interview' ? 'Apply Now' : 'Schedule Session'}
                        </button>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default InterviewRecommendationSystem;