import React, { useState, useEffect } from 'react';
import { api } from '../../lib/api';
import { Interview, InterviewStatus, InterviewType } from '../../types/interview';
import LoadingSpinner from '../common/LoadingSpinner';
import ErrorAlert from '../common/ErrorAlert';

interface AnalyticsData {
  overview: {
    totalInterviews: number;
    completedInterviews: number;
    averageScore: number;
    averageDuration: number;
    successRate: number;
    completionRate: number;
  };
  byType: Record<InterviewType, {
    count: number;
    averageScore: number;
    completionRate: number;
  }>;
  byStatus: Record<InterviewStatus, number>;
  trends: {
    daily: Array<{ date: string; count: number; averageScore: number }>;
    weekly: Array<{ week: string; count: number; averageScore: number }>;
    monthly: Array<{ month: string; count: number; averageScore: number }>;
  };
  performance: {
    topPerformers: Array<{ candidateId: string; candidateName: string; averageScore: number; interviewCount: number }>;
    improvementAreas: Array<{ category: string; averageScore: number; interviewCount: number }>;
    difficultyAnalysis: Record<string, { averageScore: number; completionRate: number }>;
  };
}

const InterviewAnalyticsDashboard: React.FC = () => {
  const [analytics, setAnalytics] = useState<AnalyticsData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [timeRange, setTimeRange] = useState<'7d' | '30d' | '90d' | '1y'>('30d');
  const [activeTab, setActiveTab] = useState<'overview' | 'trends' | 'performance' | 'insights'>('overview');

  useEffect(() => {
    loadAnalytics();
  }, [timeRange]);

  const loadAnalytics = async () => {
    try {
      setLoading(true);
      setError(null);

      // Mock analytics data - in real implementation, this would come from the API
      const mockAnalytics: AnalyticsData = {
        overview: {
          totalInterviews: 156,
          completedInterviews: 124,
          averageScore: 7.8,
          averageDuration: 3600, // seconds
          successRate: 0.72,
          completionRate: 0.79
        },
        byType: {
          [InterviewType.TECHNICAL]: {
            count: 68,
            averageScore: 7.2,
            completionRate: 0.85
          },
          [InterviewType.BEHAVIORAL]: {
            count: 45,
            averageScore: 8.1,
            completionRate: 0.91
          },
          [InterviewType.SYSTEM_DESIGN]: {
            count: 32,
            averageScore: 7.6,
            completionRate: 0.78
          },
          [InterviewType.CODING]: {
            count: 11,
            averageScore: 6.9,
            completionRate: 0.73
          }
        },
        byStatus: {
          [InterviewStatus.COMPLETED]: 124,
          [InterviewStatus.IN_PROGRESS]: 8,
          [InterviewStatus.SCHEDULED]: 15,
          [InterviewStatus.PAUSED]: 3,
          [InterviewStatus.CANCELLED]: 4,
          [InterviewStatus.FAILED]: 2
        },
        trends: {
          daily: Array.from({ length: 30 }, (_, i) => ({
            date: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
            count: Math.floor(Math.random() * 10) + 1,
            averageScore: Math.random() * 2 + 7
          })).reverse(),
          weekly: Array.from({ length: 12 }, (_, i) => ({
            week: `Week ${i + 1}`,
            count: Math.floor(Math.random() * 50) + 10,
            averageScore: Math.random() * 2 + 7
          })),
          monthly: Array.from({ length: 6 }, (_, i) => ({
            month: new Date(Date.now() - i * 30 * 24 * 60 * 60 * 1000).toLocaleDateString('en-US', { month: 'short' }),
            count: Math.floor(Math.random() * 100) + 20,
            averageScore: Math.random() * 2 + 7
          })).reverse()
        },
        performance: {
          topPerformers: [
            { candidateId: '1', candidateName: 'Sarah Johnson', averageScore: 9.2, interviewCount: 3 },
            { candidateId: '2', candidateName: 'Mike Chen', averageScore: 8.9, interviewCount: 4 },
            { candidateId: '3', candidateName: 'Emma Davis', averageScore: 8.7, interviewCount: 2 },
            { candidateId: '4', candidateName: 'Alex Rodriguez', averageScore: 8.5, interviewCount: 3 },
            { candidateId: '5', candidateName: 'Lisa Wang', averageScore: 8.3, interviewCount: 5 }
          ],
          improvementAreas: [
            { category: 'System Design', averageScore: 6.8, interviewCount: 32 },
            { category: 'Algorithms', averageScore: 7.1, interviewCount: 45 },
            { category: 'Database Design', averageScore: 7.3, interviewCount: 28 },
            { category: 'Leadership', averageScore: 7.9, interviewCount: 38 }
          ],
          difficultyAnalysis: {
            'Easy': { averageScore: 8.4, completionRate: 0.92 },
            'Medium': { averageScore: 7.6, completionRate: 0.84 },
            'Hard': { averageScore: 6.9, completionRate: 0.71 }
          }
        }
      };

      setAnalytics(mockAnalytics);
    } catch (err: any) {
      setError(err.message || 'Failed to load analytics data');
    } finally {
      setLoading(false);
    }
  };

  const formatDuration = (seconds: number) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    return `${hours}h ${minutes}m`;
  };

  const formatPercentage = (value: number) => `${(value * 100).toFixed(1)}%`;

  const getScoreColor = (score: number) => {
    if (score >= 8) return 'text-green-600';
    if (score >= 7) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getScoreBadgeColor = (score: number) => {
    if (score >= 8) return 'bg-green-100 text-green-800';
    if (score >= 7) return 'bg-yellow-100 text-yellow-800';
    return 'bg-red-100 text-red-800';
  };

  if (loading) {
    return <LoadingSpinner />;
  }

  if (error) {
    return <ErrorAlert message={error} onRetry={loadAnalytics} />;
  }

  if (!analytics) {
    return (
      <div className="text-center py-12">
        <p className="text-gray-500">No analytics data available</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header with Time Range Selector */}
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Interview Analytics</h2>
          <p className="text-gray-600">Insights and performance metrics</p>
        </div>

        <div className="flex items-center gap-3">
          <div className="flex bg-gray-100 rounded-lg p-1">
            {(['7d', '30d', '90d', '1y'] as const).map((range) => (
              <button
                key={range}
                onClick={() => setTimeRange(range)}
                className={`px-3 py-1 text-sm font-medium rounded-md transition-colors ${
                  timeRange === range
                    ? 'bg-white text-gray-900 shadow-sm'
                    : 'text-gray-600 hover:text-gray-900'
                }`}
              >
                {range === '7d' ? '7 days' : range === '30d' ? '30 days' : range === '90d' ? '90 days' : '1 year'}
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* Tab Navigation */}
      <div className="border-b border-gray-200">
        <nav className="-mb-px flex space-x-8">
          {[
            { id: 'overview', name: 'Overview', icon: 'ðŸ“Š' },
            { id: 'trends', name: 'Trends', icon: 'ðŸ“ˆ' },
            { id: 'performance', name: 'Performance', icon: 'ðŸŽ¯' },
            { id: 'insights', name: 'Insights', icon: 'ðŸ’¡' }
          ].map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id as typeof activeTab)}
              className={`whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm flex items-center gap-2 ${
                activeTab === tab.id
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <span>{tab.icon}</span>
              {tab.name}
            </button>
          ))}
        </nav>
      </div>

      {/* Tab Content */}
      {activeTab === 'overview' && (
        <div className="space-y-6">
          {/* Key Metrics */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <div className="bg-white border border-gray-200 rounded-lg p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Total Interviews</p>
                  <p className="text-3xl font-bold text-gray-900">{analytics.overview.totalInterviews}</p>
                </div>
                <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                  <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                  </svg>
                </div>
              </div>
              <div className="mt-4 text-sm text-gray-600">
                {analytics.overview.completedInterviews} completed
              </div>
            </div>

            <div className="bg-white border border-gray-200 rounded-lg p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Average Score</p>
                  <p className={`text-3xl font-bold ${getScoreColor(analytics.overview.averageScore)}`}>
                    {analytics.overview.averageScore.toFixed(1)}
                  </p>
                </div>
                <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
                  <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
              </div>
              <div className="mt-4 text-sm text-gray-600">
                Out of 10 points
              </div>
            </div>

            <div className="bg-white border border-gray-200 rounded-lg p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Completion Rate</p>
                  <p className="text-3xl font-bold text-gray-900">
                    {formatPercentage(analytics.overview.completionRate)}
                  </p>
                </div>
                <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
                  <svg className="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                  </svg>
                </div>
              </div>
              <div className="mt-4 text-sm text-gray-600">
                {analytics.overview.completedInterviews} of {analytics.overview.totalInterviews}
              </div>
            </div>
          </div>

          {/* Interview Types Distribution */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div className="bg-white border border-gray-200 rounded-lg p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">By Interview Type</h3>
              <div className="space-y-4">
                {Object.entries(analytics.byType).map(([type, data]) => (
                  <div key={type} className="flex items-center justify-between">
                    <div className="flex-1">
                      <div className="flex items-center justify-between mb-1">
                        <span className="text-sm font-medium text-gray-700 capitalize">
                          {type.replace('_', ' ')}
                        </span>
                        <span className="text-sm text-gray-600">{data.count} interviews</span>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <div
                          className="bg-blue-600 h-2 rounded-full"
                          style={{ width: `${(data.count / analytics.overview.totalInterviews) * 100}%` }}
                        />
                      </div>
                    </div>
                    <div className="ml-4 text-right">
                      <div className={`text-sm font-medium ${getScoreColor(data.averageScore)}`}>
                        {data.averageScore.toFixed(1)}
                      </div>
                      <div className="text-xs text-gray-500">avg score</div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div className="bg-white border border-gray-200 rounded-lg p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Status Distribution</h3>
              <div className="space-y-3">
                {Object.entries(analytics.byStatus).map(([status, count]) => {
                  const percentage = (count / analytics.overview.totalInterviews) * 100;
                  const statusColors = {
                    [InterviewStatus.COMPLETED]: 'bg-green-600',
                    [InterviewStatus.IN_PROGRESS]: 'bg-blue-600',
                    [InterviewStatus.SCHEDULED]: 'bg-yellow-600',
                    [InterviewStatus.PAUSED]: 'bg-orange-600',
                    [InterviewStatus.CANCELLED]: 'bg-red-600',
                    [InterviewStatus.FAILED]: 'bg-red-800'
                  };

                  return (
                    <div key={status} className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <div className={`w-3 h-3 rounded-full ${statusColors[status as InterviewStatus]}`} />
                        <span className="text-sm text-gray-700 capitalize">
                          {status.replace('_', ' ')}
                        </span>
                      </div>
                      <div className="text-right">
                        <span className="text-sm font-medium text-gray-900">{count}</span>
                        <span className="text-xs text-gray-500 ml-1">({percentage.toFixed(1)}%)</span>
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        </div>
      )}

      {activeTab === 'trends' && (
        <div className="space-y-6">
          <div className="bg-white border border-gray-200 rounded-lg p-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Interview Volume Trend</h3>
            <div className="h-64 bg-gray-50 rounded-lg p-4">
              <svg className="w-full h-full" viewBox="0 0 800 200">
                {/* Grid lines */}
                {[0, 50, 100, 150, 200].map((y) => (
                  <line key={y} x1="0" y1={y} x2="800" y2={y} stroke="#e5e7eb" strokeWidth="1" />
                ))}

                {/* Trend line */}
                <polyline
                  fill="none"
                  stroke="#3b82f6"
                  strokeWidth="2"
                  points={analytics.trends.daily.map((point, index) =>
                    `${(index / (analytics.trends.daily.length - 1)) * 800},${200 - (point.count / 10) * 200}`
                  ).join(' ')}
                />

                {/* Data points */}
                {analytics.trends.daily.map((point, index) => (
                  <circle
                    key={index}
                    cx={(index / (analytics.trends.daily.length - 1)) * 800}
                    cy={200 - (point.count / 10) * 200}
                    r="3"
                    fill="#3b82f6"
                  />
                ))}
              </svg>
            </div>
          </div>

          <div className="bg-white border border-gray-200 rounded-lg p-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Score Trend</h3>
            <div className="h-64 bg-gray-50 rounded-lg p-4">
              <svg className="w-full h-full" viewBox="0 0 800 200">
                {/* Grid lines */}
                {[0, 50, 100, 150, 200].map((y) => (
                  <line key={y} x1="0" y1={y} x2="800" y2={y} stroke="#e5e7eb" strokeWidth="1" />
                ))}

                {/* Score trend line */}
                <polyline
                  fill="none"
                  stroke="#10b981"
                  strokeWidth="2"
                  points={analytics.trends.daily.map((point, index) =>
                    `${(index / (analytics.trends.daily.length - 1)) * 800},${200 - ((point.averageScore - 5) / 5) * 200}`
                  ).join(' ')}
                />

                {/* Data points */}
                {analytics.trends.daily.map((point, index) => (
                  <circle
                    key={index}
                    cx={(index / (analytics.trends.daily.length - 1)) * 800}
                    cy={200 - ((point.averageScore - 5) / 5) * 200}
                    r="3"
                    fill="#10b981"
                  />
                ))}
              </svg>
            </div>
          </div>
        </div>
      )}

      {activeTab === 'performance' && (
        <div className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Top Performers */}
            <div className="bg-white border border-gray-200 rounded-lg p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Top Performers</h3>
              <div className="space-y-3">
                {analytics.performance.topPerformers.map((performer, index) => (
                  <div key={performer.candidateId} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div className="flex items-center gap-3">
                      <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center text-sm font-medium text-blue-600">
                        #{index + 1}
                      </div>
                      <div>
                        <p className="font-medium text-gray-900">{performer.candidateName}</p>
                        <p className="text-sm text-gray-600">{performer.interviewCount} interviews</p>
                      </div>
                    </div>
                    <div className={`px-2 py-1 rounded-full text-sm font-medium ${getScoreBadgeColor(performer.averageScore)}`}>
                      {performer.averageScore.toFixed(1)}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Improvement Areas */}
            <div className="bg-white border border-gray-200 rounded-lg p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Areas for Improvement</h3>
              <div className="space-y-3">
                {analytics.performance.improvementAreas.map((area, index) => (
                  <div key={area.category} className="flex items-center justify-between">
                    <div>
                      <p className="font-medium text-gray-900">{area.category}</p>
                      <p className="text-sm text-gray-600">{area.interviewCount} interviews</p>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className={`px-2 py-1 rounded-full text-sm font-medium ${getScoreBadgeColor(area.averageScore)}`}>
                        {area.averageScore.toFixed(1)}
                      </div>
                      <div className="w-16 bg-gray-200 rounded-full h-2">
                        <div
                          className="bg-red-500 h-2 rounded-full"
                          style={{ width: `${(area.averageScore / 10) * 100}%` }}
                        />
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Difficulty Analysis */}
          <div className="bg-white border border-gray-200 rounded-lg p-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Performance by Difficulty</h3>
            <div className="grid grid-cols-3 gap-6">
              {Object.entries(analytics.performance.difficultyAnalysis).map(([difficulty, data]) => (
                <div key={difficulty} className="text-center">
                  <div className="mb-2">
                    <div className={`inline-flex px-3 py-1 rounded-full text-sm font-medium ${
                      difficulty === 'Easy' ? 'bg-green-100 text-green-800' :
                      difficulty === 'Medium' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-red-100 text-red-800'
                    }`}>
                      {difficulty}
                    </div>
                  </div>
                  <div className="space-y-2">
                    <div>
                      <div className="text-2xl font-bold text-gray-900">{data.averageScore.toFixed(1)}</div>
                      <div className="text-sm text-gray-600">Average Score</div>
                    </div>
                    <div>
                      <div className="text-lg font-semibold text-gray-900">{formatPercentage(data.completionRate)}</div>
                      <div className="text-sm text-gray-600">Completion Rate</div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      {activeTab === 'insights' && (
        <div className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Key Insights */}
            <div className="bg-white border border-gray-200 rounded-lg p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Key Insights</h3>
              <div className="space-y-4">
                <div className="flex items-start gap-3 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                  <div className="w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                    <svg className="w-4 h-4 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                    </svg>
                  </div>
                  <div>
                    <p className="font-medium text-blue-900">Behavioral interviews show highest scores</p>
                    <p className="text-sm text-blue-700">Average score of 8.1 vs 7.2 for technical interviews</p>
                  </div>
                </div>

                <div className="flex items-start gap-3 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                  <div className="w-6 h-6 bg-yellow-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                    <svg className="w-4 h-4 text-yellow-600" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                  </div>
                  <div>
                    <p className="font-medium text-yellow-900">System Design needs attention</p>
                    <p className="text-sm text-yellow-700">22% lower completion rate compared to other types</p>
                  </div>
                </div>

                <div className="flex items-start gap-3 p-3 bg-green-50 border border-green-200 rounded-lg">
                  <div className="w-6 h-6 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                    <svg className="w-4 h-4 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                    </svg>
                  </div>
                  <div>
                    <p className="font-medium text-green-900">Strong overall completion rate</p>
                    <p className="text-sm text-green-700">79% of interviews completed successfully</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Recommendations */}
            <div className="bg-white border border-gray-200 rounded-lg p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Recommendations</h3>
              <div className="space-y-4">
                <div className="border-l-4 border-blue-500 pl-4">
                  <h4 className="font-medium text-gray-900">Improve System Design Interviews</h4>
                  <p className="text-sm text-gray-600">Consider adding preparatory materials or extending time limits for system design questions.</p>
                </div>

                <div className="border-l-4 border-green-500 pl-4">
                  <h4 className="font-medium text-gray-900">Leverage Behavioral Success</h4>
                  <p className="text-sm text-gray-600">Use behavioral interview techniques and structure in other interview types.</p>
                </div>

                <div className="border-l-4 border-yellow-500 pl-4">
                  <h4 className="font-medium text-gray-900">Focus on Algorithm Practice</h4>
                  <p className="text-sm text-gray-600">Provide additional resources for candidates to improve algorithm problem-solving skills.</p>
                </div>

                <div className="border-l-4 border-purple-500 pl-4">
                  <h4 className="font-medium text-gray-900">Standardize Evaluation</h4>
                  <p className="text-sm text-gray-600">Create more consistent scoring rubrics across different interview types.</p>
                </div>
              </div>
            </div>
          </div>

          {/* Export Options */}
          <div className="bg-white border border-gray-200 rounded-lg p-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Export Analytics</h3>
            <div className="flex flex-wrap gap-3">
              <button className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 flex items-center gap-2">
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                Export PDF Report
              </button>
              <button className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 flex items-center gap-2">
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                Export CSV Data
              </button>
              <button className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 flex items-center gap-2">
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
                </svg>
                Share Dashboard
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default InterviewAnalyticsDashboard;