import React, { useState } from 'react';
import { api } from '../../lib/api';
import type { Interview } from '../../types/interview';
import { InterviewStatus, InterviewType } from '../../types/interview';

interface InterviewCardProps {
  interview: Interview;
  onUpdate: (interviewId: string, updatedInterview: Interview) => void;
  onDelete: (interviewId: string) => void;
}

const InterviewCard: React.FC<InterviewCardProps> = ({
  interview,
  onUpdate,
  onDelete
}) => {
  const [loading, setLoading] = useState(false);
  const [showDetails, setShowDetails] = useState(false);

  const getStatusBadge = (status: InterviewStatus) => {
    const statusConfig = {
      [InterviewStatus.SCHEDULED]: { color: 'bg-blue-100 text-blue-800', label: 'Scheduled' },
      [InterviewStatus.IN_PROGRESS]: { color: 'bg-yellow-100 text-yellow-800', label: 'In Progress' },
      [InterviewStatus.PAUSED]: { color: 'bg-orange-100 text-orange-800', label: 'Paused' },
      [InterviewStatus.COMPLETED]: { color: 'bg-green-100 text-green-800', label: 'Completed' },
      [InterviewStatus.CANCELLED]: { color: 'bg-red-100 text-red-800', label: 'Cancelled' },
      [InterviewStatus.FAILED]: { color: 'bg-red-100 text-red-800', label: 'Failed' },
    };

    const config = statusConfig[status] || { color: 'bg-gray-100 text-gray-800', label: status };

    return (
      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${config.color}`}>
        {config.label}
      </span>
    );
  };

  const getTypeBadge = (type: InterviewType) => {
    const typeConfig = {
      [InterviewType.TECHNICAL]: { color: 'bg-purple-100 text-purple-800', icon: 'üíª' },
      [InterviewType.BEHAVIORAL]: { color: 'bg-blue-100 text-blue-800', icon: 'üó£Ô∏è' },
      [InterviewType.SYSTEM_DESIGN]: { color: 'bg-indigo-100 text-indigo-800', icon: 'üèóÔ∏è' },
      [InterviewType.CODING]: { color: 'bg-green-100 text-green-800', icon: '‚å®Ô∏è' },
      [InterviewType.COMPREHENSIVE]: { color: 'bg-gray-100 text-gray-800', icon: 'üìã' },
      [InterviewType.QUICK]: { color: 'bg-yellow-100 text-yellow-800', icon: '‚ö°' },
    };

    const config = typeConfig[type] || { color: 'bg-gray-100 text-gray-800', icon: '‚ùì' };

    return (
      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${config.color}`}>
        <span className="mr-1">{config.icon}</span>
        {type.replace('_', ' ')}
      </span>
    );
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const handleDeleteInterview = async () => {
    if (!window.confirm('Are you sure you want to delete this interview? This action cannot be undone.')) {
      return;
    }

    try {
      setLoading(true);
      await api.deleteInterview(interview.id);
      onDelete(interview.id);
    } catch (error: any) {
      alert(`Failed to delete interview: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  const canResume = interview.status === InterviewStatus.PAUSED || interview.status === InterviewStatus.IN_PROGRESS;
  const canStart = interview.status === InterviewStatus.SCHEDULED;
  const isCompleted = interview.status === InterviewStatus.COMPLETED;

  return (
    <div className="bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md transition-shadow">
      <div className="p-6">
        {/* Header */}
        <div className="flex items-start justify-between mb-4">
          <div className="flex-1">
            <div className="flex items-center gap-3 mb-2">
              {getTypeBadge(interview.interview_type)}
              {getStatusBadge(interview.status)}
            </div>

            <h3 className="text-lg font-semibold text-gray-900 mb-1">
              {interview.interview_type.replace('_', ' ')} Interview
            </h3>

            <div className="flex items-center text-sm text-gray-600 gap-4">
              <span className="flex items-center gap-1">
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
                Created {formatDate(interview.created_at)}
              </span>

              {interview.scheduled_at && (
                <span className="flex items-center gap-1">
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  Scheduled {formatDate(interview.scheduled_at)}
                </span>
              )}
            </div>
          </div>

          {/* Score */}
          {interview.score !== null && interview.score !== undefined && (
            <div className="text-right">
              <div className="text-2xl font-bold text-gray-900">{Math.round(interview.score * 100)}%</div>
              <div className="text-sm text-gray-600">Score</div>
            </div>
          )}
        </div>

        {/* Notes */}
        {interview.notes && (
          <div className="mb-4">
            <div className="text-sm text-gray-700 bg-gray-50 p-3 rounded-lg">
              <strong>Notes:</strong> {interview.notes}
            </div>
          </div>
        )}

        {/* Progress indicator for in-progress interviews */}
        {interview.status === InterviewStatus.IN_PROGRESS && interview.metadata?.completion_percentage && (
          <div className="mb-4">
            <div className="flex justify-between text-sm text-gray-600 mb-1">
              <span>Progress</span>
              <span>{Math.round(interview.metadata.completion_percentage)}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div
                className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${interview.metadata.completion_percentage}%` }}
              />
            </div>
          </div>
        )}

        {/* Actions */}
        <div className="flex items-center justify-between pt-4 border-t border-gray-100">
          <div className="flex items-center gap-2">
            {canStart && (
              <button className="px-3 py-1.5 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700 transition-colors">
                Start Interview
              </button>
            )}

            {canResume && (
              <button className="px-3 py-1.5 bg-green-600 text-white text-sm rounded-lg hover:bg-green-700 transition-colors">
                Resume Interview
              </button>
            )}

            {isCompleted && (
              <button className="px-3 py-1.5 bg-purple-600 text-white text-sm rounded-lg hover:bg-purple-700 transition-colors">
                View Analysis
              </button>
            )}

            <button
              onClick={() => setShowDetails(!showDetails)}
              className="px-3 py-1.5 border border-gray-300 text-gray-700 text-sm rounded-lg hover:bg-gray-50 transition-colors"
            >
              {showDetails ? 'Hide' : 'Show'} Details
            </button>
          </div>

          <div className="flex items-center gap-2">
            <button className="p-1.5 text-gray-400 hover:text-gray-600 transition-colors">
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
              </svg>
            </button>

            <button
              onClick={handleDeleteInterview}
              disabled={loading}
              className="p-1.5 text-gray-400 hover:text-red-600 transition-colors disabled:opacity-50"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
              </svg>
            </button>
          </div>
        </div>

        {/* Extended Details */}
        {showDetails && (
          <div className="mt-4 pt-4 border-t border-gray-100 space-y-3">
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span className="font-medium text-gray-700">Interview ID:</span>
                <div className="text-gray-600 font-mono text-xs">{interview.id}</div>
              </div>

              {interview.template_id && (
                <div>
                  <span className="font-medium text-gray-700">Template ID:</span>
                  <div className="text-gray-600 font-mono text-xs">{interview.template_id}</div>
                </div>
              )}

              {interview.started_at && (
                <div>
                  <span className="font-medium text-gray-700">Started:</span>
                  <div className="text-gray-600">{formatDate(interview.started_at)}</div>
                </div>
              )}

              {interview.completed_at && (
                <div>
                  <span className="font-medium text-gray-700">Completed:</span>
                  <div className="text-gray-600">{formatDate(interview.completed_at)}</div>
                </div>
              )}
            </div>

            {interview.metadata && Object.keys(interview.metadata).length > 0 && (
              <div>
                <span className="font-medium text-gray-700">Metadata:</span>
                <div className="mt-1 p-2 bg-gray-50 rounded text-xs font-mono text-gray-600 max-h-32 overflow-y-auto">
                  {JSON.stringify(interview.metadata, null, 2)}
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default InterviewCard;