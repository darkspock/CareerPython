import React, { useState } from 'react';
import { InterviewFilters, InterviewStatus, InterviewType } from '../../types/interview';

interface InterviewFiltersPanelProps {
  filters: InterviewFilters;
  onFiltersChange: (filters: Partial<InterviewFilters>) => void;
}

const InterviewFiltersPanel: React.FC<InterviewFiltersPanelProps> = ({
  filters,
  onFiltersChange
}) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [tempFilters, setTempFilters] = useState<Partial<InterviewFilters>>({});

  const statusOptions = [
    { value: '', label: 'All Statuses' },
    { value: InterviewStatus.SCHEDULED, label: 'Scheduled' },
    { value: InterviewStatus.IN_PROGRESS, label: 'In Progress' },
    { value: InterviewStatus.PAUSED, label: 'Paused' },
    { value: InterviewStatus.COMPLETED, label: 'Completed' },
    { value: InterviewStatus.CANCELLED, label: 'Cancelled' },
    { value: InterviewStatus.FAILED, label: 'Failed' },
  ];

  const typeOptions = [
    { value: '', label: 'All Types' },
    { value: InterviewType.TECHNICAL, label: 'Technical' },
    { value: InterviewType.BEHAVIORAL, label: 'Behavioral' },
    { value: InterviewType.SYSTEM_DESIGN, label: 'System Design' },
    { value: InterviewType.CODING, label: 'Coding' },
    { value: InterviewType.COMPREHENSIVE, label: 'Comprehensive' },
    { value: InterviewType.QUICK, label: 'Quick' },
  ];

  const sortOptions = [
    { value: 'created_at', label: 'Created Date' },
    { value: 'scheduled_at', label: 'Scheduled Date' },
    { value: 'completed_at', label: 'Completed Date' },
    { value: 'score', label: 'Score' },
    { value: 'status', label: 'Status' },
  ];

  const sortOrderOptions = [
    { value: 'desc', label: 'Newest First' },
    { value: 'asc', label: 'Oldest First' },
  ];

  const pageSizeOptions = [
    { value: 5, label: '5 per page' },
    { value: 10, label: '10 per page' },
    { value: 20, label: '20 per page' },
    { value: 50, label: '50 per page' },
  ];

  const handleFilterChange = (key: keyof InterviewFilters, value: any) => {
    const newValue = value === '' ? undefined : value;
    onFiltersChange({ [key]: newValue });
  };

  const handleTempFilterChange = (key: keyof InterviewFilters, value: any) => {
    setTempFilters(prev => ({ ...prev, [key]: value === '' ? undefined : value }));
  };

  const applyTempFilters = () => {
    onFiltersChange(tempFilters);
    setTempFilters({});
  };

  const clearAllFilters = () => {
    onFiltersChange({
      status: undefined,
      type: undefined,
      scheduled_after: undefined,
      scheduled_before: undefined,
      completed_after: undefined,
      completed_before: undefined,
      min_score: undefined,
      max_score: undefined,
      sort_by: 'created_at',
      sort_order: 'desc',
      page: 1
    });
    setTempFilters({});
  };

  const activeFiltersCount = Object.keys(filters).filter(key => {
    const value = filters[key as keyof InterviewFilters];
    return value !== undefined && value !== '' && !['page', 'page_size', 'sort_by', 'sort_order'].includes(key);
  }).length;

  return (
    <div className="bg-white border border-gray-200 rounded-lg">
      {/* Filter Header */}
      <div className="flex items-center justify-between p-4 border-b border-gray-200">
        <div className="flex items-center gap-3">
          <button
            onClick={() => setIsExpanded(!isExpanded)}
            className="flex items-center gap-2 text-gray-700 hover:text-gray-900"
          >
            <svg
              className={`w-5 h-5 transition-transform ${isExpanded ? 'rotate-90' : ''}`}
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
            </svg>
            <span className="font-medium">Filters</span>
            {activeFiltersCount > 0 && (
              <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                {activeFiltersCount}
              </span>
            )}
          </button>
        </div>

        <div className="flex items-center gap-2">
          {activeFiltersCount > 0 && (
            <button
              onClick={clearAllFilters}
              className="text-sm text-gray-600 hover:text-gray-800"
            >
              Clear all
            </button>
          )}

          {/* Quick Filters */}
          <div className="flex items-center gap-2 border-l border-gray-200 pl-3">
            <select
              value={filters.status || ''}
              onChange={(e) => handleFilterChange('status', e.target.value)}
              className="text-sm border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
            >
              {statusOptions.map(option => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>

            <select
              value={filters.type || ''}
              onChange={(e) => handleFilterChange('type', e.target.value)}
              className="text-sm border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
            >
              {typeOptions.map(option => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
          </div>
        </div>
      </div>

      {/* Extended Filters */}
      {isExpanded && (
        <div className="p-4 space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {/* Date Filters */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Scheduled After
              </label>
              <input
                type="datetime-local"
                value={tempFilters.scheduled_after || filters.scheduled_after || ''}
                onChange={(e) => handleTempFilterChange('scheduled_after', e.target.value)}
                className="w-full text-sm border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Scheduled Before
              </label>
              <input
                type="datetime-local"
                value={tempFilters.scheduled_before || filters.scheduled_before || ''}
                onChange={(e) => handleTempFilterChange('scheduled_before', e.target.value)}
                className="w-full text-sm border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Completed After
              </label>
              <input
                type="datetime-local"
                value={tempFilters.completed_after || filters.completed_after || ''}
                onChange={(e) => handleTempFilterChange('completed_after', e.target.value)}
                className="w-full text-sm border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Completed Before
              </label>
              <input
                type="datetime-local"
                value={tempFilters.completed_before || filters.completed_before || ''}
                onChange={(e) => handleTempFilterChange('completed_before', e.target.value)}
                className="w-full text-sm border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            {/* Score Filters */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Minimum Score (%)
              </label>
              <input
                type="number"
                min="0"
                max="100"
                value={tempFilters.min_score !== undefined ? tempFilters.min_score : filters.min_score || ''}
                onChange={(e) => handleTempFilterChange('min_score', e.target.value ? parseFloat(e.target.value) / 100 : undefined)}
                className="w-full text-sm border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                placeholder="0"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Maximum Score (%)
              </label>
              <input
                type="number"
                min="0"
                max="100"
                value={tempFilters.max_score !== undefined ? tempFilters.max_score : filters.max_score || ''}
                onChange={(e) => handleTempFilterChange('max_score', e.target.value ? parseFloat(e.target.value) / 100 : undefined)}
                className="w-full text-sm border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                placeholder="100"
              />
            </div>
          </div>

          {/* Sorting and Pagination */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 pt-4 border-t border-gray-200">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Sort By
              </label>
              <select
                value={filters.sort_by || 'created_at'}
                onChange={(e) => handleFilterChange('sort_by', e.target.value)}
                className="w-full text-sm border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              >
                {sortOptions.map(option => (
                  <option key={option.value} value={option.value}>
                    {option.label}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Sort Order
              </label>
              <select
                value={filters.sort_order || 'desc'}
                onChange={(e) => handleFilterChange('sort_order', e.target.value)}
                className="w-full text-sm border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              >
                {sortOrderOptions.map(option => (
                  <option key={option.value} value={option.value}>
                    {option.label}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Results Per Page
              </label>
              <select
                value={filters.page_size || 10}
                onChange={(e) => handleFilterChange('page_size', parseInt(e.target.value))}
                className="w-full text-sm border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              >
                {pageSizeOptions.map(option => (
                  <option key={option.value} value={option.value}>
                    {option.label}
                  </option>
                ))}
              </select>
            </div>
          </div>

          {/* Apply Button for Temp Filters */}
          {Object.keys(tempFilters).length > 0 && (
            <div className="flex justify-end pt-4 border-t border-gray-200">
              <div className="flex gap-2">
                <button
                  onClick={() => setTempFilters({})}
                  className="px-4 py-2 text-sm border border-gray-300 rounded-md hover:bg-gray-50"
                >
                  Cancel
                </button>
                <button
                  onClick={applyTempFilters}
                  className="px-4 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  Apply Filters
                </button>
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default InterviewFiltersPanel;