import React, { useState, useEffect } from 'react';
import { api } from '../../lib/api';
import { Interview, InterviewType, InterviewTemplate, TemplateRecommendation } from '../../types/interview';
import InterviewTemplateManager from './InterviewTemplateManager';

interface InterviewSchedulerProps {
  onScheduled?: (interview: Interview) => void;
  onClose?: () => void;
  preselectedTemplate?: string;
}

interface ScheduleStep {
  id: 'template' | 'datetime' | 'details' | 'confirmation';
  title: string;
  description: string;
}

const SCHEDULE_STEPS: ScheduleStep[] = [
  {
    id: 'template',
    title: 'Select Template',
    description: 'Choose an interview template that fits your needs'
  },
  {
    id: 'datetime',
    title: 'Schedule Time',
    description: 'Pick a date and time for your interview'
  },
  {
    id: 'details',
    title: 'Add Details',
    description: 'Optional notes and configurations'
  },
  {
    id: 'confirmation',
    title: 'Confirm',
    description: 'Review and confirm your interview'
  }
];

const InterviewScheduler: React.FC<InterviewSchedulerProps> = ({
  onScheduled,
  onClose,
  preselectedTemplate
}) => {
  const [currentStep, setCurrentStep] = useState<'template' | 'datetime' | 'details' | 'confirmation'>('template');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Form data
  const [selectedTemplate, setSelectedTemplate] = useState<TemplateRecommendation | null>(null);
  const [scheduledDateTime, setScheduledDateTime] = useState<string>('');
  const [notes, setNotes] = useState<string>('');
  const [customInterviewType, setCustomInterviewType] = useState<InterviewType>(InterviewType.COMPREHENSIVE);

  // Template data
  const [recommendedTemplates, setRecommendedTemplates] = useState<TemplateRecommendation[]>([]);
  const [loadingTemplates, setLoadingTemplates] = useState(false);

  useEffect(() => {
    if (currentStep === 'template' && !preselectedTemplate) {
      loadRecommendedTemplates();
    } else if (preselectedTemplate) {
      // Skip to datetime if template is preselected
      setCurrentStep('datetime');
    }
  }, [currentStep, preselectedTemplate]);

  const loadRecommendedTemplates = async () => {
    try {
      setLoadingTemplates(true);
      setError(null);
      const response = await api.getRecommendedTemplates({
        max_recommendations: 6,
        include_reasoning: true
      });
      setRecommendedTemplates(response.recommendations);
    } catch (err: any) {
      setError(err.message || 'Failed to load recommended templates');
    } finally {
      setLoadingTemplates(false);
    }
  };

  const handleTemplateSelect = (template: TemplateRecommendation) => {
    setSelectedTemplate(template);
    setCurrentStep('datetime');
  };

  const handleDateTimeNext = () => {
    if (!scheduledDateTime) {
      setError('Please select a date and time for your interview');
      return;
    }

    // Validate that the date is in the future
    const selectedDate = new Date(scheduledDateTime);
    const now = new Date();
    if (selectedDate <= now) {
      setError('Please select a future date and time');
      return;
    }

    setError(null);
    setCurrentStep('details');
  };

  const handleDetailsNext = () => {
    setCurrentStep('confirmation');
  };

  const handleScheduleInterview = async () => {
    try {
      setLoading(true);
      setError(null);

      const interviewData = {
        interview_type: selectedTemplate?.template.interview_type || customInterviewType,
        template_id: selectedTemplate?.template.id,
        scheduled_at: scheduledDateTime,
        notes: notes.trim() || undefined,
        metadata: {
          scheduled_via: 'scheduler',
          recommendation_score: selectedTemplate?.recommendation_score,
          estimated_duration: selectedTemplate?.estimated_duration
        }
      };

      const interview = await api.createInterview(interviewData);

      if (onScheduled) {
        onScheduled(interview);
      }

      if (onClose) {
        onClose();
      }
    } catch (err: any) {
      setError(err.message || 'Failed to schedule interview');
    } finally {
      setLoading(false);
    }
  };

  const goBack = () => {
    const stepOrder: (typeof currentStep)[] = ['template', 'datetime', 'details', 'confirmation'];
    const currentIndex = stepOrder.indexOf(currentStep);
    if (currentIndex > 0) {
      setCurrentStep(stepOrder[currentIndex - 1]);
    }
  };

  const getStepNumber = (stepId: string) => {
    return SCHEDULE_STEPS.findIndex(step => step.id === stepId) + 1;
  };

  const formatDateTime = (dateTime: string) => {
    return new Date(dateTime).toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // Get next available time slots (mock implementation)
  const getNextAvailableSlots = () => {
    const slots = [];
    const now = new Date();

    for (let i = 1; i <= 7; i++) {
      const date = new Date(now);
      date.setDate(date.getDate() + i);

      // Morning slot
      const morning = new Date(date);
      morning.setHours(9, 0, 0, 0);
      slots.push(morning);

      // Afternoon slot
      const afternoon = new Date(date);
      afternoon.setHours(14, 0, 0, 0);
      slots.push(afternoon);
    }

    return slots.slice(0, 6); // Return first 6 slots
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 'template':
        return (
          <div className="space-y-6">
            <div className="text-center">
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                Choose Your Interview Template
              </h3>
              <p className="text-gray-600">
                Select a template that matches your interview goals
              </p>
            </div>

            {loadingTemplates ? (
              <div className="flex justify-center py-8">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
              </div>
            ) : recommendedTemplates.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {recommendedTemplates.map((template) => (
                  <div
                    key={template.template.id}
                    onClick={() => handleTemplateSelect(template)}
                    className="border border-gray-200 rounded-lg p-4 hover:border-blue-300 hover:bg-blue-50 cursor-pointer transition-all"
                  >
                    <div className="flex justify-between items-start mb-2">
                      <h4 className="font-medium text-gray-900">{template.template.name}</h4>
                      <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full">
                        {Math.round(template.recommendation_score * 100)}% match
                      </span>
                    </div>

                    <p className="text-sm text-gray-600 mb-3">
                      {template.template.description}
                    </p>

                    <div className="flex justify-between items-center text-xs text-gray-500">
                      <span>{template.estimated_duration} minutes</span>
                      <span className="capitalize">{template.difficulty_match} difficulty</span>
                    </div>

                    {template.recommendation_reasons.length > 0 && (
                      <div className="mt-3 pt-3 border-t border-gray-100">
                        <div className="text-xs text-gray-600">
                          <strong>Why recommended:</strong> {template.recommendation_reasons[0]}
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8">
                <p className="text-gray-600 mb-4">No recommended templates available</p>
                <div className="space-y-3">
                  <p className="text-sm text-gray-500">Create a custom interview:</p>
                  <select
                    value={customInterviewType}
                    onChange={(e) => setCustomInterviewType(e.target.value as InterviewType)}
                    className="border border-gray-300 rounded-md px-3 py-2"
                  >
                    {Object.values(InterviewType).map(type => (
                      <option key={type} value={type}>
                        {type.replace('_', ' ')}
                      </option>
                    ))}
                  </select>
                  <button
                    onClick={() => setCurrentStep('datetime')}
                    className="ml-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                  >
                    Continue
                  </button>
                </div>
              </div>
            )}
          </div>
        );

      case 'datetime':
        return (
          <div className="space-y-6">
            <div className="text-center">
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                Schedule Your Interview
              </h3>
              <p className="text-gray-600">
                Choose a convenient date and time
              </p>
            </div>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Select Date & Time
                </label>
                <input
                  type="datetime-local"
                  value={scheduledDateTime}
                  onChange={(e) => setScheduledDateTime(e.target.value)}
                  min={new Date().toISOString().slice(0, 16)}
                  className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>

              <div>
                <p className="text-sm font-medium text-gray-700 mb-2">Quick Select:</p>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
                  {getNextAvailableSlots().map((slot, index) => (
                    <button
                      key={index}
                      onClick={() => setScheduledDateTime(slot.toISOString().slice(0, 16))}
                      className="text-sm border border-gray-300 rounded-md px-3 py-2 hover:bg-gray-50 text-left"
                    >
                      <div className="font-medium">
                        {slot.toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' })}
                      </div>
                      <div className="text-gray-600">
                        {slot.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}
                      </div>
                    </button>
                  ))}
                </div>
              </div>
            </div>

            <div className="flex justify-between">
              <button
                onClick={goBack}
                className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
              >
                Back
              </button>
              <button
                onClick={handleDateTimeNext}
                disabled={!scheduledDateTime}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Continue
              </button>
            </div>
          </div>
        );

      case 'details':
        return (
          <div className="space-y-6">
            <div className="text-center">
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                Interview Details
              </h3>
              <p className="text-gray-600">
                Add any additional notes or special instructions
              </p>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Notes (Optional)
              </label>
              <textarea
                value={notes}
                onChange={(e) => setNotes(e.target.value)}
                rows={4}
                placeholder="Add any special notes, preparation instructions, or focus areas for this interview..."
                className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div className="flex justify-between">
              <button
                onClick={goBack}
                className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
              >
                Back
              </button>
              <button
                onClick={handleDetailsNext}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
              >
                Continue
              </button>
            </div>
          </div>
        );

      case 'confirmation':
        return (
          <div className="space-y-6">
            <div className="text-center">
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                Confirm Interview
              </h3>
              <p className="text-gray-600">
                Review your interview details before scheduling
              </p>
            </div>

            <div className="bg-gray-50 rounded-lg p-4 space-y-3">
              <div className="flex justify-between">
                <span className="font-medium text-gray-700">Template:</span>
                <span className="text-gray-900">
                  {selectedTemplate?.template.name || `Custom ${customInterviewType.replace('_', ' ')}`}
                </span>
              </div>

              <div className="flex justify-between">
                <span className="font-medium text-gray-700">Type:</span>
                <span className="text-gray-900">
                  {(selectedTemplate?.template.interview_type || customInterviewType).replace('_', ' ')}
                </span>
              </div>

              <div className="flex justify-between">
                <span className="font-medium text-gray-700">Date & Time:</span>
                <span className="text-gray-900">{formatDateTime(scheduledDateTime)}</span>
              </div>

              {selectedTemplate && (
                <div className="flex justify-between">
                  <span className="font-medium text-gray-700">Estimated Duration:</span>
                  <span className="text-gray-900">{selectedTemplate.estimated_duration} minutes</span>
                </div>
              )}

              {notes && (
                <div>
                  <span className="font-medium text-gray-700">Notes:</span>
                  <p className="text-gray-900 mt-1 text-sm">{notes}</p>
                </div>
              )}
            </div>

            <div className="flex justify-between">
              <button
                onClick={goBack}
                className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
              >
                Back
              </button>
              <button
                onClick={handleScheduleInterview}
                disabled={loading}
                className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
              >
                {loading && (
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                )}
                Schedule Interview
              </button>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="max-w-2xl mx-auto">
      {/* Progress Steps */}
      <div className="mb-8">
        <div className="flex justify-between items-center">
          {SCHEDULE_STEPS.map((step, index) => (
            <div key={step.id} className="flex items-center">
              <div
                className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                  currentStep === step.id
                    ? 'bg-blue-600 text-white'
                    : getStepNumber(currentStep) > index + 1
                    ? 'bg-green-600 text-white'
                    : 'bg-gray-200 text-gray-600'
                }`}
              >
                {getStepNumber(currentStep) > index + 1 ? (
                  <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                  </svg>
                ) : (
                  index + 1
                )}
              </div>
              {index < SCHEDULE_STEPS.length - 1 && (
                <div className={`w-16 h-0.5 mx-2 ${
                  getStepNumber(currentStep) > index + 1 ? 'bg-green-600' : 'bg-gray-200'
                }`} />
              )}
            </div>
          ))}
        </div>

        <div className="mt-4 text-center">
          <h2 className="text-xl font-semibold text-gray-900">
            {SCHEDULE_STEPS.find(s => s.id === currentStep)?.title}
          </h2>
          <p className="text-gray-600 mt-1">
            {SCHEDULE_STEPS.find(s => s.id === currentStep)?.description}
          </p>
        </div>
      </div>

      {/* Error Alert */}
      {error && (
        <div className="mb-6 bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex">
            <svg className="w-5 h-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
            </svg>
            <div className="ml-3">
              <p className="text-sm text-red-800">{error}</p>
            </div>
          </div>
        </div>
      )}

      {/* Step Content */}
      <div className="bg-white border border-gray-200 rounded-lg p-6">
        {renderStepContent()}
      </div>
    </div>
  );
};

export default InterviewScheduler;