import React, { useState, useEffect } from 'react';
import { api } from '../../lib/api';
import { InterviewTemplate, InterviewType, QuestionCategory, QuestionDifficulty } from '../../types/interview';
import LoadingSpinner from '../common/LoadingSpinner';
import ErrorAlert from '../common/ErrorAlert';

interface InterviewTemplateManagerProps {
  onTemplateSelect?: (template: InterviewTemplate) => void;
  showActions?: boolean;
  selectionMode?: boolean;
}

interface TemplateFilters {
  type?: InterviewType;
  category?: QuestionCategory;
  difficulty?: QuestionDifficulty;
  isActive?: boolean;
  search?: string;
}

const InterviewTemplateManager: React.FC<InterviewTemplateManagerProps> = ({
  onTemplateSelect,
  showActions = true,
  selectionMode = false
}) => {
  const [templates, setTemplates] = useState<InterviewTemplate[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [filters, setFilters] = useState<TemplateFilters>({});
  const [showFilters, setShowFilters] = useState(false);
  const [selectedTemplate, setSelectedTemplate] = useState<InterviewTemplate | null>(null);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showPreview, setShowPreview] = useState(false);

  useEffect(() => {
    loadTemplates();
  }, [filters]);

  const loadTemplates = async () => {
    try {
      setLoading(true);
      setError(null);

      // Mock template data - in real implementation, this would come from the API
      const mockTemplates: InterviewTemplate[] = [
        {
          id: '1',
          name: 'Senior Frontend Developer',
          description: 'Comprehensive technical interview for senior frontend positions',
          interview_type: InterviewType.TECHNICAL,
          estimated_duration: 3600,
          questions: [
            {
              id: 'q1',
              question_text: 'Explain the difference between React hooks and class components.',
              category: QuestionCategory.TECHNICAL,
              difficulty: QuestionDifficulty.MEDIUM,
              expected_duration: 600,
              points: 10,
              is_required: true,
              context: 'Understanding modern React patterns'
            },
            {
              id: 'q2',
              question_text: 'How would you optimize a React application for performance?',
              category: QuestionCategory.TECHNICAL,
              difficulty: QuestionDifficulty.HARD,
              expected_duration: 900,
              points: 15,
              is_required: true,
              context: 'Performance optimization strategies'
            },
            {
              id: 'q3',
              question_text: 'Describe your experience working in agile development teams.',
              category: QuestionCategory.BEHAVIORAL,
              difficulty: QuestionDifficulty.EASY,
              expected_duration: 300,
              points: 5,
              is_required: false,
              context: 'Team collaboration skills'
            }
          ],
          sections: ['introduction', 'technical', 'behavioral'],
          is_active: true,
          created_at: '2024-01-15T10:00:00Z',
          updated_at: '2024-01-20T14:30:00Z',
          created_by: 'admin',
          tags: ['frontend', 'react', 'senior']
        },
        {
          id: '2',
          name: 'Backend Engineer - Node.js',
          description: 'Technical assessment for Node.js backend developers',
          interview_type: InterviewType.TECHNICAL,
          estimated_duration: 2700,
          questions: [
            {
              id: 'q4',
              question_text: 'Explain the event loop in Node.js and how it handles asynchronous operations.',
              category: QuestionCategory.TECHNICAL,
              difficulty: QuestionDifficulty.HARD,
              expected_duration: 900,
              points: 15,
              is_required: true,
              context: 'Core Node.js concepts'
            },
            {
              id: 'q5',
              question_text: 'How would you design a RESTful API for a blog application?',
              category: QuestionCategory.SYSTEM_DESIGN,
              difficulty: QuestionDifficulty.MEDIUM,
              expected_duration: 1200,
              points: 20,
              is_required: true,
              context: 'API design principles'
            }
          ],
          sections: ['introduction', 'technical', 'system_design'],
          is_active: true,
          created_at: '2024-01-10T09:00:00Z',
          updated_at: '2024-01-18T16:45:00Z',
          created_by: 'admin',
          tags: ['backend', 'node.js', 'api']
        },
        {
          id: '3',
          name: 'Leadership & Management',
          description: 'Behavioral interview template for leadership positions',
          interview_type: InterviewType.BEHAVIORAL,
          estimated_duration: 2400,
          questions: [
            {
              id: 'q6',
              question_text: 'Tell me about a time when you had to lead a team through a difficult project.',
              category: QuestionCategory.BEHAVIORAL,
              difficulty: QuestionDifficulty.MEDIUM,
              expected_duration: 600,
              points: 10,
              is_required: true,
              context: 'Leadership experience'
            },
            {
              id: 'q7',
              question_text: 'How do you handle conflicts within your team?',
              category: QuestionCategory.BEHAVIORAL,
              difficulty: QuestionDifficulty.MEDIUM,
              expected_duration: 480,
              points: 8,
              is_required: true,
              context: 'Conflict resolution skills'
            }
          ],
          sections: ['introduction', 'behavioral', 'situational'],
          is_active: true,
          created_at: '2024-01-12T11:30:00Z',
          updated_at: '2024-01-22T10:15:00Z',
          created_by: 'hr_manager',
          tags: ['leadership', 'management', 'behavioral']
        },
        {
          id: '4',
          name: 'System Architecture Design',
          description: 'Advanced system design interview for senior engineers',
          interview_type: InterviewType.SYSTEM_DESIGN,
          estimated_duration: 4500,
          questions: [
            {
              id: 'q8',
              question_text: 'Design a URL shortening service like bit.ly. Consider scalability, reliability, and performance.',
              category: QuestionCategory.SYSTEM_DESIGN,
              difficulty: QuestionDifficulty.HARD,
              expected_duration: 2700,
              points: 30,
              is_required: true,
              context: 'Large-scale system design'
            }
          ],
          sections: ['introduction', 'system_design', 'deep_dive'],
          is_active: false,
          created_at: '2024-01-08T14:00:00Z',
          updated_at: '2024-01-25T09:30:00Z',
          created_by: 'senior_architect',
          tags: ['system-design', 'architecture', 'scalability']
        }
      ];

      // Apply filters
      let filteredTemplates = mockTemplates;

      if (filters.type) {
        filteredTemplates = filteredTemplates.filter(t => t.interview_type === filters.type);
      }

      if (filters.isActive !== undefined) {
        filteredTemplates = filteredTemplates.filter(t => t.is_active === filters.isActive);
      }

      if (filters.search) {
        const searchLower = filters.search.toLowerCase();
        filteredTemplates = filteredTemplates.filter(t =>
          t.name.toLowerCase().includes(searchLower) ||
          t.description.toLowerCase().includes(searchLower) ||
          t.tags.some(tag => tag.toLowerCase().includes(searchLower))
        );
      }

      setTemplates(filteredTemplates);
    } catch (err: any) {
      setError(err.message || 'Failed to load templates');
    } finally {
      setLoading(false);
    }
  };

  const handleTemplateSelect = (template: InterviewTemplate) => {
    if (selectionMode && onTemplateSelect) {
      onTemplateSelect(template);
    } else {
      setSelectedTemplate(template);
      setShowPreview(true);
    }
  };

  const handleCreateTemplate = () => {
    setShowCreateModal(true);
  };

  const handleDuplicateTemplate = (template: InterviewTemplate) => {
    // In real implementation, this would duplicate the template
    console.log('Duplicating template:', template.id);
  };

  const handleToggleActive = async (template: InterviewTemplate) => {
    try {
      // In real implementation, this would update the template status
      const updatedTemplates = templates.map(t =>
        t.id === template.id ? { ...t, is_active: !t.is_active } : t
      );
      setTemplates(updatedTemplates);
    } catch (err: any) {
      alert(`Failed to update template: ${err.message}`);
    }
  };

  const handleDeleteTemplate = async (template: InterviewTemplate) => {
    if (!confirm(`Are you sure you want to delete "${template.name}"?`)) {
      return;
    }

    try {
      // In real implementation, this would delete the template
      setTemplates(templates.filter(t => t.id !== template.id));
    } catch (err: any) {
      alert(`Failed to delete template: ${err.message}`);
    }
  };

  const formatDuration = (seconds: number) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    return hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;
  };

  const getTypeColor = (type: InterviewType) => {
    const colors = {
      [InterviewType.TECHNICAL]: 'bg-blue-100 text-blue-800',
      [InterviewType.BEHAVIORAL]: 'bg-green-100 text-green-800',
      [InterviewType.SYSTEM_DESIGN]: 'bg-purple-100 text-purple-800',
      [InterviewType.CODING]: 'bg-orange-100 text-orange-800'
    };
    return colors[type] || 'bg-gray-100 text-gray-800';
  };

  const getDifficultyColor = (difficulty: QuestionDifficulty) => {
    const colors = {
      [QuestionDifficulty.EASY]: 'text-green-600',
      [QuestionDifficulty.MEDIUM]: 'text-yellow-600',
      [QuestionDifficulty.HARD]: 'text-red-600'
    };
    return colors[difficulty] || 'text-gray-600';
  };

  if (loading) {
    return <LoadingSpinner />;
  }

  if (error) {
    return <ErrorAlert message={error} onRetry={loadTemplates} />;
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Interview Templates</h2>
          <p className="text-gray-600">Manage and organize your interview templates</p>
        </div>

        {showActions && (
          <div className="flex items-center gap-3">
            <button
              onClick={() => setShowFilters(!showFilters)}
              className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 flex items-center gap-2"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.207A1 1 0 013 6.5V4z" />
              </svg>
              Filters
            </button>

            <button
              onClick={handleCreateTemplate}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
              </svg>
              Create Template
            </button>
          </div>
        )}
      </div>

      {/* Filters Panel */}
      {showFilters && (
        <div className="bg-white border border-gray-200 rounded-lg p-6">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Search</label>
              <input
                type="text"
                value={filters.search || ''}
                onChange={(e) => setFilters({ ...filters, search: e.target.value })}
                placeholder="Search templates..."
                className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Type</label>
              <select
                value={filters.type || ''}
                onChange={(e) => setFilters({ ...filters, type: e.target.value as InterviewType || undefined })}
                className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="">All Types</option>
                {Object.values(InterviewType).map(type => (
                  <option key={type} value={type}>{type.replace('_', ' ')}</option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Status</label>
              <select
                value={filters.isActive === undefined ? '' : filters.isActive.toString()}
                onChange={(e) => setFilters({
                  ...filters,
                  isActive: e.target.value === '' ? undefined : e.target.value === 'true'
                })}
                className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="">All Status</option>
                <option value="true">Active</option>
                <option value="false">Inactive</option>
              </select>
            </div>

            <div className="flex items-end">
              <button
                onClick={() => setFilters({})}
                className="w-full px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
              >
                Clear Filters
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Templates Grid */}
      {templates.length > 0 ? (
        <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
          {templates.map((template) => (
            <div
              key={template.id}
              className={`bg-white border border-gray-200 rounded-lg p-6 hover:shadow-md transition-shadow ${
                selectionMode ? 'cursor-pointer hover:border-blue-300' : ''
              }`}
              onClick={() => selectionMode && handleTemplateSelect(template)}
            >
              {/* Template Header */}
              <div className="flex items-start justify-between mb-4">
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-2">
                    <h3 className="font-semibold text-gray-900">{template.name}</h3>
                    {!template.is_active && (
                      <span className="px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full">
                        Inactive
                      </span>
                    )}
                  </div>
                  <p className="text-sm text-gray-600 mb-3">{template.description}</p>
                </div>

                {showActions && !selectionMode && (
                  <div className="relative">
                    <button className="text-gray-400 hover:text-gray-600">
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z" />
                      </svg>
                    </button>
                  </div>
                )}
              </div>

              {/* Template Details */}
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${getTypeColor(template.interview_type)}`}>
                    {template.interview_type.replace('_', ' ')}
                  </span>
                  <span className="text-sm text-gray-600">
                    {formatDuration(template.estimated_duration)}
                  </span>
                </div>

                <div className="text-sm text-gray-600">
                  <div className="flex items-center justify-between">
                    <span>{template.questions.length} questions</span>
                    <span>{template.sections.length} sections</span>
                  </div>
                </div>

                {/* Question Difficulty Distribution */}
                <div className="flex items-center gap-2 text-xs">
                  {[QuestionDifficulty.EASY, QuestionDifficulty.MEDIUM, QuestionDifficulty.HARD].map(difficulty => {
                    const count = template.questions.filter(q => q.difficulty === difficulty).length;
                    return count > 0 ? (
                      <span key={difficulty} className={`${getDifficultyColor(difficulty)} font-medium`}>
                        {count} {difficulty.toLowerCase()}
                      </span>
                    ) : null;
                  })}
                </div>

                {/* Tags */}
                {template.tags.length > 0 && (
                  <div className="flex flex-wrap gap-1">
                    {template.tags.slice(0, 3).map(tag => (
                      <span key={tag} className="px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded">
                        {tag}
                      </span>
                    ))}
                    {template.tags.length > 3 && (
                      <span className="px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded">
                        +{template.tags.length - 3} more
                      </span>
                    )}
                  </div>
                )}
              </div>

              {/* Actions */}
              {showActions && !selectionMode && (
                <div className="mt-4 pt-4 border-t border-gray-100">
                  <div className="flex items-center gap-2">
                    <button
                      onClick={() => handleTemplateSelect(template)}
                      className="flex-1 px-3 py-2 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                    >
                      Preview
                    </button>
                    <button
                      onClick={() => handleDuplicateTemplate(template)}
                      className="px-3 py-2 text-sm border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
                    >
                      Duplicate
                    </button>
                    <button
                      onClick={() => handleToggleActive(template)}
                      className={`px-3 py-2 text-sm rounded-lg ${
                        template.is_active
                          ? 'border border-yellow-300 text-yellow-700 hover:bg-yellow-50'
                          : 'border border-green-300 text-green-700 hover:bg-green-50'
                      }`}
                    >
                      {template.is_active ? 'Deactivate' : 'Activate'}
                    </button>
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
      ) : (
        <div className="text-center py-12">
          <div className="w-16 h-16 mx-auto mb-4 text-gray-400">
            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">No templates found</h3>
          <p className="text-gray-600 mb-6">
            {Object.keys(filters).length > 0
              ? 'No templates match your current filters.'
              : 'Get started by creating your first interview template.'
            }
          </p>
          {showActions && (
            <button
              onClick={handleCreateTemplate}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              Create Template
            </button>
          )}
        </div>
      )}

      {/* Template Preview Modal */}
      {showPreview && selectedTemplate && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-4xl max-h-[90vh] overflow-y-auto p-6">
            <div className="flex justify-between items-start mb-6">
              <div>
                <h3 className="text-xl font-semibold text-gray-900">{selectedTemplate.name}</h3>
                <p className="text-gray-600">{selectedTemplate.description}</p>
              </div>
              <button
                onClick={() => setShowPreview(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            <div className="space-y-6">
              {/* Template Info */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 p-4 bg-gray-50 rounded-lg">
                <div>
                  <span className="text-sm text-gray-600">Type</span>
                  <p className="font-medium">{selectedTemplate.interview_type.replace('_', ' ')}</p>
                </div>
                <div>
                  <span className="text-sm text-gray-600">Duration</span>
                  <p className="font-medium">{formatDuration(selectedTemplate.estimated_duration)}</p>
                </div>
                <div>
                  <span className="text-sm text-gray-600">Questions</span>
                  <p className="font-medium">{selectedTemplate.questions.length}</p>
                </div>
                <div>
                  <span className="text-sm text-gray-600">Sections</span>
                  <p className="font-medium">{selectedTemplate.sections.length}</p>
                </div>
              </div>

              {/* Questions */}
              <div>
                <h4 className="font-medium text-gray-900 mb-4">Questions</h4>
                <div className="space-y-4">
                  {selectedTemplate.questions.map((question, index) => (
                    <div key={question.id} className="border border-gray-200 rounded-lg p-4">
                      <div className="flex items-start justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <span className="text-sm font-medium text-gray-600">Q{index + 1}</span>
                          {question.is_required && (
                            <span className="px-2 py-1 bg-red-100 text-red-800 text-xs rounded-full">
                              Required
                            </span>
                          )}
                          <span className={`px-2 py-1 text-xs rounded-full ${getDifficultyColor(question.difficulty)} bg-opacity-10`}>
                            {question.difficulty}
                          </span>
                        </div>
                        <div className="text-sm text-gray-600">
                          {formatDuration(question.expected_duration)} • {question.points} pts
                        </div>
                      </div>
                      <p className="text-gray-900 mb-2">{question.question_text}</p>
                      {question.context && (
                        <p className="text-sm text-gray-600 italic">Context: {question.context}</p>
                      )}
                    </div>
                  ))}
                </div>
              </div>

              {/* Actions */}
              <div className="flex justify-end gap-3 pt-4 border-t border-gray-200">
                <button
                  onClick={() => setShowPreview(false)}
                  className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
                >
                  Close
                </button>
                {showActions && (
                  <>
                    <button
                      onClick={() => handleDuplicateTemplate(selectedTemplate)}
                      className="px-4 py-2 border border-blue-300 text-blue-700 rounded-lg hover:bg-blue-50"
                    >
                      Duplicate
                    </button>
                    <button
                      onClick={() => {
                        setShowPreview(false);
                        // Navigate to edit template
                        window.location.href = `/interviews/templates/${selectedTemplate.id}/edit`;
                      }}
                      className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                    >
                      Edit Template
                    </button>
                  </>
                )}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default InterviewTemplateManager;