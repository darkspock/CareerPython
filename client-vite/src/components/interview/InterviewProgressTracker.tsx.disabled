import React, { useState, useEffect, useRef } from 'react';
import { api } from '../../lib/api';
import { InterviewProgress, ConversationalQuestion, InterviewStatus } from '../../types/interview';

interface InterviewProgressTrackerProps {
  interviewId: string;
  showRealTimeUpdates?: boolean;
  onProgressUpdate?: (progress: InterviewProgress) => void;
  compact?: boolean;
}

const InterviewProgressTracker: React.FC<InterviewProgressTrackerProps> = ({
  interviewId,
  showRealTimeUpdates = false,
  onProgressUpdate,
  compact = false
}) => {
  const [progress, setProgress] = useState<InterviewProgress | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isConnected, setIsConnected] = useState(false);
  const eventSourceRef = useRef<EventSource | null>(null);
  const pollIntervalRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    loadProgress();

    if (showRealTimeUpdates) {
      connectToProgressStream();
    } else {
      // Poll for updates every 30 seconds for non-real-time mode
      pollIntervalRef.current = setInterval(loadProgress, 30000);
    }

    return () => {
      if (eventSourceRef.current) {
        eventSourceRef.current.close();
      }
      if (pollIntervalRef.current) {
        clearInterval(pollIntervalRef.current);
      }
    };
  }, [interviewId, showRealTimeUpdates]);

  const loadProgress = async () => {
    try {
      setError(null);
      const progressData = await api.getInterviewProgress(interviewId);
      setProgress(progressData);
      if (onProgressUpdate) {
        onProgressUpdate(progressData);
      }
    } catch (err: any) {
      setError(err.message || 'Failed to load progress');
    } finally {
      setLoading(false);
    }
  };

  const connectToProgressStream = () => {
    try {
      if (eventSourceRef.current) {
        eventSourceRef.current.close();
      }

      const eventSource = api.createProgressStream(interviewId);
      eventSourceRef.current = eventSource;

      eventSource.onopen = () => {
        setIsConnected(true);
        setError(null);
      };

      eventSource.onmessage = (event) => {
        try {
          const progressData = JSON.parse(event.data);
          setProgress(progressData);
          if (onProgressUpdate) {
            onProgressUpdate(progressData);
          }
        } catch (err) {
          console.error('Failed to parse progress data:', err);
        }
      };

      eventSource.onerror = (event) => {
        console.error('Progress stream error:', event);
        setIsConnected(false);
        setError('Connection to progress updates lost');

        // Attempt to reconnect after 5 seconds
        setTimeout(() => {
          if (showRealTimeUpdates) {
            connectToProgressStream();
          }
        }, 5000);
      };

      eventSource.addEventListener('heartbeat', (event) => {
        // Keep connection alive
        setIsConnected(true);
      });

      eventSource.addEventListener('interview_finished', (event) => {
        const data = JSON.parse(event.data);
        setIsConnected(false);
        // Reload final progress
        loadProgress();
      });

    } catch (err: any) {
      setError('Failed to connect to real-time updates');
      setIsConnected(false);
    }
  };

  const getStatusColor = (status: string) => {
    const colors = {
      [InterviewStatus.SCHEDULED]: 'text-blue-600 bg-blue-100',
      [InterviewStatus.IN_PROGRESS]: 'text-green-600 bg-green-100',
      [InterviewStatus.PAUSED]: 'text-yellow-600 bg-yellow-100',
      [InterviewStatus.COMPLETED]: 'text-purple-600 bg-purple-100',
      [InterviewStatus.CANCELLED]: 'text-red-600 bg-red-100',
      [InterviewStatus.FAILED]: 'text-red-600 bg-red-100',
    };
    return colors[status as InterviewStatus] || 'text-gray-600 bg-gray-100';
  };

  const formatTime = (seconds: number) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    if (hours > 0) {
      return `${hours}h ${minutes}m`;
    }
    return `${minutes}m`;
  };

  if (loading) {
    return (
      <div className={`${compact ? 'p-3' : 'p-6'} bg-white border border-gray-200 rounded-lg`}>
        <div className="animate-pulse space-y-3">
          <div className="h-4 bg-gray-200 rounded w-1/3"></div>
          <div className="h-8 bg-gray-200 rounded"></div>
          <div className="h-4 bg-gray-200 rounded w-1/2"></div>
        </div>
      </div>
    );
  }

  if (error && !progress) {
    return (
      <div className={`${compact ? 'p-3' : 'p-6'} bg-white border border-red-200 rounded-lg`}>
        <div className="flex items-center gap-2 text-red-600">
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <span className="text-sm">{error}</span>
        </div>
        <button
          onClick={loadProgress}
          className="mt-2 text-sm text-red-600 hover:text-red-800 underline"
        >
          Try again
        </button>
      </div>
    );
  }

  if (!progress) {
    return (
      <div className={`${compact ? 'p-3' : 'p-6'} bg-white border border-gray-200 rounded-lg`}>
        <p className="text-gray-500 text-sm">No progress data available</p>
      </div>
    );
  }

  if (compact) {
    return (
      <div className="bg-white border border-gray-200 rounded-lg p-3">
        <div className="flex items-center justify-between mb-2">
          <div className="flex items-center gap-2">
            <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(progress.status)}`}>
              {progress.status.replace('_', ' ')}
            </span>
            {showRealTimeUpdates && (
              <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-400' : 'bg-red-400'}`} />
            )}
          </div>
          <span className="text-sm font-medium text-gray-900">
            {Math.round(progress.completion_percentage)}%
          </span>
        </div>

        <div className="w-full bg-gray-200 rounded-full h-2 mb-2">
          <div
            className="bg-blue-600 h-2 rounded-full transition-all duration-500"
            style={{ width: `${progress.completion_percentage}%` }}
          />
        </div>

        <div className="text-xs text-gray-600">
          {progress.answered_questions} of {progress.total_questions} questions
          {progress.current_section && (
            <span> â€¢ {progress.current_section}</span>
          )}
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white border border-gray-200 rounded-lg p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-lg font-medium text-gray-900">Interview Progress</h3>
          {showRealTimeUpdates && (
            <div className="flex items-center gap-2 mt-1">
              <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-400' : 'bg-red-400'}`} />
              <span className="text-xs text-gray-600">
                {isConnected ? 'Live updates' : 'Reconnecting...'}
              </span>
            </div>
          )}
        </div>

        <div className="text-right">
          <div className="text-2xl font-bold text-gray-900">
            {Math.round(progress.completion_percentage)}%
          </div>
          <div className={`text-sm px-2 py-1 rounded-full font-medium ${getStatusColor(progress.status)}`}>
            {progress.status.replace('_', ' ')}
          </div>
        </div>
      </div>

      {/* Progress Bar */}
      <div className="space-y-2">
        <div className="flex justify-between text-sm text-gray-600">
          <span>Overall Progress</span>
          <span>{progress.answered_questions} of {progress.total_questions} questions</span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-3">
          <div
            className="bg-gradient-to-r from-blue-500 to-blue-600 h-3 rounded-full transition-all duration-500 shadow-sm"
            style={{ width: `${progress.completion_percentage}%` }}
          />
        </div>
      </div>

      {/* Section Progress */}
      {progress.sections_completed.length > 0 && (
        <div className="space-y-3">
          <h4 className="font-medium text-gray-900">Section Progress</h4>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            {progress.sections_completed.map((section, index) => (
              <div key={index} className="flex items-center gap-2 text-sm">
                <div className="w-4 h-4 bg-green-100 rounded-full flex items-center justify-center">
                  <svg className="w-3 h-3 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                  </svg>
                </div>
                <span className="text-gray-700 capitalize">{section.replace('_', ' ')}</span>
              </div>
            ))}

            {progress.current_section && (
              <div className="flex items-center gap-2 text-sm">
                <div className="w-4 h-4 bg-blue-100 rounded-full flex items-center justify-center">
                  <div className="w-2 h-2 bg-blue-600 rounded-full animate-pulse" />
                </div>
                <span className="text-gray-700 capitalize">
                  {progress.current_section.replace('_', ' ')} (current)
                </span>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Current Question */}
      {progress.current_question && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <h4 className="font-medium text-blue-900 mb-2">Current Question</h4>
          <div className="space-y-2">
            <div className="flex items-center gap-2 text-sm">
              <span className="text-blue-700">Section:</span>
              <span className="text-blue-900 capitalize">
                {progress.current_question.section.replace('_', ' ')}
              </span>
              {progress.current_question.is_follow_up && (
                <span className="px-2 py-1 bg-blue-200 text-blue-800 text-xs rounded-full">
                  Follow-up
                </span>
              )}
            </div>
            <p className="text-blue-900">{progress.current_question.question_text}</p>
            {progress.current_question.context && (
              <p className="text-blue-700 text-sm italic">
                Context: {progress.current_question.context}
              </p>
            )}
          </div>
        </div>
      )}

      {/* Status Information */}
      <div className="grid grid-cols-2 gap-4 pt-4 border-t border-gray-200">
        <div className="text-center">
          <div className="text-2xl font-bold text-gray-900">
            {progress.answered_questions}
          </div>
          <div className="text-sm text-gray-600">Questions Answered</div>
        </div>

        <div className="text-center">
          <div className="text-2xl font-bold text-gray-900">
            {progress.total_questions - progress.answered_questions}
          </div>
          <div className="text-sm text-gray-600">Questions Remaining</div>
        </div>
      </div>

      {/* Pause Information */}
      {progress.is_paused && (
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
          <div className="flex items-center gap-2">
            <svg className="w-5 h-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <span className="font-medium text-yellow-900">Interview Paused</span>
          </div>
          {progress.pause_reason && (
            <p className="text-yellow-800 text-sm mt-1">
              Reason: {progress.pause_reason}
            </p>
          )}
          {progress.can_resume && (
            <button className="mt-2 px-3 py-1 bg-yellow-600 text-white text-sm rounded-lg hover:bg-yellow-700">
              Resume Interview
            </button>
          )}
        </div>
      )}

      {/* Error Display */}
      {error && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex items-center gap-2">
            <svg className="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <span className="text-red-900 text-sm">{error}</span>
          </div>
          <button
            onClick={loadProgress}
            className="mt-2 text-sm text-red-600 hover:text-red-800 underline"
          >
            Reload progress
          </button>
        </div>
      )}
    </div>
  );
};

export default InterviewProgressTracker;