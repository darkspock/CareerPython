import React, { useState, useEffect } from 'react';
import { api } from '../../lib/api';
import {
  Interview,
  InterviewProgress,
  ConversationalQuestion,
  QuestionType,
  QuestionDifficulty,
  QuestionCategory
} from '../../types/interview';
import LoadingSpinner from '../common/LoadingSpinner';
import ErrorAlert from '../common/ErrorAlert';

interface InterviewResponse {
  id: string;
  questionId: string;
  question: ConversationalQuestion;
  originalResponse: {
    content: any;
    type: 'text' | 'multiple_choice' | 'rating' | 'code' | 'file_upload' | 'audio' | 'video' | 'image';
    submittedAt: string;
    timeSpent: number;
    metadata?: {
      confidence?: number;
      wordCount?: number;
      codeLanguage?: string;
      fileType?: string;
      audioLength?: number;
      videoLength?: number;
    };
  };
  currentResponse?: {
    content: any;
    type: string;
    modifiedAt?: string;
    metadata?: any;
  };
  aiAnalysis: {
    score: number;
    strengths: string[];
    improvements: string[];
    detailedFeedback: string;
    rubricScores: {
      clarity: number;
      accuracy: number;
      completeness: number;
      communication: number;
      technicalSkill?: number;
    };
    comparisonToIdeal: {
      similarity: number;
      missingElements: string[];
      unexpectedElements: string[];
    };
  };
  isEditable: boolean;
  editTimeRemaining?: number; // seconds
  hasBeenModified: boolean;
}

interface InterviewResponseReviewProps {
  interviewId: string;
  allowEditing?: boolean;
  onResponseUpdate?: (responseId: string, newContent: any) => void;
  onSaveChanges?: (responses: InterviewResponse[]) => void;
  readOnly?: boolean;
}

const InterviewResponseReview: React.FC<InterviewResponseReviewProps> = ({
  interviewId,
  allowEditing = true,
  onResponseUpdate,
  onSaveChanges,
  readOnly = false
}) => {
  const [responses, setResponses] = useState<InterviewResponse[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeResponseId, setActiveResponseId] = useState<string | null>(null);
  const [editingResponse, setEditingResponse] = useState<string | null>(null);
  const [unsavedChanges, setUnsavedChanges] = useState<Set<string>>(new Set());
  const [filterBy, setFilterBy] = useState<'all' | 'low_score' | 'needs_improvement' | 'modified'>('all');
  const [sortBy, setSortBy] = useState<'question_order' | 'score_asc' | 'score_desc' | 'time_spent'>('question_order');
  const [expandedAnalysis, setExpandedAnalysis] = useState<Set<string>>(new Set());

  useEffect(() => {
    loadResponses();
  }, [interviewId]);

  const loadResponses = async () => {
    try {
      setLoading(true);
      setError(null);

      // In real implementation, this would fetch from API
      // Mock comprehensive response data
      const mockResponses: InterviewResponse[] = [
        {
          id: 'resp-1',
          questionId: 'q-1',
          question: {
            question_id: 'q-1',
            question_text: 'Tell me about yourself and your background in software development.',
            question_type: QuestionType.TEXT,
            category: QuestionCategory.BEHAVIORAL,
            difficulty: QuestionDifficulty.EASY,
            expected_duration: 180,
            context: 'Opening question to establish rapport and understand candidate background',
            follow_up_questions: [],
            multimedia_assets: []
          },
          originalResponse: {
            content: "I'm a software developer with 5 years of experience working primarily with JavaScript and Python. I've worked at two startups where I built web applications and APIs. I enjoy problem-solving and learning new technologies. In my current role, I work on both frontend and backend development, and I've been involved in several successful product launches.",
            type: 'text',
            submittedAt: '2024-01-20T10:15:00Z',
            timeSpent: 165,
            metadata: {
              confidence: 7,
              wordCount: 58
            }
          },
          aiAnalysis: {
            score: 7.5,
            strengths: [
              'Clear communication of experience level',
              'Mentions relevant technologies',
              'Shows enthusiasm for learning'
            ],
            improvements: [
              'Could provide more specific examples',
              'Missing discussion of achievements or impact',
              'Could elaborate on problem-solving examples'
            ],
            detailedFeedback: 'This is a solid introductory response that covers the basics well. You clearly communicated your experience level and technical background. To strengthen this response, consider adding 1-2 specific examples of projects or achievements that demonstrate your skills. Quantifying your impact (e.g., "reduced load times by 40%") would make your response more compelling.',
            rubricScores: {
              clarity: 8.0,
              accuracy: 7.5,
              completeness: 6.5,
              communication: 8.0
            },
            comparisonToIdeal: {
              similarity: 75,
              missingElements: ['Specific project examples', 'Quantified achievements', 'Career goals'],
              unexpectedElements: []
            }
          },
          isEditable: true,
          editTimeRemaining: 1800, // 30 minutes
          hasBeenModified: false
        },
        {
          id: 'resp-2',
          questionId: 'q-2',
          question: {
            question_id: 'q-2',
            question_text: 'Implement a function that finds the longest palindromic substring in a given string.',
            question_type: QuestionType.CODE,
            category: QuestionCategory.TECHNICAL,
            difficulty: QuestionDifficulty.MEDIUM,
            expected_duration: 900,
            context: 'Algorithm problem to assess coding skills and problem-solving approach',
            follow_up_questions: [],
            multimedia_assets: []
          },
          originalResponse: {
            content: `function longestPalindrome(s) {
    if (!s || s.length < 2) return s;

    let start = 0;
    let maxLen = 1;

    for (let i = 0; i < s.length; i++) {
        // Check for odd length palindromes
        let len1 = expandFromCenter(s, i, i);
        // Check for even length palindromes
        let len2 = expandFromCenter(s, i, i + 1);

        let len = Math.max(len1, len2);
        if (len > maxLen) {
            maxLen = len;
            start = i - Math.floor((len - 1) / 2);
        }
    }

    return s.substring(start, start + maxLen);
}

function expandFromCenter(s, left, right) {
    while (left >= 0 && right < s.length && s[left] === s[right]) {
        left--;
        right++;
    }
    return right - left - 1;
}`,
            type: 'code',
            submittedAt: '2024-01-20T10:28:00Z',
            timeSpent: 780,
            metadata: {
              confidence: 8,
              codeLanguage: 'javascript'
            }
          },
          currentResponse: {
            content: `function longestPalindrome(s) {
    if (!s || s.length < 2) return s;

    let start = 0;
    let maxLen = 1;

    // Iterate through each character as potential center
    for (let i = 0; i < s.length; i++) {
        // Check for odd length palindromes (center at i)
        let len1 = expandFromCenter(s, i, i);
        // Check for even length palindromes (center between i and i+1)
        let len2 = expandFromCenter(s, i, i + 1);

        let len = Math.max(len1, len2);
        if (len > maxLen) {
            maxLen = len;
            start = i - Math.floor((len - 1) / 2);
        }
    }

    return s.substring(start, start + maxLen);
}

function expandFromCenter(s, left, right) {
    // Expand around center while characters match
    while (left >= 0 && right < s.length && s[left] === s[right]) {
        left--;
        right++;
    }
    return right - left - 1;
}

// Time complexity: O(n²), Space complexity: O(1)`,
            type: 'code',
            modifiedAt: '2024-01-20T10:35:00Z',
            metadata: {
              codeLanguage: 'javascript'
            }
          },
          aiAnalysis: {
            score: 9.0,
            strengths: [
              'Correct implementation of expand around centers approach',
              'Good edge case handling',
              'Clean, readable code structure',
              'Efficient O(n²) solution',
              'Added helpful comments in revision'
            ],
            improvements: [
              'Could mention alternative approaches (Manacher\'s algorithm)',
              'Could add example usage or test cases'
            ],
            detailedFeedback: 'Excellent solution! You correctly implemented the expand-around-centers approach, which is one of the most intuitive solutions for this problem. Your code handles edge cases well and is very readable. The revision with added comments and complexity analysis shows great attention to detail. This demonstrates strong algorithmic thinking and coding skills.',
            rubricScores: {
              clarity: 9.0,
              accuracy: 9.5,
              completeness: 8.5,
              communication: 8.0,
              technicalSkill: 9.0
            },
            comparisonToIdeal: {
              similarity: 95,
              missingElements: ['Alternative approach discussion'],
              unexpectedElements: []
            }
          },
          isEditable: true,
          editTimeRemaining: 1200,
          hasBeenModified: true
        },
        {
          id: 'resp-3',
          questionId: 'q-3',
          question: {
            question_id: 'q-3',
            question_text: 'Describe a challenging project you worked on and how you overcame the difficulties.',
            question_type: QuestionType.TEXT,
            category: QuestionCategory.BEHAVIORAL,
            difficulty: QuestionDifficulty.MEDIUM,
            expected_duration: 300,
            context: 'Behavioral question to assess problem-solving and resilience',
            follow_up_questions: [],
            multimedia_assets: []
          },
          originalResponse: {
            content: "I worked on a project to migrate our legacy system to microservices. It was challenging because the old system was complex and poorly documented. I had to spend time understanding the code, then break it down into smaller services. There were integration issues and performance problems. I solved it by working closely with the team and doing lots of testing.",
            type: 'text',
            submittedAt: '2024-01-20T10:45:00Z',
            timeSpent: 240,
            metadata: {
              confidence: 6,
              wordCount: 62
            }
          },
          aiAnalysis: {
            score: 5.5,
            strengths: [
              'Addresses the question directly',
              'Mentions a relevant technical challenge',
              'Shows collaborative approach'
            ],
            improvements: [
              'Lacks specific details and metrics',
              'Missing STAR structure (Situation, Task, Action, Result)',
              'Could quantify the impact and results',
              'Needs more detail on specific actions taken',
              'Missing discussion of lessons learned'
            ],
            detailedFeedback: 'Your response addresses the question but could be significantly strengthened with more specific details. Consider using the STAR method: clearly define the Situation and Task, provide specific Actions you took (beyond "working closely with the team"), and quantify the Results. For example, how long did the migration take? What specific performance improvements were achieved? What were the key lessons learned?',
            rubricScores: {
              clarity: 6.0,
              accuracy: 6.0,
              completeness: 4.5,
              communication: 5.5
            },
            comparisonToIdeal: {
              similarity: 45,
              missingElements: [
                'STAR structure',
                'Specific metrics and outcomes',
                'Detailed action steps',
                'Lessons learned',
                'Impact quantification'
              ],
              unexpectedElements: []
            }
          },
          isEditable: true,
          editTimeRemaining: 900,
          hasBeenModified: false
        }
      ];

      setResponses(mockResponses);

    } catch (err: any) {
      setError(err.message || 'Failed to load interview responses');
    } finally {
      setLoading(false);
    }
  };

  const updateResponse = (responseId: string, newContent: any) => {
    setResponses(prev => prev.map(response => {
      if (response.id === responseId) {
        const updatedResponse = {
          ...response,
          currentResponse: {
            content: newContent,
            type: response.originalResponse.type,
            modifiedAt: new Date().toISOString(),
            metadata: response.originalResponse.metadata
          },
          hasBeenModified: true
        };

        setUnsavedChanges(prev => new Set([...prev, responseId]));
        onResponseUpdate?.(responseId, newContent);

        return updatedResponse;
      }
      return response;
    }));
  };

  const saveChanges = async () => {
    try {
      // In real implementation, would save to API
      const changedResponses = responses.filter(r => unsavedChanges.has(r.id));
      onSaveChanges?.(changedResponses);
      setUnsavedChanges(new Set());
    } catch (err: any) {
      setError(`Failed to save changes: ${err.message}`);
    }
  };

  const resetResponse = (responseId: string) => {
    setResponses(prev => prev.map(response => {
      if (response.id === responseId) {
        return {
          ...response,
          currentResponse: undefined,
          hasBeenModified: false
        };
      }
      return response;
    }));

    setUnsavedChanges(prev => {
      const newSet = new Set(prev);
      newSet.delete(responseId);
      return newSet;
    });
  };

  const toggleAnalysisExpansion = (responseId: string) => {
    setExpandedAnalysis(prev => {
      const newSet = new Set(prev);
      if (newSet.has(responseId)) {
        newSet.delete(responseId);
      } else {
        newSet.add(responseId);
      }
      return newSet;
    });
  };

  const getFilteredAndSortedResponses = () => {
    let filtered = responses;

    // Apply filters
    switch (filterBy) {
      case 'low_score':
        filtered = responses.filter(r => r.aiAnalysis.score < 7);
        break;
      case 'needs_improvement':
        filtered = responses.filter(r => r.aiAnalysis.improvements.length > 2);
        break;
      case 'modified':
        filtered = responses.filter(r => r.hasBeenModified);
        break;
      default:
        break;
    }

    // Apply sorting
    switch (sortBy) {
      case 'score_asc':
        filtered.sort((a, b) => a.aiAnalysis.score - b.aiAnalysis.score);
        break;
      case 'score_desc':
        filtered.sort((a, b) => b.aiAnalysis.score - a.aiAnalysis.score);
        break;
      case 'time_spent':
        filtered.sort((a, b) => b.originalResponse.timeSpent - a.originalResponse.timeSpent);
        break;
      default: // question_order
        // Keep original order
        break;
    }

    return filtered;
  };

  const formatTime = (seconds: number): string => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  };

  const getScoreColor = (score: number): string => {
    if (score >= 8) return 'text-green-600';
    if (score >= 6) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getScoreBadgeColor = (score: number): string => {
    if (score >= 8) return 'bg-green-100 text-green-800';
    if (score >= 6) return 'bg-yellow-100 text-yellow-800';
    return 'bg-red-100 text-red-800';
  };

  if (loading) {
    return <LoadingSpinner />;
  }

  if (error) {
    return <ErrorAlert message={error} onRetry={loadResponses} />;
  }

  const filteredResponses = getFilteredAndSortedResponses();

  return (
    <div className="max-w-6xl mx-auto space-y-6">
      {/* Header */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div className="flex justify-between items-start mb-4">
          <div>
            <h2 className="text-2xl font-bold text-gray-900">Interview Response Review</h2>
            <p className="text-gray-600 mt-1">
              Review and edit your interview responses to improve your scores
            </p>
          </div>

          {unsavedChanges.size > 0 && (
            <div className="flex items-center space-x-3">
              <span className="text-sm text-orange-600">
                {unsavedChanges.size} unsaved change{unsavedChanges.size > 1 ? 's' : ''}
              </span>
              <button
                onClick={saveChanges}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
              >
                Save Changes
              </button>
            </div>
          )}
        </div>

        {/* Filters and Sorting */}
        <div className="flex flex-wrap gap-4 items-center">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Filter by:</label>
            <select
              value={filterBy}
              onChange={(e) => setFilterBy(e.target.value as any)}
              className="border border-gray-300 rounded-lg px-3 py-2 text-sm"
            >
              <option value="all">All responses</option>
              <option value="low_score">Low scores (&lt;7)</option>
              <option value="needs_improvement">Needs improvement</option>
              <option value="modified">Modified responses</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Sort by:</label>
            <select
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value as any)}
              className="border border-gray-300 rounded-lg px-3 py-2 text-sm"
            >
              <option value="question_order">Question order</option>
              <option value="score_desc">Highest score first</option>
              <option value="score_asc">Lowest score first</option>
              <option value="time_spent">Most time spent</option>
            </select>
          </div>

          <div className="flex items-center space-x-4 text-sm text-gray-600">
            <span>Total: {responses.length} responses</span>
            <span>Showing: {filteredResponses.length}</span>
            <span>Modified: {responses.filter(r => r.hasBeenModified).length}</span>
          </div>
        </div>
      </div>

      {/* Responses */}
      <div className="space-y-6">
        {filteredResponses.map((response) => (
          <div
            key={response.id}
            className={`bg-white rounded-lg shadow-sm border ${
              response.hasBeenModified ? 'border-blue-200' : 'border-gray-200'
            } overflow-hidden`}
          >
            {/* Question Header */}
            <div className="px-6 py-4 bg-gray-50 border-b border-gray-200">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <div className="flex items-center space-x-3 mb-2">
                    <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded">
                      {response.question.category.replace('_', ' ')}
                    </span>
                    <span className="px-2 py-1 bg-gray-100 text-gray-800 text-xs font-medium rounded">
                      {response.question.difficulty}
                    </span>
                    <span className="px-2 py-1 bg-purple-100 text-purple-800 text-xs font-medium rounded">
                      {response.question.question_type}
                    </span>
                  </div>
                  <h3 className="text-lg font-medium text-gray-900 mb-1">
                    {response.question.question_text}
                  </h3>
                  {response.question.context && (
                    <p className="text-sm text-gray-600">{response.question.context}</p>
                  )}
                </div>

                <div className="flex items-center space-x-3">
                  <span className={`px-3 py-1 rounded-full text-sm font-medium ${getScoreBadgeColor(response.aiAnalysis.score)}`}>
                    {response.aiAnalysis.score.toFixed(1)}/10
                  </span>
                  {response.hasBeenModified && (
                    <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded">
                      Modified
                    </span>
                  )}
                </div>
              </div>
            </div>

            {/* Response Content */}
            <div className="p-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Original Response */}
                <div>
                  <div className="flex items-center justify-between mb-3">
                    <h4 className="font-medium text-gray-900">Original Response</h4>
                    <div className="text-sm text-gray-500">
                      Time spent: {formatTime(response.originalResponse.timeSpent)}
                    </div>
                  </div>

                  <div className="bg-gray-50 rounded-lg p-4">
                    {response.originalResponse.type === 'code' ? (
                      <pre className="text-sm text-gray-800 whitespace-pre-wrap font-mono">
                        <code>{response.originalResponse.content}</code>
                      </pre>
                    ) : (
                      <p className="text-gray-800 whitespace-pre-wrap">
                        {response.originalResponse.content}
                      </p>
                    )}
                  </div>

                  {response.originalResponse.metadata && (
                    <div className="flex items-center space-x-4 mt-2 text-sm text-gray-500">
                      {response.originalResponse.metadata.confidence && (
                        <span>Confidence: {response.originalResponse.metadata.confidence}/10</span>
                      )}
                      {response.originalResponse.metadata.wordCount && (
                        <span>Words: {response.originalResponse.metadata.wordCount}</span>
                      )}
                      {response.originalResponse.metadata.codeLanguage && (
                        <span>Language: {response.originalResponse.metadata.codeLanguage}</span>
                      )}
                    </div>
                  )}
                </div>

                {/* Current/Edited Response */}
                <div>
                  <div className="flex items-center justify-between mb-3">
                    <h4 className="font-medium text-gray-900">
                      {editingResponse === response.id ? 'Editing Response' :
                       response.currentResponse ? 'Modified Response' : 'Edit Response'}
                    </h4>
                    {response.isEditable && !readOnly && (
                      <div className="flex items-center space-x-2">
                        {response.editTimeRemaining && (
                          <span className="text-sm text-orange-600">
                            {formatTime(response.editTimeRemaining)} left
                          </span>
                        )}
                        {editingResponse === response.id ? (
                          <div className="flex space-x-2">
                            <button
                              onClick={() => setEditingResponse(null)}
                              className="text-sm text-gray-600 hover:text-gray-800"
                            >
                              Cancel
                            </button>
                          </div>
                        ) : (
                          <div className="flex space-x-2">
                            <button
                              onClick={() => setEditingResponse(response.id)}
                              className="text-sm text-blue-600 hover:text-blue-800"
                            >
                              Edit
                            </button>
                            {response.hasBeenModified && (
                              <button
                                onClick={() => resetResponse(response.id)}
                                className="text-sm text-red-600 hover:text-red-800"
                              >
                                Reset
                              </button>
                            )}
                          </div>
                        )}
                      </div>
                    )}
                  </div>

                  {editingResponse === response.id ? (
                    <div className="space-y-3">
                      <textarea
                        value={response.currentResponse?.content || response.originalResponse.content}
                        onChange={(e) => updateResponse(response.id, e.target.value)}
                        className="w-full h-40 border border-gray-300 rounded-lg px-3 py-2 text-sm font-mono resize-none"
                        placeholder="Edit your response..."
                      />
                      <div className="flex justify-between items-center text-sm">
                        <span className="text-gray-500">
                          Characters: {(response.currentResponse?.content || response.originalResponse.content).length}
                        </span>
                        <button
                          onClick={() => setEditingResponse(null)}
                          className="px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700"
                        >
                          Save
                        </button>
                      </div>
                    </div>
                  ) : response.currentResponse ? (
                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                      {response.originalResponse.type === 'code' ? (
                        <pre className="text-sm text-gray-800 whitespace-pre-wrap font-mono">
                          <code>{response.currentResponse.content}</code>
                        </pre>
                      ) : (
                        <p className="text-gray-800 whitespace-pre-wrap">
                          {response.currentResponse.content}
                        </p>
                      )}
                      {response.currentResponse.modifiedAt && (
                        <div className="text-sm text-blue-600 mt-2">
                          Modified: {new Date(response.currentResponse.modifiedAt).toLocaleString()}
                        </div>
                      )}
                    </div>
                  ) : (
                    <div className="bg-gray-100 border border-gray-300 rounded-lg p-4 text-center">
                      <p className="text-gray-600 mb-2">Click "Edit" to improve this response</p>
                      {!response.isEditable && (
                        <p className="text-sm text-red-600">Editing time has expired</p>
                      )}
                    </div>
                  )}
                </div>
              </div>

              {/* AI Analysis */}
              <div className="mt-6 pt-6 border-t border-gray-200">
                <div className="flex items-center justify-between mb-4">
                  <h4 className="font-medium text-gray-900">AI Analysis & Feedback</h4>
                  <button
                    onClick={() => toggleAnalysisExpansion(response.id)}
                    className="text-sm text-blue-600 hover:text-blue-800 flex items-center"
                  >
                    {expandedAnalysis.has(response.id) ? 'Show Less' : 'Show More'}
                    <svg
                      className={`w-4 h-4 ml-1 transition-transform ${
                        expandedAnalysis.has(response.id) ? 'rotate-180' : ''
                      }`}
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                    </svg>
                  </button>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                  {/* Strengths */}
                  <div>
                    <h5 className="font-medium text-green-700 mb-2 flex items-center">
                      <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                      Strengths
                    </h5>
                    <ul className="space-y-1">
                      {response.aiAnalysis.strengths.map((strength, index) => (
                        <li key={index} className="text-sm text-green-600 flex items-start">
                          <span className="text-green-500 mr-1 mt-0.5">•</span>
                          {strength}
                        </li>
                      ))}
                    </ul>
                  </div>

                  {/* Improvements */}
                  <div>
                    <h5 className="font-medium text-orange-700 mb-2 flex items-center">
                      <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      Areas for Improvement
                    </h5>
                    <ul className="space-y-1">
                      {response.aiAnalysis.improvements.map((improvement, index) => (
                        <li key={index} className="text-sm text-orange-600 flex items-start">
                          <span className="text-orange-500 mr-1 mt-0.5">•</span>
                          {improvement}
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>

                {expandedAnalysis.has(response.id) && (
                  <div className="space-y-4">
                    {/* Detailed Feedback */}
                    <div>
                      <h5 className="font-medium text-gray-900 mb-2">Detailed Feedback</h5>
                      <p className="text-sm text-gray-700 bg-gray-50 rounded-lg p-3">
                        {response.aiAnalysis.detailedFeedback}
                      </p>
                    </div>

                    {/* Rubric Scores */}
                    <div>
                      <h5 className="font-medium text-gray-900 mb-3">Rubric Breakdown</h5>
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                        {Object.entries(response.aiAnalysis.rubricScores).map(([criterion, score]) => (
                          <div key={criterion} className="text-center">
                            <div className={`text-2xl font-bold ${getScoreColor(score)}`}>
                              {score.toFixed(1)}
                            </div>
                            <div className="text-sm text-gray-600 capitalize">
                              {criterion.replace(/([A-Z])/g, ' $1').trim()}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>

                    {/* Comparison to Ideal */}
                    <div>
                      <h5 className="font-medium text-gray-900 mb-2">
                        Comparison to Ideal Response ({response.aiAnalysis.comparisonToIdeal.similarity}% match)
                      </h5>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {response.aiAnalysis.comparisonToIdeal.missingElements.length > 0 && (
                          <div>
                            <h6 className="text-sm font-medium text-red-700 mb-1">Missing Elements:</h6>
                            <ul className="text-sm text-red-600 space-y-1">
                              {response.aiAnalysis.comparisonToIdeal.missingElements.map((element, index) => (
                                <li key={index} className="flex items-start">
                                  <span className="text-red-500 mr-1 mt-0.5">-</span>
                                  {element}
                                </li>
                              ))}
                            </ul>
                          </div>
                        )}

                        {response.aiAnalysis.comparisonToIdeal.unexpectedElements.length > 0 && (
                          <div>
                            <h6 className="text-sm font-medium text-yellow-700 mb-1">Unexpected Elements:</h6>
                            <ul className="text-sm text-yellow-600 space-y-1">
                              {response.aiAnalysis.comparisonToIdeal.unexpectedElements.map((element, index) => (
                                <li key={index} className="flex items-start">
                                  <span className="text-yellow-500 mr-1 mt-0.5">?</span>
                                  {element}
                                </li>
                              ))}
                            </ul>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>

      {filteredResponses.length === 0 && (
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-12 text-center">
          <div className="text-gray-400 mb-4">
            <svg className="w-12 h-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">No responses match your filters</h3>
          <p className="text-gray-600">Try adjusting your filter or sort criteria to see more responses.</p>
        </div>
      )}
    </div>
  );
};

export default InterviewResponseReview;