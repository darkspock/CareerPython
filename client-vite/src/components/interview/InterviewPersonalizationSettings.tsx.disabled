import React, { useState, useEffect } from 'react';
import { InterviewType } from '../../types/interview';

interface PersonalizationSettings {
  // Interview Preferences
  preferredInterviewTypes: InterviewType[];
  difficultyPreference: 'adaptive' | 'easy' | 'medium' | 'hard';
  questionOrderPreference: 'structured' | 'dynamic' | 'random';
  pacePreference: 'slow' | 'normal' | 'fast';

  // Communication Style
  communicationStyle: 'formal' | 'casual' | 'mixed';
  feedbackStyle: 'encouraging' | 'neutral' | 'detailed';
  explanationLevel: 'minimal' | 'moderate' | 'comprehensive';

  // Interface Customization
  theme: 'light' | 'dark' | 'blue' | 'green' | 'purple';
  layout: 'compact' | 'comfortable' | 'spacious';
  showProgressDetails: boolean;
  showTimeRemaining: boolean;
  showQuestionNumbers: boolean;
  enableAnimations: boolean;

  // Content Preferences
  industryFocus: string[];
  roleTypes: string[];
  experienceLevel: 'entry' | 'mid' | 'senior' | 'executive';
  technicalSkills: string[];
  interests: string[];

  // AI Behavior
  aiPersonality: 'professional' | 'friendly' | 'supportive' | 'challenging';
  adaptiveDifficulty: boolean;
  contextualHints: boolean;
  realTimeFeedback: boolean;

  // Learning Preferences
  learningStyle: 'visual' | 'auditory' | 'kinesthetic' | 'mixed';
  preferredExamples: 'theoretical' | 'practical' | 'both';
  explanationPreference: 'step-by-step' | 'summary' | 'analogies';

  // Motivation & Goals
  primaryGoal: 'skill_assessment' | 'interview_practice' | 'career_development' | 'performance_improvement';
  motivationLevel: 'low' | 'moderate' | 'high';
  challengePreference: 'safe' | 'moderate' | 'aggressive';

  // Customization
  customBackground?: string;
  customColor?: string;
  profilePicture?: string;
  displayName?: string;
}

interface InterviewPersonalizationSettingsProps {
  onSettingsChange: (settings: PersonalizationSettings) => void;
  currentSettings?: Partial<PersonalizationSettings>;
  disabled?: boolean;
}

const defaultSettings: PersonalizationSettings = {
  preferredInterviewTypes: [InterviewType.TECHNICAL, InterviewType.BEHAVIORAL],
  difficultyPreference: 'adaptive',
  questionOrderPreference: 'structured',
  pacePreference: 'normal',
  communicationStyle: 'mixed',
  feedbackStyle: 'encouraging',
  explanationLevel: 'moderate',
  theme: 'light',
  layout: 'comfortable',
  showProgressDetails: true,
  showTimeRemaining: true,
  showQuestionNumbers: true,
  enableAnimations: true,
  industryFocus: [],
  roleTypes: [],
  experienceLevel: 'mid',
  technicalSkills: [],
  interests: [],
  aiPersonality: 'friendly',
  adaptiveDifficulty: true,
  contextualHints: true,
  realTimeFeedback: true,
  learningStyle: 'mixed',
  preferredExamples: 'both',
  explanationPreference: 'step-by-step',
  primaryGoal: 'interview_practice',
  motivationLevel: 'moderate',
  challengePreference: 'moderate'
};

const InterviewPersonalizationSettings: React.FC<InterviewPersonalizationSettingsProps> = ({
  onSettingsChange,
  currentSettings = {},
  disabled = false
}) => {
  const [settings, setSettings] = useState<PersonalizationSettings>({
    ...defaultSettings,
    ...currentSettings
  });
  const [activeSection, setActiveSection] = useState<string>('interview');
  const [previewTheme, setPreviewTheme] = useState<string>(settings.theme);

  useEffect(() => {
    onSettingsChange(settings);
  }, [settings, onSettingsChange]);

  const updateSetting = <K extends keyof PersonalizationSettings>(
    key: K,
    value: PersonalizationSettings[K]
  ) => {
    setSettings(prev => ({ ...prev, [key]: value }));
  };

  const toggleArrayItem = <T,>(array: T[], item: T): T[] => {
    return array.includes(item)
      ? array.filter(i => i !== item)
      : [...array, item];
  };

  const addCustomItem = (key: keyof PersonalizationSettings, value: string) => {
    const currentArray = settings[key] as string[];
    if (value.trim() && !currentArray.includes(value.trim())) {
      updateSetting(key, [...currentArray, value.trim()] as any);
    }
  };

  const removeCustomItem = (key: keyof PersonalizationSettings, value: string) => {
    const currentArray = settings[key] as string[];
    updateSetting(key, currentArray.filter(item => item !== value) as any);
  };

  const renderSection = () => {
    switch (activeSection) {
      case 'interview':
        return (
          <div className="space-y-6">
            <h3 className="text-lg font-medium text-gray-900">Interview Preferences</h3>

            {/* Preferred Interview Types */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">
                Preferred Interview Types
              </label>
              <div className="grid grid-cols-2 gap-3">
                {Object.values(InterviewType).map((type) => (
                  <label key={type} className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={settings.preferredInterviewTypes.includes(type)}
                      onChange={(e) => {
                        if (e.target.checked) {
                          updateSetting('preferredInterviewTypes', [...settings.preferredInterviewTypes, type]);
                        } else {
                          updateSetting('preferredInterviewTypes', settings.preferredInterviewTypes.filter(t => t !== type));
                        }
                      }}
                      disabled={disabled}
                      className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <span className="text-sm text-gray-700 capitalize">
                      {type.replace('_', ' ').toLowerCase()}
                    </span>
                  </label>
                ))}
              </div>
            </div>

            {/* Difficulty Preference */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">
                Difficulty Preference
              </label>
              <div className="grid grid-cols-4 gap-3">
                {['adaptive', 'easy', 'medium', 'hard'].map((difficulty) => (
                  <label key={difficulty} className="flex items-center">
                    <input
                      type="radio"
                      name="difficultyPreference"
                      value={difficulty}
                      checked={settings.difficultyPreference === difficulty}
                      onChange={(e) => updateSetting('difficultyPreference', e.target.value as any)}
                      disabled={disabled}
                      className="mr-2 text-blue-600 focus:ring-blue-500"
                    />
                    <span className="capitalize text-sm">{difficulty}</span>
                  </label>
                ))}
              </div>
            </div>

            {/* Question Order */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">
                Question Order Preference
              </label>
              <div className="grid grid-cols-3 gap-3">
                {[
                  { value: 'structured', label: 'Structured', desc: 'Follow a logical progression' },
                  { value: 'dynamic', label: 'Dynamic', desc: 'Adapt based on responses' },
                  { value: 'random', label: 'Random', desc: 'Randomized order' }
                ].map((option) => (
                  <div key={option.value} className="border border-gray-200 rounded-lg p-3">
                    <label className="flex items-start">
                      <input
                        type="radio"
                        name="questionOrderPreference"
                        value={option.value}
                        checked={settings.questionOrderPreference === option.value}
                        onChange={(e) => updateSetting('questionOrderPreference', e.target.value as any)}
                        disabled={disabled}
                        className="mt-1 mr-3 text-blue-600 focus:ring-blue-500"
                      />
                      <div>
                        <div className="font-medium text-gray-900">{option.label}</div>
                        <div className="text-sm text-gray-500">{option.desc}</div>
                      </div>
                    </label>
                  </div>
                ))}
              </div>
            </div>

            {/* Pace Preference */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">
                Interview Pace
              </label>
              <div className="grid grid-cols-3 gap-3">
                {['slow', 'normal', 'fast'].map((pace) => (
                  <label key={pace} className="flex items-center">
                    <input
                      type="radio"
                      name="pacePreference"
                      value={pace}
                      checked={settings.pacePreference === pace}
                      onChange={(e) => updateSetting('pacePreference', e.target.value as any)}
                      disabled={disabled}
                      className="mr-2 text-blue-600 focus:ring-blue-500"
                    />
                    <span className="capitalize text-sm">{pace}</span>
                  </label>
                ))}
              </div>
            </div>
          </div>
        );

      case 'ai':
        return (
          <div className="space-y-6">
            <h3 className="text-lg font-medium text-gray-900">AI Behavior</h3>

            {/* AI Personality */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">
                AI Interviewer Personality
              </label>
              <div className="grid grid-cols-2 gap-3">
                {[
                  { value: 'professional', label: 'Professional', desc: 'Formal and business-like' },
                  { value: 'friendly', label: 'Friendly', desc: 'Warm and approachable' },
                  { value: 'supportive', label: 'Supportive', desc: 'Encouraging and helpful' },
                  { value: 'challenging', label: 'Challenging', desc: 'Direct and demanding' }
                ].map((personality) => (
                  <div key={personality.value} className="border border-gray-200 rounded-lg p-3">
                    <label className="flex items-start">
                      <input
                        type="radio"
                        name="aiPersonality"
                        value={personality.value}
                        checked={settings.aiPersonality === personality.value}
                        onChange={(e) => updateSetting('aiPersonality', e.target.value as any)}
                        disabled={disabled}
                        className="mt-1 mr-3 text-blue-600 focus:ring-blue-500"
                      />
                      <div>
                        <div className="font-medium text-gray-900">{personality.label}</div>
                        <div className="text-sm text-gray-500">{personality.desc}</div>
                      </div>
                    </label>
                  </div>
                ))}
              </div>
            </div>

            {/* Communication Style */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">
                Communication Style
              </label>
              <div className="grid grid-cols-3 gap-3">
                {['formal', 'casual', 'mixed'].map((style) => (
                  <label key={style} className="flex items-center">
                    <input
                      type="radio"
                      name="communicationStyle"
                      value={style}
                      checked={settings.communicationStyle === style}
                      onChange={(e) => updateSetting('communicationStyle', e.target.value as any)}
                      disabled={disabled}
                      className="mr-2 text-blue-600 focus:ring-blue-500"
                    />
                    <span className="capitalize text-sm">{style}</span>
                  </label>
                ))}
              </div>
            </div>

            {/* AI Features */}
            <div className="space-y-4">
              <h4 className="font-medium text-gray-900">AI Features</h4>

              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <div>
                    <label className="text-sm font-medium text-gray-700">Adaptive Difficulty</label>
                    <p className="text-sm text-gray-500">AI adjusts question difficulty based on performance</p>
                  </div>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      checked={settings.adaptiveDifficulty}
                      onChange={(e) => updateSetting('adaptiveDifficulty', e.target.checked)}
                      disabled={disabled}
                      className="sr-only peer"
                    />
                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                  </label>
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <label className="text-sm font-medium text-gray-700">Contextual Hints</label>
                    <p className="text-sm text-gray-500">AI provides hints when you're struggling</p>
                  </div>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      checked={settings.contextualHints}
                      onChange={(e) => updateSetting('contextualHints', e.target.checked)}
                      disabled={disabled}
                      className="sr-only peer"
                    />
                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                  </label>
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <label className="text-sm font-medium text-gray-700">Real-time Feedback</label>
                    <p className="text-sm text-gray-500">Get immediate feedback during responses</p>
                  </div>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      checked={settings.realTimeFeedback}
                      onChange={(e) => updateSetting('realTimeFeedback', e.target.checked)}
                      disabled={disabled}
                      className="sr-only peer"
                    />
                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                  </label>
                </div>
              </div>
            </div>
          </div>
        );

      case 'content':
        return (
          <div className="space-y-6">
            <h3 className="text-lg font-medium text-gray-900">Content Preferences</h3>

            {/* Experience Level */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">
                Experience Level
              </label>
              <div className="grid grid-cols-4 gap-3">
                {['entry', 'mid', 'senior', 'executive'].map((level) => (
                  <label key={level} className="flex items-center">
                    <input
                      type="radio"
                      name="experienceLevel"
                      value={level}
                      checked={settings.experienceLevel === level}
                      onChange={(e) => updateSetting('experienceLevel', e.target.value as any)}
                      disabled={disabled}
                      className="mr-2 text-blue-600 focus:ring-blue-500"
                    />
                    <span className="capitalize text-sm">{level}</span>
                  </label>
                ))}
              </div>
            </div>

            {/* Industry Focus */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">
                Industry Focus
              </label>
              <div className="grid grid-cols-3 gap-2 mb-3">
                {[
                  'Technology', 'Healthcare', 'Finance', 'Education', 'Manufacturing',
                  'Retail', 'Marketing', 'Consulting', 'Government', 'Non-profit'
                ].map((industry) => (
                  <label key={industry} className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={settings.industryFocus.includes(industry)}
                      onChange={(e) => {
                        if (e.target.checked) {
                          updateSetting('industryFocus', [...settings.industryFocus, industry]);
                        } else {
                          updateSetting('industryFocus', settings.industryFocus.filter(i => i !== industry));
                        }
                      }}
                      disabled={disabled}
                      className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <span className="text-sm text-gray-700">{industry}</span>
                  </label>
                ))}
              </div>

              {/* Custom Industry Input */}
              <div className="flex space-x-2">
                <input
                  type="text"
                  placeholder="Add custom industry..."
                  onKeyPress={(e) => {
                    if (e.key === 'Enter') {
                      addCustomItem('industryFocus', e.currentTarget.value);
                      e.currentTarget.value = '';
                    }
                  }}
                  disabled={disabled}
                  className="flex-1 border border-gray-300 rounded-lg px-3 py-2 text-sm"
                />
              </div>

              {/* Custom Industries */}
              {settings.industryFocus.filter(industry =>
                !['Technology', 'Healthcare', 'Finance', 'Education', 'Manufacturing',
                  'Retail', 'Marketing', 'Consulting', 'Government', 'Non-profit'].includes(industry)
              ).length > 0 && (
                <div className="flex flex-wrap gap-2 mt-2">
                  {settings.industryFocus.filter(industry =>
                    !['Technology', 'Healthcare', 'Finance', 'Education', 'Manufacturing',
                      'Retail', 'Marketing', 'Consulting', 'Government', 'Non-profit'].includes(industry)
                  ).map((industry) => (
                    <span
                      key={industry}
                      className="inline-flex items-center px-2 py-1 bg-blue-100 text-blue-800 text-sm rounded-full"
                    >
                      {industry}
                      <button
                        onClick={() => removeCustomItem('industryFocus', industry)}
                        className="ml-1 text-blue-600 hover:text-blue-800"
                      >
                        ×
                      </button>
                    </span>
                  ))}
                </div>
              )}
            </div>

            {/* Technical Skills */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">
                Technical Skills
              </label>
              <div className="grid grid-cols-3 gap-2 mb-3">
                {[
                  'JavaScript', 'Python', 'Java', 'React', 'Node.js', 'SQL',
                  'AWS', 'Docker', 'Kubernetes', 'Git', 'Machine Learning', 'Data Analysis'
                ].map((skill) => (
                  <label key={skill} className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={settings.technicalSkills.includes(skill)}
                      onChange={(e) => {
                        if (e.target.checked) {
                          updateSetting('technicalSkills', [...settings.technicalSkills, skill]);
                        } else {
                          updateSetting('technicalSkills', settings.technicalSkills.filter(s => s !== skill));
                        }
                      }}
                      disabled={disabled}
                      className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <span className="text-sm text-gray-700">{skill}</span>
                  </label>
                ))}
              </div>

              <div className="flex space-x-2">
                <input
                  type="text"
                  placeholder="Add custom skill..."
                  onKeyPress={(e) => {
                    if (e.key === 'Enter') {
                      addCustomItem('technicalSkills', e.currentTarget.value);
                      e.currentTarget.value = '';
                    }
                  }}
                  disabled={disabled}
                  className="flex-1 border border-gray-300 rounded-lg px-3 py-2 text-sm"
                />
              </div>

              {settings.technicalSkills.filter(skill =>
                !['JavaScript', 'Python', 'Java', 'React', 'Node.js', 'SQL',
                  'AWS', 'Docker', 'Kubernetes', 'Git', 'Machine Learning', 'Data Analysis'].includes(skill)
              ).length > 0 && (
                <div className="flex flex-wrap gap-2 mt-2">
                  {settings.technicalSkills.filter(skill =>
                    !['JavaScript', 'Python', 'Java', 'React', 'Node.js', 'SQL',
                      'AWS', 'Docker', 'Kubernetes', 'Git', 'Machine Learning', 'Data Analysis'].includes(skill)
                  ).map((skill) => (
                    <span
                      key={skill}
                      className="inline-flex items-center px-2 py-1 bg-green-100 text-green-800 text-sm rounded-full"
                    >
                      {skill}
                      <button
                        onClick={() => removeCustomItem('technicalSkills', skill)}
                        className="ml-1 text-green-600 hover:text-green-800"
                      >
                        ×
                      </button>
                    </span>
                  ))}
                </div>
              )}
            </div>
          </div>
        );

      case 'interface':
        return (
          <div className="space-y-6">
            <h3 className="text-lg font-medium text-gray-900">Interface Customization</h3>

            {/* Theme Selection */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">
                Theme
              </label>
              <div className="grid grid-cols-5 gap-3">
                {[
                  { value: 'light', name: 'Light', color: '#ffffff' },
                  { value: 'dark', name: 'Dark', color: '#1f2937' },
                  { value: 'blue', name: 'Blue', color: '#3b82f6' },
                  { value: 'green', name: 'Green', color: '#10b981' },
                  { value: 'purple', name: 'Purple', color: '#8b5cf6' }
                ].map((theme) => (
                  <div key={theme.value} className="text-center">
                    <label className="cursor-pointer">
                      <input
                        type="radio"
                        name="theme"
                        value={theme.value}
                        checked={settings.theme === theme.value}
                        onChange={(e) => {
                          updateSetting('theme', e.target.value as any);
                          setPreviewTheme(e.target.value);
                        }}
                        disabled={disabled}
                        className="sr-only"
                      />
                      <div
                        className={`w-12 h-12 rounded-lg border-4 mx-auto mb-2 ${
                          settings.theme === theme.value ? 'border-blue-500' : 'border-gray-300'
                        }`}
                        style={{ backgroundColor: theme.color }}
                      />
                      <span className="text-sm text-gray-700">{theme.name}</span>
                    </label>
                  </div>
                ))}
              </div>
            </div>

            {/* Layout Preference */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">
                Layout Density
              </label>
              <div className="grid grid-cols-3 gap-3">
                {[
                  { value: 'compact', name: 'Compact', desc: 'More content, less spacing' },
                  { value: 'comfortable', name: 'Comfortable', desc: 'Balanced spacing' },
                  { value: 'spacious', name: 'Spacious', desc: 'Extra breathing room' }
                ].map((layout) => (
                  <div key={layout.value} className="border border-gray-200 rounded-lg p-3">
                    <label className="flex items-start">
                      <input
                        type="radio"
                        name="layout"
                        value={layout.value}
                        checked={settings.layout === layout.value}
                        onChange={(e) => updateSetting('layout', e.target.value as any)}
                        disabled={disabled}
                        className="mt-1 mr-3 text-blue-600 focus:ring-blue-500"
                      />
                      <div>
                        <div className="font-medium text-gray-900">{layout.name}</div>
                        <div className="text-sm text-gray-500">{layout.desc}</div>
                      </div>
                    </label>
                  </div>
                ))}
              </div>
            </div>

            {/* Interface Options */}
            <div className="space-y-3">
              <h4 className="font-medium text-gray-900">Interface Options</h4>

              {[
                { key: 'showProgressDetails', label: 'Show Progress Details', desc: 'Display detailed progress information' },
                { key: 'showTimeRemaining', label: 'Show Time Remaining', desc: 'Display estimated time remaining' },
                { key: 'showQuestionNumbers', label: 'Show Question Numbers', desc: 'Number each question' },
                { key: 'enableAnimations', label: 'Enable Animations', desc: 'Smooth transitions and effects' }
              ].map((option) => (
                <div key={option.key} className="flex items-center justify-between">
                  <div>
                    <label className="text-sm font-medium text-gray-700">{option.label}</label>
                    <p className="text-sm text-gray-500">{option.desc}</p>
                  </div>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      checked={settings[option.key as keyof PersonalizationSettings] as boolean}
                      onChange={(e) => updateSetting(option.key as keyof PersonalizationSettings, e.target.checked as any)}
                      disabled={disabled}
                      className="sr-only peer"
                    />
                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                  </label>
                </div>
              ))}
            </div>
          </div>
        );

      case 'goals':
        return (
          <div className="space-y-6">
            <h3 className="text-lg font-medium text-gray-900">Goals & Motivation</h3>

            {/* Primary Goal */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">
                Primary Goal
              </label>
              <div className="grid grid-cols-2 gap-3">
                {[
                  { value: 'skill_assessment', label: 'Skill Assessment', desc: 'Evaluate current abilities' },
                  { value: 'interview_practice', label: 'Interview Practice', desc: 'Prepare for real interviews' },
                  { value: 'career_development', label: 'Career Development', desc: 'Grow professional skills' },
                  { value: 'performance_improvement', label: 'Performance Improvement', desc: 'Enhance weak areas' }
                ].map((goal) => (
                  <div key={goal.value} className="border border-gray-200 rounded-lg p-3">
                    <label className="flex items-start">
                      <input
                        type="radio"
                        name="primaryGoal"
                        value={goal.value}
                        checked={settings.primaryGoal === goal.value}
                        onChange={(e) => updateSetting('primaryGoal', e.target.value as any)}
                        disabled={disabled}
                        className="mt-1 mr-3 text-blue-600 focus:ring-blue-500"
                      />
                      <div>
                        <div className="font-medium text-gray-900">{goal.label}</div>
                        <div className="text-sm text-gray-500">{goal.desc}</div>
                      </div>
                    </label>
                  </div>
                ))}
              </div>
            </div>

            {/* Challenge Preference */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">
                Challenge Level
              </label>
              <div className="grid grid-cols-3 gap-3">
                {[
                  { value: 'safe', label: 'Safe Zone', desc: 'Stay within comfort zone' },
                  { value: 'moderate', label: 'Moderate Challenge', desc: 'Push boundaries gradually' },
                  { value: 'aggressive', label: 'High Challenge', desc: 'Maximum growth opportunity' }
                ].map((challenge) => (
                  <div key={challenge.value} className="border border-gray-200 rounded-lg p-3">
                    <label className="flex items-start">
                      <input
                        type="radio"
                        name="challengePreference"
                        value={challenge.value}
                        checked={settings.challengePreference === challenge.value}
                        onChange={(e) => updateSetting('challengePreference', e.target.value as any)}
                        disabled={disabled}
                        className="mt-1 mr-3 text-blue-600 focus:ring-blue-500"
                      />
                      <div>
                        <div className="font-medium text-gray-900">{challenge.label}</div>
                        <div className="text-sm text-gray-500">{challenge.desc}</div>
                      </div>
                    </label>
                  </div>
                ))}
              </div>
            </div>

            {/* Learning Style */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">
                Learning Style
              </label>
              <div className="grid grid-cols-4 gap-3">
                {['visual', 'auditory', 'kinesthetic', 'mixed'].map((style) => (
                  <label key={style} className="flex items-center">
                    <input
                      type="radio"
                      name="learningStyle"
                      value={style}
                      checked={settings.learningStyle === style}
                      onChange={(e) => updateSetting('learningStyle', e.target.value as any)}
                      disabled={disabled}
                      className="mr-2 text-blue-600 focus:ring-blue-500"
                    />
                    <span className="capitalize text-sm">{style}</span>
                  </label>
                ))}
              </div>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="max-w-4xl mx-auto">
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
        {/* Header */}
        <div className="px-6 py-4 border-b border-gray-200">
          <div className="flex justify-between items-center">
            <div>
              <h2 className="text-xl font-semibold text-gray-900">Personalization Settings</h2>
              <p className="text-sm text-gray-600 mt-1">
                Customize your interview experience to match your preferences and goals
              </p>
            </div>
            <div className="flex space-x-2">
              <button
                onClick={() => setSettings(defaultSettings)}
                className="px-3 py-2 text-sm text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50"
              >
                Reset to Defaults
              </button>
            </div>
          </div>
        </div>

        <div className="flex">
          {/* Navigation */}
          <nav className="w-64 bg-gray-50 border-r border-gray-200 p-4">
            <div className="space-y-1">
              {[
                { id: 'interview', name: 'Interview', icon: '🎯' },
                { id: 'ai', name: 'AI Behavior', icon: '🤖' },
                { id: 'content', name: 'Content', icon: '📚' },
                { id: 'interface', name: 'Interface', icon: '🎨' },
                { id: 'goals', name: 'Goals', icon: '📈' }
              ].map((section) => (
                <button
                  key={section.id}
                  onClick={() => setActiveSection(section.id)}
                  className={`w-full text-left px-3 py-2 rounded-lg flex items-center space-x-3 transition-colors ${
                    activeSection === section.id
                      ? 'bg-blue-100 text-blue-900'
                      : 'text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  <span>{section.icon}</span>
                  <span>{section.name}</span>
                </button>
              ))}
            </div>
          </nav>

          {/* Content */}
          <div className="flex-1 p-6">
            {renderSection()}
          </div>
        </div>
      </div>
    </div>
  );
};

export default InterviewPersonalizationSettings;