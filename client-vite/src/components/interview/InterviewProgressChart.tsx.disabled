import React, { useState, useEffect } from 'react';
import { api } from '../../lib/api';
import { Interview, InterviewProgress } from '../../types/interview';

interface InterviewProgressChartProps {
  interviewId: string;
  showDetailedMetrics?: boolean;
}

interface ProgressMetrics {
  timeSpentBySection: Record<string, number>;
  questionDifficultyProgress: Record<string, { answered: number; total: number }>;
  responseQualityTrend: Array<{ questionIndex: number; qualityScore: number }>;
  sectionCompletionTimes: Array<{ section: string; timeSpent: number; questionsCount: number }>;
  overallStats: {
    totalTimeSpent: number;
    averageTimePerQuestion: number;
    completionVelocity: number;
    estimatedTimeRemaining: number;
  };
}

const InterviewProgressChart: React.FC<InterviewProgressChartProps> = ({
  interviewId,
  showDetailedMetrics = true
}) => {
  const [progress, setProgress] = useState<InterviewProgress | null>(null);
  const [metrics, setMetrics] = useState<ProgressMetrics | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<'overview' | 'sections' | 'timeline'>('overview');

  useEffect(() => {
    loadProgressData();
  }, [interviewId]);

  const loadProgressData = async () => {
    try {
      setLoading(true);
      setError(null);

      // Load progress data
      const progressData = await api.getInterviewProgress(interviewId);
      setProgress(progressData);

      // Generate metrics (mock data for now - in real implementation this would come from API)
      const mockMetrics: ProgressMetrics = {
        timeSpentBySection: {
          'introduction': 450, // seconds
          'technical': 1200,
          'behavioral': 800,
          'problem_solving': 900,
          'conclusion': 300
        },
        questionDifficultyProgress: {
          'easy': { answered: 3, total: 5 },
          'medium': { answered: 4, total: 8 },
          'hard': { answered: 2, total: 5 }
        },
        responseQualityTrend: [
          { questionIndex: 1, qualityScore: 0.72 },
          { questionIndex: 2, qualityScore: 0.85 },
          { questionIndex: 3, qualityScore: 0.78 },
          { questionIndex: 4, qualityScore: 0.88 },
          { questionIndex: 5, qualityScore: 0.82 },
          { questionIndex: 6, qualityScore: 0.90 },
          { questionIndex: 7, qualityScore: 0.86 },
          { questionIndex: 8, qualityScore: 0.92 },
          { questionIndex: 9, qualityScore: 0.89 }
        ],
        sectionCompletionTimes: [
          { section: 'Introduction', timeSpent: 450, questionsCount: 2 },
          { section: 'Technical', timeSpent: 1200, questionsCount: 4 },
          { section: 'Behavioral', timeSpent: 800, questionsCount: 3 }
        ],
        overallStats: {
          totalTimeSpent: 3650, // seconds
          averageTimePerQuestion: 405, // seconds
          completionVelocity: 1.2, // questions per minute
          estimatedTimeRemaining: 1800 // seconds
        }
      };

      setMetrics(mockMetrics);
    } catch (err: any) {
      setError(err.message || 'Failed to load progress data');
    } finally {
      setLoading(false);
    }
  };

  const formatTime = (seconds: number) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;

    if (hours > 0) {
      return `${hours}h ${minutes}m`;
    } else if (minutes > 0) {
      return `${minutes}m ${secs}s`;
    } else {
      return `${secs}s`;
    }
  };

  const CircularProgress: React.FC<{ progress: number; size: number; strokeWidth: number; color: string; label?: string }> = ({
    progress,
    size,
    strokeWidth,
    color,
    label
  }) => {
    const radius = (size - strokeWidth) / 2;
    const circumference = radius * 2 * Math.PI;
    const offset = circumference - (progress / 100) * circumference;

    return (
      <div className="relative inline-flex items-center justify-center">
        <svg className="transform -rotate-90" width={size} height={size}>
          <circle
            cx={size / 2}
            cy={size / 2}
            r={radius}
            stroke="currentColor"
            strokeWidth={strokeWidth}
            fill="transparent"
            className="text-gray-200"
          />
          <circle
            cx={size / 2}
            cy={size / 2}
            r={radius}
            stroke="currentColor"
            strokeWidth={strokeWidth}
            fill="transparent"
            strokeDasharray={circumference}
            strokeDashoffset={offset}
            className={`transition-all duration-500 ${color}`}
            strokeLinecap="round"
          />
        </svg>
        <div className="absolute inset-0 flex items-center justify-center">
          <div className="text-center">
            <div className="text-lg font-bold text-gray-900">{Math.round(progress)}%</div>
            {label && <div className="text-xs text-gray-600">{label}</div>}
          </div>
        </div>
      </div>
    );
  };

  const ProgressBar: React.FC<{ progress: number; label: string; color: string; showValue?: boolean }> = ({
    progress,
    label,
    color,
    showValue = true
  }) => (
    <div className="space-y-1">
      <div className="flex justify-between text-sm">
        <span className="text-gray-600">{label}</span>
        {showValue && <span className="text-gray-900 font-medium">{Math.round(progress)}%</span>}
      </div>
      <div className="w-full bg-gray-200 rounded-full h-2">
        <div
          className={`h-2 rounded-full transition-all duration-300 ${color}`}
          style={{ width: `${progress}%` }}
        />
      </div>
    </div>
  );

  if (loading) {
    return (
      <div className="bg-white border border-gray-200 rounded-lg p-6">
        <div className="animate-pulse space-y-4">
          <div className="h-6 bg-gray-200 rounded w-1/3"></div>
          <div className="grid grid-cols-3 gap-4">
            <div className="h-32 bg-gray-200 rounded"></div>
            <div className="h-32 bg-gray-200 rounded"></div>
            <div className="h-32 bg-gray-200 rounded"></div>
          </div>
          <div className="h-64 bg-gray-200 rounded"></div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-white border border-red-200 rounded-lg p-6">
        <div className="text-center">
          <svg className="w-12 h-12 mx-auto text-red-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <h3 className="text-lg font-medium text-gray-900 mb-2">Failed to Load Progress Chart</h3>
          <p className="text-gray-600 mb-4">{error}</p>
          <button
            onClick={loadProgressData}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  if (!progress || !metrics) {
    return (
      <div className="bg-white border border-gray-200 rounded-lg p-6">
        <div className="text-center text-gray-500">
          No progress data available for visualization
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white border border-gray-200 rounded-lg p-6 space-y-6">
      {/* Header */}
      <div>
        <h3 className="text-lg font-medium text-gray-900 mb-4">Progress Analytics</h3>

        {/* Tabs */}
        <div className="border-b border-gray-200">
          <nav className="-mb-px flex space-x-8">
            {[
              { id: 'overview', name: 'Overview', icon: '📊' },
              { id: 'sections', name: 'Sections', icon: '📋' },
              { id: 'timeline', name: 'Timeline', icon: '⏱️' }
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id as typeof activeTab)}
                className={`whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm flex items-center gap-2 ${
                  activeTab === tab.id
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <span>{tab.icon}</span>
                {tab.name}
              </button>
            ))}
          </nav>
        </div>
      </div>

      {/* Tab Content */}
      {activeTab === 'overview' && (
        <div className="space-y-6">
          {/* Overview Stats */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="text-center">
              <CircularProgress
                progress={progress.completion_percentage}
                size={120}
                strokeWidth={8}
                color="text-blue-600"
                label="Complete"
              />
            </div>

            <div className="space-y-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-gray-900">
                  {formatTime(metrics.overallStats.totalTimeSpent)}
                </div>
                <div className="text-sm text-gray-600">Total Time Spent</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-gray-900">
                  {formatTime(metrics.overallStats.averageTimePerQuestion)}
                </div>
                <div className="text-sm text-gray-600">Avg per Question</div>
              </div>
            </div>

            <div className="space-y-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-gray-900">
                  {metrics.overallStats.completionVelocity.toFixed(1)}
                </div>
                <div className="text-sm text-gray-600">Questions/min</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-gray-900">
                  {formatTime(metrics.overallStats.estimatedTimeRemaining)}
                </div>
                <div className="text-sm text-gray-600">Est. Remaining</div>
              </div>
            </div>
          </div>

          {/* Difficulty Breakdown */}
          <div>
            <h4 className="font-medium text-gray-900 mb-4">Progress by Difficulty</h4>
            <div className="grid grid-cols-3 gap-4">
              {Object.entries(metrics.questionDifficultyProgress).map(([difficulty, data]) => (
                <div key={difficulty} className="text-center">
                  <CircularProgress
                    progress={(data.answered / data.total) * 100}
                    size={80}
                    strokeWidth={6}
                    color={
                      difficulty === 'easy' ? 'text-green-500' :
                      difficulty === 'medium' ? 'text-yellow-500' : 'text-red-500'
                    }
                  />
                  <div className="mt-2">
                    <div className="font-medium text-gray-900 capitalize">{difficulty}</div>
                    <div className="text-sm text-gray-600">{data.answered}/{data.total}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Quality Trend Chart */}
          <div>
            <h4 className="font-medium text-gray-900 mb-4">Response Quality Trend</h4>
            <div className="relative h-32 bg-gray-50 rounded-lg p-4">
              <svg className="w-full h-full" viewBox="0 0 400 100">
                {/* Grid lines */}
                {[0, 25, 50, 75, 100].map((y) => (
                  <line
                    key={y}
                    x1="0"
                    y1={y}
                    x2="400"
                    y2={y}
                    stroke="#e5e7eb"
                    strokeWidth="1"
                  />
                ))}

                {/* Data line */}
                <polyline
                  fill="none"
                  stroke="#3b82f6"
                  strokeWidth="2"
                  points={metrics.responseQualityTrend.map((point, index) =>
                    `${(index / (metrics.responseQualityTrend.length - 1)) * 400},${100 - (point.qualityScore * 100)}`
                  ).join(' ')}
                />

                {/* Data points */}
                {metrics.responseQualityTrend.map((point, index) => (
                  <circle
                    key={index}
                    cx={(index / (metrics.responseQualityTrend.length - 1)) * 400}
                    cy={100 - (point.qualityScore * 100)}
                    r="3"
                    fill="#3b82f6"
                  />
                ))}
              </svg>
              <div className="absolute bottom-0 left-0 right-0 flex justify-between text-xs text-gray-500 px-4">
                <span>Q1</span>
                <span>Q{Math.ceil(metrics.responseQualityTrend.length / 2)}</span>
                <span>Q{metrics.responseQualityTrend.length}</span>
              </div>
            </div>
          </div>
        </div>
      )}

      {activeTab === 'sections' && (
        <div className="space-y-6">
          {/* Section Time Distribution */}
          <div>
            <h4 className="font-medium text-gray-900 mb-4">Time Spent by Section</h4>
            <div className="space-y-3">
              {Object.entries(metrics.timeSpentBySection).map(([section, timeSpent]) => {
                const totalTime = Object.values(metrics.timeSpentBySection).reduce((a, b) => a + b, 0);
                const percentage = (timeSpent / totalTime) * 100;

                return (
                  <div key={section} className="flex items-center justify-between">
                    <div className="flex-1">
                      <ProgressBar
                        progress={percentage}
                        label={section.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                        color="bg-blue-600"
                        showValue={false}
                      />
                    </div>
                    <div className="ml-4 text-sm text-gray-600 min-w-[60px] text-right">
                      {formatTime(timeSpent)}
                    </div>
                  </div>
                );
              })}
            </div>
          </div>

          {/* Section Completion Details */}
          <div>
            <h4 className="font-medium text-gray-900 mb-4">Section Completion Details</h4>
            <div className="overflow-hidden border border-gray-200 rounded-lg">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Section
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Questions
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Time Spent
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Avg per Question
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {metrics.sectionCompletionTimes.map((section, index) => (
                    <tr key={index}>
                      <td className="px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                        {section.section}
                      </td>
                      <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-600">
                        {section.questionsCount}
                      </td>
                      <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-600">
                        {formatTime(section.timeSpent)}
                      </td>
                      <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-600">
                        {formatTime(Math.round(section.timeSpent / section.questionsCount))}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          {/* Completed Sections */}
          <div>
            <h4 className="font-medium text-gray-900 mb-4">Section Status</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {progress.sections_completed.map((section, index) => (
                <div key={index} className="flex items-center gap-3 p-3 bg-green-50 border border-green-200 rounded-lg">
                  <div className="w-6 h-6 bg-green-100 rounded-full flex items-center justify-center">
                    <svg className="w-4 h-4 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                    </svg>
                  </div>
                  <span className="text-green-900 font-medium capitalize">
                    {section.replace('_', ' ')} - Completed
                  </span>
                </div>
              ))}

              {progress.current_section && (
                <div className="flex items-center gap-3 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                  <div className="w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center">
                    <div className="w-3 h-3 bg-blue-600 rounded-full animate-pulse" />
                  </div>
                  <span className="text-blue-900 font-medium capitalize">
                    {progress.current_section.replace('_', ' ')} - In Progress
                  </span>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {activeTab === 'timeline' && (
        <div className="space-y-6">
          <div>
            <h4 className="font-medium text-gray-900 mb-4">Interview Timeline</h4>
            <div className="relative">
              {/* Timeline line */}
              <div className="absolute left-6 top-0 bottom-0 w-0.5 bg-gray-200"></div>

              <div className="space-y-6">
                {metrics.sectionCompletionTimes.map((section, index) => (
                  <div key={index} className="relative flex items-start">
                    {/* Timeline dot */}
                    <div className="relative z-10 w-12 h-12 bg-green-100 border-4 border-white rounded-full flex items-center justify-center shadow-sm">
                      <svg className="w-5 h-5 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                      </svg>
                    </div>

                    {/* Content */}
                    <div className="ml-6 flex-1">
                      <div className="bg-white border border-gray-200 rounded-lg p-4">
                        <div className="flex justify-between items-start mb-2">
                          <h5 className="font-medium text-gray-900">{section.section}</h5>
                          <span className="text-sm text-gray-500">{formatTime(section.timeSpent)}</span>
                        </div>
                        <div className="text-sm text-gray-600">
                          {section.questionsCount} questions completed
                        </div>
                        <div className="mt-2 text-xs text-gray-500">
                          Average: {formatTime(Math.round(section.timeSpent / section.questionsCount))} per question
                        </div>
                      </div>
                    </div>
                  </div>
                ))}

                {/* Current section */}
                {progress.current_section && (
                  <div className="relative flex items-start">
                    <div className="relative z-10 w-12 h-12 bg-blue-100 border-4 border-white rounded-full flex items-center justify-center shadow-sm">
                      <div className="w-4 h-4 bg-blue-600 rounded-full animate-pulse" />
                    </div>

                    <div className="ml-6 flex-1">
                      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                        <div className="flex justify-between items-start mb-2">
                          <h5 className="font-medium text-blue-900 capitalize">
                            {progress.current_section.replace('_', ' ')}
                          </h5>
                          <span className="text-sm text-blue-600">In Progress</span>
                        </div>
                        <div className="text-sm text-blue-700">
                          Currently answering questions in this section
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default InterviewProgressChart;