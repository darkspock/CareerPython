import React, { useState, useEffect } from 'react';
import {
  aiInterviewInsightsService,
  CandidateStrength,
  CandidateWeakness,
  SkillGapAnalysis,
  PersonalizedImprovement,
  PredictiveSuccessScore,
  ComparativeAnalysis
} from '../../services/AIInterviewInsightsService';
import { InterviewType, QuestionCategory } from '../../types/interview';

interface AIInsightsDashboardProps {
  candidateId: string;
  interviewHistory?: any[];
  roleContext?: any;
  onInsightAction?: (action: string, data: any) => void;
}

const AIInsightsDashboard: React.FC<AIInsightsDashboardProps> = ({
  candidateId,
  interviewHistory = [],
  roleContext,
  onInsightAction
}) => {
  const [activeTab, setActiveTab] = useState<'overview' | 'strengths' | 'weaknesses' | 'gaps' | 'improvements' | 'predictions' | 'comparisons'>('overview');
  const [loading, setLoading] = useState(true);
  const [insights, setInsights] = useState<{
    strengths: CandidateStrength[];
    weaknesses: CandidateWeakness[];
    skillGaps: SkillGapAnalysis[];
    improvements: PersonalizedImprovement[];
    predictions: PredictiveSuccessScore | null;
    comparativeAnalysis: ComparativeAnalysis | null;
  }>({
    strengths: [],
    weaknesses: [],
    skillGaps: [],
    improvements: [],
    predictions: null,
    comparativeAnalysis: null
  });

  useEffect(() => {
    loadInsights();
  }, [candidateId]);

  const loadInsights = async () => {
    setLoading(true);
    try {
      // Load all AI insights in parallel
      const [
        strengthsWeaknesses,
        skillGaps,
        predictions,
        comparativeAnalysis
      ] = await Promise.all([
        aiInterviewInsightsService.analyzeCandidateStrengthsAndWeaknesses(candidateId, interviewHistory),
        aiInterviewInsightsService.performSkillGapAnalysis(candidateId, roleContext, interviewHistory),
        aiInterviewInsightsService.calculatePredictiveSuccessScore(candidateId, interviewHistory, roleContext),
        aiInterviewInsightsService.performComparativeAnalysis(candidateId, 'peer_comparison', { role: 'senior_developer' })
      ]);

      // Generate personalized improvements
      const improvements = await aiInterviewInsightsService.generatePersonalizedImprovements(
        candidateId,
        strengthsWeaknesses.strengths,
        strengthsWeaknesses.weaknesses,
        skillGaps,
        { learningStyle: 'mixed', availableTime: '10-15 hours/week' }
      );

      setInsights({
        strengths: strengthsWeaknesses.strengths,
        weaknesses: strengthsWeaknesses.weaknesses,
        skillGaps,
        improvements,
        predictions,
        comparativeAnalysis
      });

    } catch (error) {
      console.error('Failed to load AI insights:', error);
    } finally {
      setLoading(false);
    }
  };

  const getStrengthLevelColor = (level: CandidateStrength['strengthLevel']) => {
    switch (level) {
      case 'exceptional': return 'bg-green-100 text-green-800 border-green-200';
      case 'strong': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'moderate': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getWeaknessLevelColor = (level: CandidateWeakness['weaknessLevel']) => {
    switch (level) {
      case 'critical': return 'bg-red-100 text-red-800 border-red-200';
      case 'significant': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'minor': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getGapSeverityColor = (severity: SkillGapAnalysis['gapSeverity']) => {
    switch (severity) {
      case 'critical': return 'bg-red-500';
      case 'high': return 'bg-orange-500';
      case 'medium': return 'bg-yellow-500';
      case 'low': return 'bg-green-500';
      default: return 'bg-gray-500';
    }
  };

  const getPriorityColor = (priority: PersonalizedImprovement['priority']) => {
    switch (priority) {
      case 'critical': return 'bg-red-100 text-red-800';
      case 'high': return 'bg-orange-100 text-orange-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-96">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        <span className="ml-3 text-lg text-gray-600">Analyzing interview insights with AI...</span>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto space-y-6">
      {/* Header */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">AI Interview Insights</h1>
            <p className="text-gray-600 mt-2">
              Comprehensive AI-powered analysis of candidate performance and potential
            </p>
          </div>
          {insights.predictions && (
            <div className="text-right">
              <div className="text-3xl font-bold text-blue-600">
                {insights.predictions.overallScore.toFixed(0)}
              </div>
              <div className="text-sm text-gray-500">Success Score</div>
            </div>
          )}
        </div>
      </div>

      {/* Navigation Tabs */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200">
        <nav className="flex space-x-8 px-6" aria-label="Tabs">
          {[
            { id: 'overview', label: 'Overview', icon: '📊' },
            { id: 'strengths', label: 'Strengths', icon: '💪', count: insights.strengths.length },
            { id: 'weaknesses', label: 'Weaknesses', icon: '🎯', count: insights.weaknesses.length },
            { id: 'gaps', label: 'Skill Gaps', icon: '📈', count: insights.skillGaps.length },
            { id: 'improvements', label: 'Improvements', icon: '🚀', count: insights.improvements.length },
            { id: 'predictions', label: 'Predictions', icon: '🔮' },
            { id: 'comparisons', label: 'Comparisons', icon: '⚖️' }
          ].map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id as any)}
              className={`py-4 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${
                activeTab === tab.id
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <span>{tab.icon}</span>
              <span>{tab.label}</span>
              {tab.count !== undefined && (
                <span className="ml-2 bg-gray-100 text-gray-900 py-0.5 px-2 rounded-full text-xs">
                  {tab.count}
                </span>
              )}
            </button>
          ))}
        </nav>
      </div>

      {/* Tab Content */}
      <div className="space-y-6">
        {/* Overview Tab */}
        {activeTab === 'overview' && (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Key Strengths</h3>
              <div className="space-y-3">
                {insights.strengths.slice(0, 3).map((strength) => (
                  <div key={strength.id} className="flex items-center justify-between">
                    <span className="text-sm font-medium text-gray-900">{strength.skillArea}</span>
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStrengthLevelColor(strength.strengthLevel)}`}>
                      {strength.strengthLevel}
                    </span>
                  </div>
                ))}
              </div>
            </div>

            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Top Improvement Areas</h3>
              <div className="space-y-3">
                {insights.weaknesses.slice(0, 3).map((weakness) => (
                  <div key={weakness.id} className="flex items-center justify-between">
                    <span className="text-sm font-medium text-gray-900">{weakness.skillArea}</span>
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getWeaknessLevelColor(weakness.weaknessLevel)}`}>
                      {weakness.weaknessLevel}
                    </span>
                  </div>
                ))}
              </div>
            </div>

            {insights.predictions && (
              <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">Success Predictions</h3>
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-600">Job Performance</span>
                    <span className="text-sm font-medium text-gray-900">
                      {Math.round(insights.predictions.successPredictions.jobPerformance.probability * 100)}%
                    </span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-600">Role Readiness</span>
                    <span className="text-sm font-medium text-blue-600">
                      {insights.predictions.successPredictions.roleReadiness.readinessLevel.replace('_', ' ')}
                    </span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-600">Growth Potential</span>
                    <span className="text-sm font-medium text-green-600">
                      {insights.predictions.scoreBreakdown.growthPotential}%
                    </span>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}

        {/* Strengths Tab */}
        {activeTab === 'strengths' && (
          <div className="space-y-4">
            {insights.strengths.map((strength) => (
              <div key={strength.id} className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div className="flex items-start justify-between mb-4">
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900">{strength.skillArea}</h3>
                    <p className="text-sm text-gray-600 mt-1">{strength.category.replace('_', ' ')}</p>
                  </div>
                  <div className="flex flex-col items-end space-y-2">
                    <span className={`px-3 py-1 rounded-full text-sm font-medium border ${getStrengthLevelColor(strength.strengthLevel)}`}>
                      {strength.strengthLevel}
                    </span>
                    <span className="text-xs text-gray-500">
                      {Math.round(strength.evidenceScore * 100)}% confidence
                    </span>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h4 className="text-sm font-medium text-gray-900 mb-2">How it manifests:</h4>
                    <ul className="space-y-1">
                      {strength.manifestations.map((manifestation, index) => (
                        <li key={index} className="text-sm text-gray-600 flex items-start">
                          <span className="text-green-500 mr-2">•</span>
                          {manifestation}
                        </li>
                      ))}
                    </ul>
                  </div>

                  <div>
                    <h4 className="text-sm font-medium text-gray-900 mb-2">Benchmark Comparison:</h4>
                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">Percentile Ranking:</span>
                        <span className="text-sm font-medium text-green-600">
                          {strength.benchmarkComparison.percentile}th
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">Development Potential:</span>
                        <span className="text-sm font-medium text-blue-600">
                          {Math.round(strength.developmentPotential * 100)}%
                        </span>
                      </div>
                    </div>
                  </div>
                </div>

                {strength.supportingResponses.length > 0 && (
                  <div className="mt-4 pt-4 border-t border-gray-200">
                    <h4 className="text-sm font-medium text-gray-900 mb-2">Supporting Evidence:</h4>
                    <div className="bg-gray-50 rounded-lg p-3">
                      <p className="text-sm text-gray-700 italic">
                        "{strength.supportingResponses[0].responseExcerpt}"
                      </p>
                      <div className="flex items-center justify-between mt-2">
                        <span className="text-xs text-gray-500">Quality Score: {Math.round(strength.supportingResponses[0].qualityScore * 100)}%</span>
                        <span className="text-xs text-gray-500">Relevance: {Math.round(strength.supportingResponses[0].relevanceScore * 100)}%</span>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        )}

        {/* Weaknesses Tab */}
        {activeTab === 'weaknesses' && (
          <div className="space-y-4">
            {insights.weaknesses.map((weakness) => (
              <div key={weakness.id} className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div className="flex items-start justify-between mb-4">
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900">{weakness.skillArea}</h3>
                    <p className="text-sm text-gray-600 mt-1">{weakness.category.replace('_', ' ')}</p>
                  </div>
                  <div className="flex flex-col items-end space-y-2">
                    <span className={`px-3 py-1 rounded-full text-sm font-medium ${getWeaknessLevelColor(weakness.weaknessLevel)}`}>
                      {weakness.weaknessLevel}
                    </span>
                    <span className="text-xs text-gray-500">
                      Impact: {Math.round(weakness.impactScore * 100)}%
                    </span>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h4 className="text-sm font-medium text-gray-900 mb-2">Gap Analysis:</h4>
                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">Current Level:</span>
                        <span className="text-sm font-medium">{weakness.gapAnalysis.currentLevel}/10</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">Required Level:</span>
                        <span className="text-sm font-medium">{weakness.gapAnalysis.requiredLevel}/10</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">Time to Close:</span>
                        <span className="text-sm font-medium text-blue-600">{weakness.gapAnalysis.estimatedTimeframe}</span>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h4 className="text-sm font-medium text-gray-900 mb-2">How it manifests:</h4>
                    <ul className="space-y-1">
                      {weakness.manifestations.map((manifestation, index) => (
                        <li key={index} className="text-sm text-gray-600 flex items-start">
                          <span className="text-orange-500 mr-2">•</span>
                          {manifestation}
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>

                <div className="mt-4 pt-4 border-t border-gray-200">
                  <h4 className="text-sm font-medium text-gray-900 mb-3">Improvement Pathways:</h4>
                  <div className="space-y-3">
                    {weakness.improvementPathways.map((pathway, index) => (
                      <div key={index} className="bg-blue-50 rounded-lg p-3">
                        <div className="flex items-start justify-between">
                          <div>
                            <p className="text-sm font-medium text-gray-900">{pathway.approach}</p>
                            <p className="text-xs text-gray-600 mt-1">Time: {pathway.timeCommitment}</p>
                          </div>
                          <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full">
                            {Math.round(pathway.expectedImprovement * 100)}% improvement
                          </span>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Skill Gaps Tab */}
        {activeTab === 'gaps' && (
          <div className="space-y-4">
            {insights.skillGaps.map((gap, index) => (
              <div key={index} className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div className="flex items-start justify-between mb-4">
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900">{gap.skillArea}</h3>
                    <p className="text-sm text-gray-600 mt-1">{gap.category.replace('_', ' ')}</p>
                  </div>
                  <div className="flex flex-col items-end space-y-2">
                    <div className="flex items-center space-x-2">
                      <div className={`w-3 h-3 rounded-full ${getGapSeverityColor(gap.gapSeverity)}`}></div>
                      <span className="text-sm font-medium capitalize">{gap.gapSeverity}</span>
                    </div>
                    <span className="text-xs text-gray-500">Gap: {gap.gapSize.toFixed(1)} points</span>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div>
                    <h4 className="text-sm font-medium text-gray-900 mb-2">Current vs Required:</h4>
                    <div className="space-y-2">
                      <div className="flex items-center">
                        <span className="text-sm text-gray-600 w-16">Current:</span>
                        <div className="flex-1 bg-gray-200 rounded-full h-2 ml-2">
                          <div
                            className="bg-orange-500 h-2 rounded-full"
                            style={{ width: `${(gap.currentProficiency / 10) * 100}%` }}
                          ></div>
                        </div>
                        <span className="text-sm font-medium ml-2">{gap.currentProficiency}/10</span>
                      </div>
                      <div className="flex items-center">
                        <span className="text-sm text-gray-600 w-16">Required:</span>
                        <div className="flex-1 bg-gray-200 rounded-full h-2 ml-2">
                          <div
                            className="bg-blue-500 h-2 rounded-full"
                            style={{ width: `${(gap.requiredProficiency / 10) * 100}%` }}
                          ></div>
                        </div>
                        <span className="text-sm font-medium ml-2">{gap.requiredProficiency}/10</span>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h4 className="text-sm font-medium text-gray-900 mb-2">Business Impact:</h4>
                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">Role Relevance:</span>
                        <span className="text-sm font-medium">{Math.round(gap.businessImpact.roleRelevance * 100)}%</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">Career Impact:</span>
                        <span className="text-sm font-medium">{Math.round(gap.businessImpact.careerImpact * 100)}%</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">Urgency:</span>
                        <span className="text-sm font-medium capitalize text-red-600">{gap.businessImpact.urgency.replace('_', ' ')}</span>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h4 className="text-sm font-medium text-gray-900 mb-2">Top Recommendation:</h4>
                    {gap.developmentRecommendations.length > 0 && (
                      <div className="bg-blue-50 rounded-lg p-3">
                        <p className="text-sm font-medium text-gray-900">{gap.developmentRecommendations[0].resource}</p>
                        <p className="text-xs text-gray-600 mt-1">
                          {gap.developmentRecommendations[0].duration} • {gap.developmentRecommendations[0].cost} cost
                        </p>
                        <div className="mt-2">
                          <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full">
                            {Math.round(gap.developmentRecommendations[0].effectiveness * 100)}% effective
                          </span>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Improvements Tab */}
        {activeTab === 'improvements' && (
          <div className="space-y-4">
            {insights.improvements.map((improvement) => (
              <div key={improvement.id} className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div className="flex items-start justify-between mb-4">
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900">{improvement.title}</h3>
                    <p className="text-sm text-gray-600 mt-1">{improvement.description}</p>
                  </div>
                  <div className="flex flex-col items-end space-y-2">
                    <span className={`px-3 py-1 rounded-full text-sm font-medium ${getPriorityColor(improvement.priority)}`}>
                      {improvement.priority} priority
                    </span>
                    <span className="text-xs text-gray-500">
                      {Math.round(improvement.expectedOutcomes.successProbability * 100)}% success rate
                    </span>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h4 className="text-sm font-medium text-gray-900 mb-3">Action Plan:</h4>
                    <div className="space-y-3">
                      {improvement.actionPlan.phases.map((phase, index) => (
                        <div key={index} className="border-l-4 border-blue-500 pl-3">
                          <h5 className="text-sm font-medium text-gray-900">{phase.name}</h5>
                          <p className="text-xs text-gray-600">{phase.duration}</p>
                          <ul className="mt-2 space-y-1">
                            {phase.objectives.map((objective, objIndex) => (
                              <li key={objIndex} className="text-xs text-gray-700">• {objective}</li>
                            ))}
                          </ul>
                        </div>
                      ))}
                    </div>
                  </div>

                  <div>
                    <h4 className="text-sm font-medium text-gray-900 mb-3">Expected Outcomes:</h4>
                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">Time to Results:</span>
                        <span className="text-sm font-medium">{improvement.expectedOutcomes.timeToResults}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">Investment:</span>
                        <span className="text-sm font-medium">{improvement.actionPlan.investmentRequired}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">Effort:</span>
                        <span className="text-sm font-medium">{improvement.actionPlan.estimatedEffort}</span>
                      </div>
                    </div>

                    <div className="mt-4">
                      <h5 className="text-sm font-medium text-gray-900 mb-2">Career Impact:</h5>
                      <p className="text-sm text-gray-700">{improvement.expectedOutcomes.careerImpact}</p>
                    </div>
                  </div>
                </div>

                <div className="mt-4 pt-4 border-t border-gray-200">
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-gray-600">
                      Personalized for {improvement.personalization.learningStyle} learner • {improvement.personalization.availableTime}
                    </span>
                    <button
                      onClick={() => onInsightAction?.('start_improvement', improvement)}
                      className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 text-sm font-medium"
                    >
                      Start Plan
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Predictions Tab */}
        {activeTab === 'predictions' && insights.predictions && (
          <div className="space-y-6">
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Overall Success Prediction</h3>
              <div className="flex items-center justify-center mb-6">
                <div className="text-center">
                  <div className="text-6xl font-bold text-blue-600 mb-2">
                    {insights.predictions.overallScore.toFixed(0)}
                  </div>
                  <div className="text-lg text-gray-600">Success Score</div>
                  <div className="text-sm text-gray-500">
                    {insights.predictions.confidenceInterval.confidence * 100}% confidence
                    ({insights.predictions.confidenceInterval.lower.toFixed(0)}-{insights.predictions.confidenceInterval.upper.toFixed(0)})
                  </div>
                </div>
              </div>

              <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                {Object.entries(insights.predictions.scoreBreakdown).map(([key, value]) => (
                  <div key={key} className="text-center">
                    <div className="text-2xl font-bold text-gray-900">{value}%</div>
                    <div className="text-sm text-gray-600 capitalize">{key.replace(/([A-Z])/g, ' $1').trim()}</div>
                  </div>
                ))}
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <h4 className="text-lg font-semibold text-gray-900 mb-4">Job Performance Prediction</h4>
                <div className="mb-4">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm text-gray-600">Success Probability</span>
                    <span className="text-lg font-bold text-green-600">
                      {Math.round(insights.predictions.successPredictions.jobPerformance.probability * 100)}%
                    </span>
                  </div>
                </div>
                <div className="space-y-2">
                  <h5 className="text-sm font-medium text-gray-900">Key Factors:</h5>
                  {insights.predictions.successPredictions.jobPerformance.factors.map((factor, index) => (
                    <div key={index} className="flex items-center justify-between">
                      <span className="text-sm text-gray-600">{factor.factor}</span>
                      <div className="flex items-center space-x-2">
                        <div className={`w-2 h-2 rounded-full ${factor.impact > 0 ? 'bg-green-500' : 'bg-red-500'}`}></div>
                        <span className="text-sm font-medium">{Math.abs(factor.impact * 100).toFixed(0)}%</span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <h4 className="text-lg font-semibold text-gray-900 mb-4">Role Readiness</h4>
                <div className="mb-4">
                  <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                    insights.predictions.successPredictions.roleReadiness.readinessLevel === 'ready' ? 'bg-green-100 text-green-800' :
                    insights.predictions.successPredictions.roleReadiness.readinessLevel === 'nearly_ready' ? 'bg-yellow-100 text-yellow-800' :
                    'bg-red-100 text-red-800'
                  }`}>
                    {insights.predictions.successPredictions.roleReadiness.readinessLevel.replace('_', ' ')}
                  </span>
                </div>
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">Time to Readiness:</span>
                    <span className="text-sm font-medium">{insights.predictions.successPredictions.roleReadiness.timeToReadiness}</span>
                  </div>
                  <div>
                    <h5 className="text-sm font-medium text-gray-900 mb-1">Key Blockers:</h5>
                    <ul className="space-y-1">
                      {insights.predictions.successPredictions.roleReadiness.keyBlockers.map((blocker, index) => (
                        <li key={index} className="text-sm text-gray-600">• {blocker}</li>
                      ))}
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Comparisons Tab */}
        {activeTab === 'comparisons' && insights.comparativeAnalysis && (
          <div className="space-y-6">
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Comparative Analysis</h3>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                <div className="text-center">
                  <div className="text-2xl font-bold text-blue-600">{insights.comparativeAnalysis.baselineMetrics.totalInterviews}</div>
                  <div className="text-sm text-gray-600">Total Interviews</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-green-600">{insights.comparativeAnalysis.baselineMetrics.averageScore.toFixed(1)}</div>
                  <div className="text-sm text-gray-600">Average Score</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-purple-600">{Math.round(insights.comparativeAnalysis.baselineMetrics.improvementRate * 100)}%</div>
                  <div className="text-sm text-gray-600">Improvement Rate</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-orange-600">{Math.round(insights.comparativeAnalysis.baselineMetrics.consistencyScore * 100)}%</div>
                  <div className="text-sm text-gray-600">Consistency</div>
                </div>
              </div>

              {insights.comparativeAnalysis.comparisons.map((comparison, index) => (
                <div key={index} className="border-t border-gray-200 pt-6">
                  <div className="flex items-center justify-between mb-4">
                    <h4 className="text-md font-semibold text-gray-900">{comparison.comparisonGroup}</h4>
                    <div className="text-right">
                      <div className="text-lg font-bold text-blue-600">{comparison.percentile}th</div>
                      <div className="text-sm text-gray-500">percentile</div>
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <h5 className="text-sm font-medium text-gray-900 mb-2">Strength Areas:</h5>
                      <div className="space-y-2">
                        {comparison.strengthAreas.map((area, areaIndex) => (
                          <div key={areaIndex} className="flex items-center justify-between">
                            <span className="text-sm text-gray-600">{area.skill}</span>
                            <div className="flex items-center space-x-2">
                              <span className="text-sm font-medium">{area.candidateScore.toFixed(1)}</span>
                              <span className="text-xs text-green-600">+{area.advantage.toFixed(1)}</span>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>

                    <div>
                      <h5 className="text-sm font-medium text-gray-900 mb-2">Improvement Areas:</h5>
                      <div className="space-y-2">
                        {comparison.improvementAreas.map((area, areaIndex) => (
                          <div key={areaIndex} className="flex items-center justify-between">
                            <span className="text-sm text-gray-600">{area.skill}</span>
                            <div className="flex items-center space-x-2">
                              <span className="text-sm font-medium">{area.candidateScore.toFixed(1)}</span>
                              <span className="text-xs text-red-600">{area.gap.toFixed(1)}</span>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>

                  {comparison.insights.length > 0 && (
                    <div className="mt-4">
                      <h5 className="text-sm font-medium text-gray-900 mb-2">Key Insights:</h5>
                      <ul className="space-y-1">
                        {comparison.insights.map((insight, insightIndex) => (
                          <li key={insightIndex} className="text-sm text-gray-600">• {insight}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AIInsightsDashboard;