import React, { useState, useEffect } from 'react';
import { api } from '../../lib/api';
import {
  InterviewType,
  QuestionCategory,
  QuestionDifficulty,
  ConversationalQuestion
} from '../../types/interview';
import {
  aiQuestionGenerationService,
  ResumeContent,
  JobDescription,
  QuestionGenerationContext,
  GeneratedQuestion,
  QuestionGenerationRequest
} from '../../services/AIQuestionGenerationService';

interface AIQuestionGeneratorProps {
  candidateId?: string;
  interviewType: InterviewType;
  onQuestionsGenerated: (questions: GeneratedQuestion[]) => void;
  onPreviewQuestion?: (question: GeneratedQuestion) => void;
  existingQuestions?: ConversationalQuestion[];
  maxQuestions?: number;
}

const AIQuestionGenerator: React.FC<AIQuestionGeneratorProps> = ({
  candidateId,
  interviewType,
  onQuestionsGenerated,
  onPreviewQuestion,
  existingQuestions = [],
  maxQuestions = 15
}) => {
  const [resumeContent, setResumeContent] = useState<ResumeContent | null>(null);
  const [jobDescription, setJobDescription] = useState<JobDescription | null>(null);
  const [generationOptions, setGenerationOptions] = useState({
    count: 10,
    diversityFactor: 0.7,
    includeFollowUps: true,
    targetDifficulty: QuestionDifficulty.MEDIUM,
    focusAreas: [] as QuestionCategory[],
    excludeCategories: [] as QuestionCategory[]
  });
  const [generatedQuestions, setGeneratedQuestions] = useState<GeneratedQuestion[]>([]);
  const [selectedQuestions, setSelectedQuestions] = useState<Set<string>>(new Set());
  const [isGenerating, setIsGenerating] = useState(false);
  const [generationMode, setGenerationMode] = useState<'resume' | 'job' | 'hybrid' | 'advanced'>('resume');
  const [previewQuestion, setPreviewQuestion] = useState<GeneratedQuestion | null>(null);
  const [showAdvancedOptions, setShowAdvancedOptions] = useState(false);

  useEffect(() => {
    if (candidateId) {
      loadCandidateData();
    }
  }, [candidateId]);

  const loadCandidateData = async () => {
    try {
      // In real implementation, this would fetch actual candidate data
      // Mock resume content for demonstration
      const mockResumeContent: ResumeContent = {
        workExperience: [
          {
            id: 'exp-1',
            company: 'TechCorp Inc.',
            position: 'Senior Full-Stack Developer',
            description: 'Led development of scalable web applications using React and Node.js',
            technologies: ['React', 'Node.js', 'TypeScript', 'PostgreSQL', 'AWS'],
            achievements: [
              'Improved application performance by 40%',
              'Led a team of 5 developers',
              'Implemented CI/CD pipeline reducing deployment time by 60%'
            ],
            startDate: '2022-01-01',
            endDate: '2024-01-01',
            industry: 'Technology'
          },
          {
            id: 'exp-2',
            company: 'StartupXYZ',
            position: 'Frontend Developer',
            description: 'Developed responsive web applications and mobile interfaces',
            technologies: ['React', 'JavaScript', 'CSS', 'REST APIs'],
            achievements: [
              'Built 3 major product features from scratch',
              'Improved user engagement by 25%'
            ],
            startDate: '2020-06-01',
            endDate: '2021-12-01',
            industry: 'Technology'
          }
        ],
        education: [
          {
            id: 'edu-1',
            institution: 'University of Technology',
            degree: 'Bachelor of Science',
            field: 'Computer Science',
            gpa: 3.7,
            graduationDate: '2020-05-01',
            relevantCourses: ['Data Structures', 'Algorithms', 'Database Systems', 'Software Engineering']
          }
        ],
        projects: [
          {
            id: 'proj-1',
            name: 'E-commerce Platform',
            description: 'Full-stack e-commerce platform with real-time inventory management',
            technologies: ['React', 'Node.js', 'MongoDB', 'Socket.io', 'Stripe'],
            outcomes: ['Processed $100K+ in transactions', 'Served 1000+ active users'],
            duration: '8 months',
            teamSize: 3
          },
          {
            id: 'proj-2',
            name: 'Task Management App',
            description: 'Collaborative task management application with real-time updates',
            technologies: ['Vue.js', 'Express.js', 'WebSocket', 'MySQL'],
            outcomes: ['Used by 5 development teams', 'Improved productivity by 30%'],
            duration: '4 months',
            teamSize: 2
          }
        ],
        skills: {
          technical: ['JavaScript', 'React', 'Node.js', 'TypeScript', 'Python', 'AWS', 'Docker', 'PostgreSQL'],
          soft: ['Leadership', 'Communication', 'Problem Solving', 'Team Collaboration', 'Mentoring'],
          languages: ['English', 'Spanish'],
          certifications: ['AWS Certified Developer', 'Scrum Master']
        },
        personalInfo: {
          yearsExperience: 4,
          seniorityLevel: 'senior',
          industries: ['Technology', 'E-commerce'],
          preferredRoles: ['Senior Developer', 'Tech Lead', 'Full-Stack Engineer']
        }
      };

      setResumeContent(mockResumeContent);
    } catch (error) {
      console.error('Failed to load candidate data:', error);
    }
  };

  const handleJobDescriptionUpload = (event: React.ChangeEvent<HTMLTextAreaElement>) => {
    const jobText = event.target.value;

    // Simple job description parsing (in real implementation, this would be more sophisticated)
    const mockJobDescription: JobDescription = {
      title: 'Senior Full-Stack Developer',
      company: 'Innovation Labs',
      description: jobText,
      requirements: {
        required: ['5+ years experience', 'React', 'Node.js', 'TypeScript', 'System Design'],
        preferred: ['AWS', 'Docker', 'Microservices', 'Leadership Experience'],
        experience: '5+ years',
        education: 'Bachelor\'s degree in Computer Science or related field'
      },
      responsibilities: [
        'Lead development of scalable web applications',
        'Mentor junior developers',
        'Collaborate with product and design teams',
        'Implement best practices and code reviews'
      ],
      technologies: ['React', 'Node.js', 'TypeScript', 'AWS', 'Docker'],
      industry: 'Technology',
      level: 'senior',
      location: 'Remote',
      benefits: ['Competitive salary', 'Health insurance', 'Remote work', 'Professional development']
    };

    setJobDescription(mockJobDescription);
  };

  const generateQuestions = async () => {
    if (!resumeContent && !jobDescription) {
      alert('Please provide resume content or job description');
      return;
    }

    setIsGenerating(true);
    try {
      let questions: GeneratedQuestion[] = [];

      switch (generationMode) {
        case 'resume':
          if (resumeContent) {
            questions = await aiQuestionGenerationService.generateFromResume(resumeContent, {
              interviewType,
              count: generationOptions.count,
              focusAreas: generationOptions.focusAreas.length > 0 ? generationOptions.focusAreas : undefined,
              targetDifficulty: generationOptions.targetDifficulty
            });
          }
          break;

        case 'job':
          if (jobDescription) {
            questions = await aiQuestionGenerationService.generateFromJobDescription(
              jobDescription,
              resumeContent || undefined,
              {
                count: generationOptions.count,
                emphasizeGaps: true,
                includeCompanySpecific: true
              }
            );
          }
          break;

        case 'hybrid':
          if (resumeContent && jobDescription) {
            const resumeQuestions = await aiQuestionGenerationService.generateFromResume(resumeContent, {
              interviewType,
              count: Math.ceil(generationOptions.count * 0.6),
              focusAreas: generationOptions.focusAreas.length > 0 ? generationOptions.focusAreas : undefined
            });

            const jobQuestions = await aiQuestionGenerationService.generateFromJobDescription(
              jobDescription,
              resumeContent,
              { count: Math.ceil(generationOptions.count * 0.4) }
            );

            questions = [...resumeQuestions, ...jobQuestions];
          }
          break;

        case 'advanced':
          const context: QuestionGenerationContext = {
            resumeContent: resumeContent || undefined,
            jobDescription: jobDescription || undefined,
            interviewType,
            previousQuestions: existingQuestions,
            previousResponses: [],
            targetDifficulty: generationOptions.targetDifficulty,
            focusAreas: generationOptions.focusAreas.length > 0 ? generationOptions.focusAreas : undefined
          };

          const request: QuestionGenerationRequest = {
            context,
            count: generationOptions.count,
            diversityFactor: generationOptions.diversityFactor,
            includeFollowUps: generationOptions.includeFollowUps,
            excludeCategories: generationOptions.excludeCategories.length > 0 ? generationOptions.excludeCategories : undefined
          };

          const response = await aiQuestionGenerationService.generateAdvancedQuestions(request);
          questions = response.questions;
          break;
      }

      setGeneratedQuestions(questions);
      setSelectedQuestions(new Set(questions.map(q => q.question_id)));

    } catch (error) {
      console.error('Question generation failed:', error);
      alert('Failed to generate questions. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };

  const toggleQuestionSelection = (questionId: string) => {
    const newSelected = new Set(selectedQuestions);
    if (newSelected.has(questionId)) {
      newSelected.delete(questionId);
    } else {
      newSelected.add(questionId);
    }
    setSelectedQuestions(newSelected);
  };

  const handlePreviewQuestion = (question: GeneratedQuestion) => {
    setPreviewQuestion(question);
    onPreviewQuestion?.(question);
  };

  const handleConfirmGeneration = () => {
    const selectedQuestionObjects = generatedQuestions.filter(q =>
      selectedQuestions.has(q.question_id)
    );
    onQuestionsGenerated(selectedQuestionObjects);
  };

  const getDifficultyColor = (difficulty: QuestionDifficulty) => {
    switch (difficulty) {
      case QuestionDifficulty.EASY: return 'bg-green-100 text-green-800';
      case QuestionDifficulty.MEDIUM: return 'bg-yellow-100 text-yellow-800';
      case QuestionDifficulty.HARD: return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getCategoryColor = (category: QuestionCategory) => {
    switch (category) {
      case QuestionCategory.TECHNICAL: return 'bg-blue-100 text-blue-800';
      case QuestionCategory.BEHAVIORAL: return 'bg-purple-100 text-purple-800';
      case QuestionCategory.SYSTEM_DESIGN: return 'bg-indigo-100 text-indigo-800';
      case QuestionCategory.SITUATIONAL: return 'bg-orange-100 text-orange-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getSourceIcon = (source: string) => {
    switch (source) {
      case 'resume_experience': return '💼';
      case 'resume_project': return '🚀';
      case 'resume_skill': return '🎯';
      case 'job_requirement': return '📋';
      case 'contextual_followup': return '🔗';
      case 'template_based': return '📝';
      default: return '❓';
    }
  };

  return (
    <div className="max-w-6xl mx-auto space-y-6">
      {/* Header */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">AI Question Generator</h2>
        <p className="text-gray-600">
          Generate personalized interview questions using AI based on resume content, job descriptions, and interview context.
        </p>
      </div>

      {/* Configuration Panel */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <h3 className="text-lg font-medium text-gray-900 mb-4">Generation Configuration</h3>

        {/* Generation Mode */}
        <div className="mb-6">
          <label className="block text-sm font-medium text-gray-700 mb-3">Generation Mode</label>
          <div className="grid grid-cols-4 gap-3">
            {[
              { value: 'resume', label: 'Resume-Based', description: 'Generate from candidate resume' },
              { value: 'job', label: 'Job-Specific', description: 'Generate from job description' },
              { value: 'hybrid', label: 'Hybrid', description: 'Combine resume and job data' },
              { value: 'advanced', label: 'Advanced AI', description: 'Full AI-powered generation' }
            ].map((mode) => (
              <label key={mode.value} className="relative">
                <input
                  type="radio"
                  name="generationMode"
                  value={mode.value}
                  checked={generationMode === mode.value}
                  onChange={(e) => setGenerationMode(e.target.value as any)}
                  className="sr-only"
                />
                <div className={`p-3 border rounded-lg cursor-pointer transition-colors ${
                  generationMode === mode.value
                    ? 'border-blue-500 bg-blue-50'
                    : 'border-gray-200 hover:border-gray-300'
                }`}>
                  <div className="font-medium text-gray-900 text-sm">{mode.label}</div>
                  <div className="text-xs text-gray-500 mt-1">{mode.description}</div>
                </div>
              </label>
            ))}
          </div>
        </div>

        {/* Job Description Input */}
        {(generationMode === 'job' || generationMode === 'hybrid' || generationMode === 'advanced') && (
          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Job Description
            </label>
            <textarea
              rows={6}
              placeholder="Paste the job description here..."
              onChange={handleJobDescriptionUpload}
              className="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm"
            />
            {jobDescription && (
              <div className="mt-2 p-3 bg-green-50 border border-green-200 rounded-lg">
                <div className="flex items-center space-x-2">
                  <svg className="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                  </svg>
                  <span className="text-sm text-green-800">
                    Job description parsed: {jobDescription.title} at {jobDescription.company}
                  </span>
                </div>
              </div>
            )}
          </div>
        )}

        {/* Basic Options */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Number of Questions: {generationOptions.count}
            </label>
            <input
              type="range"
              min="5"
              max={maxQuestions}
              step="1"
              value={generationOptions.count}
              onChange={(e) => setGenerationOptions(prev => ({ ...prev, count: parseInt(e.target.value) }))}
              className="w-full"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Target Difficulty</label>
            <select
              value={generationOptions.targetDifficulty}
              onChange={(e) => setGenerationOptions(prev => ({ ...prev, targetDifficulty: e.target.value as QuestionDifficulty }))}
              className="w-full border border-gray-300 rounded-lg px-3 py-2"
            >
              <option value={QuestionDifficulty.EASY}>Easy</option>
              <option value={QuestionDifficulty.MEDIUM}>Medium</option>
              <option value={QuestionDifficulty.HARD}>Hard</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Diversity Factor: {(generationOptions.diversityFactor * 100).toFixed(0)}%
            </label>
            <input
              type="range"
              min="0"
              max="1"
              step="0.1"
              value={generationOptions.diversityFactor}
              onChange={(e) => setGenerationOptions(prev => ({ ...prev, diversityFactor: parseFloat(e.target.value) }))}
              className="w-full"
            />
          </div>
        </div>

        {/* Advanced Options */}
        <div className="mb-6">
          <button
            onClick={() => setShowAdvancedOptions(!showAdvancedOptions)}
            className="flex items-center space-x-2 text-blue-600 hover:text-blue-800"
          >
            <span>Advanced Options</span>
            <svg
              className={`w-4 h-4 transition-transform ${showAdvancedOptions ? 'rotate-180' : ''}`}
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
            </svg>
          </button>

          {showAdvancedOptions && (
            <div className="mt-4 space-y-4 p-4 bg-gray-50 rounded-lg">
              {/* Focus Areas */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Focus Areas</label>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
                  {Object.values(QuestionCategory).map((category) => (
                    <label key={category} className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        checked={generationOptions.focusAreas.includes(category)}
                        onChange={(e) => {
                          if (e.target.checked) {
                            setGenerationOptions(prev => ({
                              ...prev,
                              focusAreas: [...prev.focusAreas, category]
                            }));
                          } else {
                            setGenerationOptions(prev => ({
                              ...prev,
                              focusAreas: prev.focusAreas.filter(area => area !== category)
                            }));
                          }
                        }}
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                      />
                      <span className="text-sm text-gray-700 capitalize">
                        {category.replace('_', ' ').toLowerCase()}
                      </span>
                    </label>
                  ))}
                </div>
              </div>

              {/* Additional Options */}
              <div className="flex items-center space-x-6">
                <label className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    checked={generationOptions.includeFollowUps}
                    onChange={(e) => setGenerationOptions(prev => ({ ...prev, includeFollowUps: e.target.checked }))}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span className="text-sm text-gray-700">Include Follow-up Questions</span>
                </label>
              </div>
            </div>
          )}
        </div>

        {/* Generate Button */}
        <div className="flex justify-center">
          <button
            onClick={generateQuestions}
            disabled={isGenerating || (!resumeContent && !jobDescription)}
            className="px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
          >
            {isGenerating ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                <span>Generating Questions...</span>
              </>
            ) : (
              <>
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                </svg>
                <span>Generate Questions</span>
              </>
            )}
          </button>
        </div>
      </div>

      {/* Generated Questions */}
      {generatedQuestions.length > 0 && (
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex justify-between items-center mb-6">
            <div>
              <h3 className="text-lg font-medium text-gray-900">Generated Questions</h3>
              <p className="text-sm text-gray-600">
                {selectedQuestions.size} of {generatedQuestions.length} questions selected
              </p>
            </div>
            <div className="flex items-center space-x-3">
              <button
                onClick={() => setSelectedQuestions(new Set(generatedQuestions.map(q => q.question_id)))}
                className="text-sm text-blue-600 hover:text-blue-800"
              >
                Select All
              </button>
              <button
                onClick={() => setSelectedQuestions(new Set())}
                className="text-sm text-gray-600 hover:text-gray-800"
              >
                Clear All
              </button>
              <button
                onClick={handleConfirmGeneration}
                disabled={selectedQuestions.size === 0}
                className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Use Selected Questions
              </button>
            </div>
          </div>

          <div className="space-y-4">
            {generatedQuestions.map((question, index) => (
              <div
                key={question.question_id}
                className={`border rounded-lg p-4 transition-colors ${
                  selectedQuestions.has(question.question_id)
                    ? 'border-blue-500 bg-blue-50'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
              >
                <div className="flex items-start space-x-3">
                  <input
                    type="checkbox"
                    checked={selectedQuestions.has(question.question_id)}
                    onChange={() => toggleQuestionSelection(question.question_id)}
                    className="mt-1 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <div className="flex-1">
                    <div className="flex items-start justify-between mb-2">
                      <h4 className="font-medium text-gray-900 flex-1">
                        {index + 1}. {question.question_text}
                      </h4>
                      <button
                        onClick={() => handlePreviewQuestion(question)}
                        className="ml-3 text-blue-600 hover:text-blue-800"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                        </svg>
                      </button>
                    </div>

                    <div className="flex items-center space-x-3 mb-2">
                      <span className={`px-2 py-1 rounded text-xs font-medium ${getCategoryColor(question.category)}`}>
                        {question.category.replace('_', ' ')}
                      </span>
                      <span className={`px-2 py-1 rounded text-xs font-medium ${getDifficultyColor(question.difficulty)}`}>
                        {question.difficulty}
                      </span>
                      <span className="text-xs text-gray-500">
                        {getSourceIcon(question.generationMetadata.source)} {question.generationMetadata.source.replace('_', ' ')}
                      </span>
                      <span className="text-xs text-gray-500">
                        Relevance: {Math.round(question.generationMetadata.relevanceScore * 100)}%
                      </span>
                    </div>

                    {question.context && (
                      <p className="text-sm text-gray-600 mb-2">
                        <strong>Context:</strong> {question.context}
                      </p>
                    )}

                    <div className="text-xs text-gray-500">
                      Expected duration: {question.expected_duration}s •
                      Confidence: {Math.round(question.generationMetadata.confidence * 100)}%
                    </div>

                    {question.generationMetadata.alternatives.length > 0 && (
                      <details className="mt-2">
                        <summary className="text-xs text-blue-600 cursor-pointer">
                          View alternatives ({question.generationMetadata.alternatives.length})
                        </summary>
                        <div className="mt-2 space-y-1">
                          {question.generationMetadata.alternatives.map((alt, altIndex) => (
                            <div key={altIndex} className="text-xs text-gray-600 pl-4 border-l-2 border-gray-200">
                              <div className="font-medium">{alt.question}</div>
                              <div>Focus: {alt.focus} • Difficulty: {alt.difficulty}</div>
                            </div>
                          ))}
                        </div>
                      </details>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Question Preview Modal */}
      {previewQuestion && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg max-w-2xl w-full m-4 max-h-screen overflow-y-auto">
            <div className="p-6">
              <div className="flex justify-between items-start mb-4">
                <h3 className="text-lg font-medium text-gray-900">Question Preview</h3>
                <button
                  onClick={() => setPreviewQuestion(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>

              <div className="space-y-4">
                <div>
                  <h4 className="font-medium text-gray-900 mb-2">{previewQuestion.question_text}</h4>
                  <div className="flex items-center space-x-3">
                    <span className={`px-2 py-1 rounded text-xs font-medium ${getCategoryColor(previewQuestion.category)}`}>
                      {previewQuestion.category.replace('_', ' ')}
                    </span>
                    <span className={`px-2 py-1 rounded text-xs font-medium ${getDifficultyColor(previewQuestion.difficulty)}`}>
                      {previewQuestion.difficulty}
                    </span>
                    <span className="text-xs text-gray-500">
                      {previewQuestion.expected_duration}s
                    </span>
                  </div>
                </div>

                {previewQuestion.context && (
                  <div>
                    <h5 className="font-medium text-gray-900 mb-1">Context</h5>
                    <p className="text-sm text-gray-600">{previewQuestion.context}</p>
                  </div>
                )}

                <div>
                  <h5 className="font-medium text-gray-900 mb-2">Generation Details</h5>
                  <div className="bg-gray-50 rounded-lg p-3 space-y-2">
                    <div className="text-sm">
                      <strong>Source:</strong> {previewQuestion.generationMetadata.source.replace('_', ' ')}
                    </div>
                    <div className="text-sm">
                      <strong>Confidence:</strong> {Math.round(previewQuestion.generationMetadata.confidence * 100)}%
                    </div>
                    <div className="text-sm">
                      <strong>Relevance:</strong> {Math.round(previewQuestion.generationMetadata.relevanceScore * 100)}%
                    </div>
                    <div className="text-sm">
                      <strong>Difficulty Justification:</strong> {previewQuestion.generationMetadata.difficultyJustification}
                    </div>
                    {previewQuestion.generationMetadata.adaptationReason && (
                      <div className="text-sm">
                        <strong>Adaptation:</strong> {previewQuestion.generationMetadata.adaptationReason}
                      </div>
                    )}
                  </div>
                </div>
              </div>

              <div className="flex justify-end space-x-3 mt-6">
                <button
                  onClick={() => setPreviewQuestion(null)}
                  className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
                >
                  Close
                </button>
                <button
                  onClick={() => {
                    toggleQuestionSelection(previewQuestion.question_id);
                    setPreviewQuestion(null);
                  }}
                  className={`px-4 py-2 rounded-lg ${
                    selectedQuestions.has(previewQuestion.question_id)
                      ? 'bg-red-600 text-white hover:bg-red-700'
                      : 'bg-blue-600 text-white hover:bg-blue-700'
                  }`}
                >
                  {selectedQuestions.has(previewQuestion.question_id) ? 'Remove' : 'Select'} Question
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AIQuestionGenerator;