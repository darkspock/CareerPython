from dataclasses import dataclass
from datetime import date
from typing import Optional

from src.candidate.domain.entities.candidate_experience import CandidateExperience
from src.candidate.domain.value_objects.candidate_experience_id import CandidateExperienceId
from src.candidate.domain.value_objects.candidate_id import CandidateId
from src.candidate.infrastructure.repositories.candidate_experience_repository import \
    CandidateExperienceRepositoryInterface
from src.shared.application.command_bus import Command, CommandHandler


@dataclass
class CreateExperienceCommand(Command):
    id: CandidateExperienceId
    candidate_id: CandidateId
    job_title: str
    company: str
    description: str
    start_date: date
    end_date: Optional[date] = None


class CreateExperienceCommandHandler(CommandHandler[CreateExperienceCommand]):
    def __init__(self, experience_repository: CandidateExperienceRepositoryInterface):
        self.experience_repository = experience_repository

    def execute(self, command: CreateExperienceCommand) -> None:
        # Validate and convert dates
        start_date = command.start_date
        end_date = None
        if command.end_date:
            end_date = command.end_date
            if end_date < start_date:
                raise ValueError("End date cannot be before start date")

        # Create experience entity (ID will be auto-generated by entity)
        new_experience = CandidateExperience.create(
            id=command.id,
            candidate_id=command.candidate_id,
            job_title=command.job_title,
            company=command.company,
            description=command.description,
            start_date=start_date,
            end_date=end_date
        )

        # Save experience
        self.experience_repository.create(new_experience)

        # Dispatch domain event (if needed)
        # self.event_bus.dispatch(ExperienceCreatedEvent(candidate_id=command.candidate_id))
